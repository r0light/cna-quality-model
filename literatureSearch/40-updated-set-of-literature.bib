@Article{AbdelBaky2019,
  author   = {AbdelBaky, Moustafa and Parashar, Manish},
  journal  = {IEEE Transactions on Services Computing},
  title    = {A General Performance and QoS Model for Distributed Software-Defined Environments},
  year     = {2019},
  issn     = {1939-1374},
  pages    = {1-1},
  abstract = {The landscape for cloud services and cyberinfrastructure offerings has increased drastically over the past few years. Initially, users moved their applications to the cloud to take advantage of a pay-per-usage model and on-demand access. However, as more cloud providers joined the market, users shifted their goals for using cloud computing from cost reduction to resilience, agility, and optimization. These goals can be achieved by dynamically combining services from multiple providers, for example, to avoid data center or cloud zone outages or to take advantage of extensive offerings with different price points. However, to efficiently support application deployment in this dynamic environment, new models and tools that can measure the application performance and the Quality of Service (QoS) of different configurations are required. The goal of this work is to evaluate the application performance and the QoS of a distributed Software-Defined Environment as well as calculate the QoS of alternative configurations from the underlying pool of services. In particular, we present a mathematical model and a tool for evaluating the performance and QoS of batch application workflows in a distributed environment. We experimentally evaluate the proposed model using a bioinformatics workflow running on infrastructure services from multiple cloud providers.},
  doi      = {10.1109/TSC.2019.2928300},
  file     = {:AbdelBaky2019 - A General Performance and QoS Model for Distributed Software Defined Environments.pdf:PDF},
  keywords = {Cloud computing;Quality of service;Computational modeling;Data models;Optimization;Mathematical model;Tools;QoS modeling;performance modeling;multi-cloud;software-define environments},
  url      = {https://doi.org/10.1109/TSC.2019.2928300},
}

@InProceedings{Alam2016,
  author    = {Ahmad F. B. Alam and Abbas Soltanian and Sami Yangui and Mohammad A. Salahuddin and Roch Glitho and Halima Elbiaze},
  booktitle = {Symposium on Computers and Communication (ISCC)},
  title     = {A Cloud Platform-as-a-Service for multimedia conferencing service provisioning},
  year      = {2016},
  month     = {jun},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/iscc.2016.7543756},
  file      = {:Alam2016 - A Cloud Platform As a Service for Multimedia Conferencing Service Provisioning.pdf:PDF},
  url       = {https://doi.org/10.1109/iscc.2016.7543756},
}

@InCollection{Apel2019,
  author    = {Sebastian Apel and Florian Hertrampf and Steffen Sp√§the},
  booktitle = {Innovations for Community Services},
  publisher = {Springer International Publishing},
  title     = {Towards a Metrics-Based Software Quality Rating for a Microservice Architecture},
  year      = {2019},
  pages     = {205--220},
  abstract  = {Microservice architectures should be based on isolated, independent and resilient services. In practice, however, that means that different concepts must be taken into account when designing, developing, and operating services. The WINNER research project is developing an application, based on such a microservice architecture in the context of Smart Home, Smart Grid and electromobility in tenant households, as a measurement and processing infrastructure. About this WINNER software, system metrics are calculated and collected, and the potential for rating software quality in the sense of ISO 25010 is examined. For analysis, a microservice architecture describing model will be designed witches describes correlations and links in the service network. Its instance in the context of WINNER, as well as source code and process analyses, are used to perform the final quality considerations.},
  doi       = {10.1007/978-3-030-22482-0_15},
  file      = {:Apel2019 - Towards a Metrics Based Software Quality Rating for a Microservice Architecture.pdf:PDF},
  url       = {https://doi.org/10.1007%2F978-3-030-22482-0_15},
}

@InProceedings{Arumugam2017,
  author    = {K. Arumugam and P. Sumathi},
  booktitle = {International Conference on Computing Methodologies and Communication (ICCMC)},
  title     = {Secure and {QoS} guaranteed selection resource for storing health care information of cloud users},
  year      = {2017},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/iccmc.2017.8282657},
  file      = {:Arumugam2017 - Secure and QoS Guaranteed Selection Resource for Storing Health Care Information of Cloud Users.pdf:PDF},
  url       = {https://doi.org/10.1109/iccmc.2017.8282657},
}

@InProceedings{Athanasopoulos2011,
  author    = {Dionysis Athanasopoulos and Apostolos V. Zarras},
  booktitle = {2011 {IEEE} International Conference on Web Services},
  title     = {Fine-Grained Metrics of Cohesion Lack for Service Interfaces},
  year      = {2011},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {found through NikDaud2014},
  doi       = {10.1109/icws.2011.27},
  file      = {:Athanasopoulos2011 - Fine Grained Metrics of Cohesion Lack for Service Interfaces.pdf:PDF},
  url       = {https://doi.org/10.1109/icws.2011.27},
}

@Article{Athanasopoulos2015,
  author    = {Dionysis Athanasopoulos and Apostolos V. Zarras and George Miskos and Valerie Issarny and Panos Vassiliadis},
  journal   = {{IEEE} Transactions on Services Computing},
  title     = {Cohesion-Driven Decomposition of Service Interfaces without Access to Source Code},
  year      = {2015},
  month     = {jul},
  number    = {4},
  pages     = {550--562},
  volume    = {8},
  comment   = {found through Bogner2020},
  doi       = {10.1109/tsc.2014.2310195},
  file      = {:Athanasopoulos2015 - Cohesion Driven Decomposition of Service Interfaces without Access to Source Code.pdf:PDF},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
  url       = {https://doi.org/10.1109/tsc.2014.2310195},
}

@InCollection{BaniIsmail2018,
  author    = {Basel Bani-Ismail and Youcef Baghdadi},
  booktitle = {Communications in Computer and Information Science},
  publisher = {Springer International Publishing},
  title     = {A Survey of Existing Evaluation Frameworks for Service Identification Methods: Towards a Comprehensive Evaluation Framework},
  year      = {2018},
  pages     = {191--202},
  abstract  = {Service identification is one of the main challenges in developing services for Service-Oriented Architecture (SOA). A large number of Service Identification Methods (SIMs) have been proposed to simplify service identification. Therefore, many evaluation frameworks are available in the literature for comparing the existing SIMs. This paper aims to identify and analyze the existing evaluation frameworks for SIMs. Moreover, it aims to propose comprehensive evaluation criteria that address most aspects of the existing SIMs. A review of 23 evaluation frameworks for SIMs built the foundation for deriving a comprehensive set of 16 criteria, namely SOA lifecycle coverage, approach, input artifact, technique, types of services, service description, service quality attributes, service granularity, comprehensive, systematic, availability, tool support, adoption of existing practices, validation, configurability, and domain. The proposed criteria set can be used as a first step towards a comprehensive evaluation framework for SIMs.},
  doi       = {10.1007/978-3-319-95204-8_17},
  file      = {:BaniIsmail2018 - A Survey of Existing Evaluation Frameworks for Service Identification Methods_ Towards a Comprehensive Evaluation Framework.pdf:PDF},
  url       = {https://doi.org/10.1007%2F978-3-319-95204-8_17},
}

@InProceedings{Baranwal2014,
  author    = {Gaurav Baranwal and Deo Prakash Vidyarthi},
  booktitle = {International advance computing conference (IACC)},
  title     = {A framework for selection of best cloud service provider using ranked voting method},
  year      = {2014},
  month     = {feb},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/iadcc.2014.6779430},
  file      = {:Baranwal2014 - A Framework for Selection of Best Cloud Service Provider Using Ranked Voting Method.pdf:PDF},
  url       = {https://doi.org/10.1109/iadcc.2014.6779430},
}

@Article{Baranwal2016,
  author    = {Gaurav Baranwal and Deo Prakash Vidyarthi},
  journal   = {Concurrency and Computation: Practice and Experience},
  title     = {A cloud service selection model using improved ranked voting method},
  year      = {2016},
  month     = {jan},
  number    = {13},
  pages     = {3540--3567},
  volume    = {28},
  comment   = {found through Guerron2020},
  doi       = {10.1002/cpe.3740},
  file      = {:Baranwal2016 - A Cloud Service Selection Model Using Improved Ranked Voting Method.pdf:PDF},
  publisher = {Wiley},
  url       = {https://doi.org/10.1002/cpe.3740},
}

@Article{BASCI2009,
  author    = {D. BASCI and S. MISRA},
  journal   = {Advances in Electrical and Computer Engineering},
  title     = {Data Complexity Metrics for {XML} Web Services},
  year      = {2009},
  number    = {2},
  pages     = {9--15},
  volume    = {9},
  comment   = {found through Bogner2020},
  doi       = {10.4316/aece.2009.02002},
  file      = {:BASCI2009 - Data Complexity Metrics for XML Web Services.pdf:PDF},
  publisher = {Universitatea Stefan cel Mare din Suceava},
  url       = {https://doi.org/10.4316/aece.2009.02002},
}

@InProceedings{Becker2015,
  author    = {Becker, Matthias and Lehrig, Sebastian and Becker, Steffen},
  booktitle = {Proceedings of the 6th ACM/SPEC International Conference on Performance Engineering},
  title     = {Systematically Deriving Quality Metrics for Cloud Computing Systems},
  year      = {2015},
  address   = {New York, NY, USA},
  pages     = {169‚Äì174},
  publisher = {Association for Computing Machinery},
  series    = {ICPE '15},
  abstract  = {In cloud computing, software architects develop systems for virtually unlimited resources
that cloud providers account on a pay-per-use basis. Elasticity management systems
provision these resources autonomously to deal with changing workload. Such changing
workloads call for new objective metrics allowing architects to quantify quality properties
like scalability, elasticity, and efficiency, e.g., for requirements/SLO engineering
and software design analysis. In literature, initial metrics for these properties
have been proposed. However, current metrics lack a systematic derivation and assume
knowledge of implementation details like resource handling. Therefore, these metrics
are inapplicable where such knowledge is unavailable.To cope with these lacks, this
short paper derives metrics for scalability, elasticity, and efficiency properties
of cloud computing systems using the goal question metric (GQM) method. Our derivation
uses a running example that outlines characteristics of cloud computing systems. Eventually,
this example allows us to set up a systematic GQM plan and to derive an initial set
of six new metrics. We particularly show that our GQM plan allows to classify existing
metrics.},
  doi       = {10.1145/2668930.2688043},
  file      = {:Becker2015 - Systematically Deriving Quality Metrics for Cloud Computing Systems.pdf:PDF},
  isbn      = {9781450332484},
  keywords  = {metric, elasticity, cloud computing, gqm, efficiency, slo, analysis, scalability},
  location  = {Austin, Texas, USA},
  numpages  = {6},
  url       = {https://doi.org/10.1145/2668930.2688043},
}

@Article{Bento2021,
  author    = {Andre Bento and Jaime Correia and Ricardo Filipe and Filipe Araujo and Jorge Cardoso},
  journal   = {Journal of Grid Computing},
  title     = {Automated Analysis of Distributed Tracing: Challenges and Research Directions},
  year      = {2021},
  month     = {feb},
  number    = {1},
  volume    = {19},
  abstract  = {Microservice-based architectures are gaining popularity for their benefits in software development. Distributed tracing can be used to help operators maintain observability in this highly distributed context, and find problems such as latency, and analyse their context and root cause. However, exploring and working with distributed tracing data is sometimes difficult due to its complexity and application specificity, volume of information and lack of tools. The most common and general tools available for this kind of data, focus on trace-level human-readable data visualisation. Unfortunately, these tools do not provide good ways to abstract, navigate, filter and analyse tracing data. Additionally, they do not automate or aid with trace analysis, relying on administrators to do it themselves. In this paper we propose using tracing data to extract service metrics, dependency graphs and work-flows with the objective of detecting anomalous services and operation patterns. We implemented and published open source prototype tools to process tracing data, conforming to the OpenTracing standard, and developed anomaly detection methods. We validated our tools and methods against real data provided by a major cloud provider. Results show that there is an underused wealth of actionable information that can be extracted from both metric and morphological aspects derived from tracing. In particular, our tools were able to detect anomalous behaviour and situate it both in terms of involved services, work-flows and time-frame. Furthermore, we identified some limitations of the OpenTracing format‚Äîas well as the industry accepted tracing abstractions‚Äî, and provide suggestions to test trace quality and enhance the standard.},
  doi       = {10.1007/s10723-021-09551-5},
  file      = {:Bento2021 - Automated Analysis of Distributed Tracing_ Challenges and Research Directions.pdf:PDF},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007/s10723-021-09551-5},
}

@InCollection{Bogner2020,
  author    = {Justus Bogner and Stefan Wagner and Alfred Zimmermann},
  booktitle = {Communications in Computer and Information Science},
  publisher = {Springer International Publishing},
  title     = {Collecting Service-Based Maintainability Metrics from {RESTful} {API} Descriptions: Static Analysis and Threshold Derivation},
  year      = {2020},
  pages     = {215--227},
  abstract  = {While many maintainability metrics have been explicitly designed for service-based systems, tool-supported approaches to automatically collect these metrics are lacking. Especially in the context of microservices, decentralization and technological heterogeneity may pose challenges for static analysis. We therefore propose the modular and extensible RAMA approach (RESTful API Metric Analyzer) to calculate such metrics from machine-readable interface descriptions of RESTful services. We also provide prototypical tool support, the RAMA CLI, which currently parses the formats OpenAPI, RAML, and WADL and calculates 10 structural service-based metrics proposed in scientific literature. To make RAMA measurement results more actionable, we additionally designed a repeatable benchmark for quartile-based threshold ranges (green, yellow, orange, red). In an exemplary run, we derived thresholds for all RAMA CLI metrics from the interface descriptions of 1,737 publicly available RESTful APIs. Researchers and practitioners can use RAMA to evaluate the maintainability of RESTful services or to support the empirical evaluation of new service interface metrics.},
  doi       = {10.1007/978-3-030-59155-7_16},
  file      = {:Bogner2020 - Collecting Service Based Maintainability Metrics from RESTful API Descriptions_ Static Analysis and Threshold Derivation.pdf:PDF},
  url       = {https://doi.org/10.1007%2F978-3-030-59155-7_16},
}

@InProceedings{Bogner2017,
  author    = {Bogner, Justus and Wagner, Stefan and Zimmermann, Alfred},
  booktitle = {Proceedings of the 27th International Workshop on Software Measurement and 12th International Conference on Software Process and Product Measurement},
  title     = {Automatically Measuring the Maintainability of Service- and Microservice-Based Systems: A Literature Review},
  year      = {2017},
  address   = {New York, NY, USA},
  pages     = {107‚Äì115},
  publisher = {Association for Computing Machinery},
  series    = {IWSM Mensura '17},
  abstract  = {In a time of digital transformation, the ability to quickly and efficiently adapt
software systems to changed business requirements becomes more important than ever.
Measuring the maintainability of software is therefore crucial for the long-term management
of such products. With Service-based Systems (SBSs) being a very important form of
enterprise software, we present a holistic overview of such metrics specifically designed
for this type of system, since traditional metrics - e.g. object-oriented ones - are
not fully applicable in this case. The selected metric candidates from the literature
review were mapped to 4 dominant design properties: size, complexity, coupling, and
cohesion. Microservice-based Systems (ŒºSBSs) emerge as an agile and fine-grained variant
of SBSs. While the majority of identified metrics are also applicable to this specialization
(with some limitations), the large number of services in combination with technological
heterogeneity and decentralization of control significantly impacts automatic metric
collection in such a system. Our research therefore suggest that specialized tool
support is required to guarantee the practical applicability of the presented metrics
to ŒºSBSs.},
  doi       = {10.1145/3143434.3143443},
  file      = {:Bogner2017 - Automatically Measuring the Maintainability of Service and Microservice Based Systems_ a Literature Review.pdf:PDF},
  isbn      = {9781450348539},
  keywords  = {maintainability, metrics, service-based systems, SOA, microservices},
  location  = {Gothenburg, Sweden},
  numpages  = {9},
  url       = {https://doi.org/10.1145/3143434.3143443},
}

@InProceedings{Brito2021,
  author    = {Brito, Miguel and Cunha, J\'{a}come and Saraiva, Jo\~{a}o},
  booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
  title     = {Identification of Microservices from Monolithic Applications through Topic Modelling},
  year      = {2021},
  address   = {New York, NY, USA},
  pages     = {1409‚Äì1418},
  publisher = {Association for Computing Machinery},
  series    = {SAC '21},
  abstract  = {Microservices emerged as one of the most popular architectural patterns in the recent
years given the increased need to scale, grow and flexibilize software projects accompanied
by the growth in cloud computing and DevOps. Many software applications are being
submitted to a process of migration from its monolithic architecture to a more modular,
scalable and flexible architecture of microservices. This process is slow and, depending
on the project's complexity, it may take months or even years to complete.This paper
proposes a new approach on microservice identification by resorting to topic modelling
in order to identify services according to domain terms. This approach in combination
with clustering techniques produces a set of services based on the original software.
The proposed methodology is implemented as an open-source tool for exploration of
monolithic architectures and identification of microservices. A quantitative analysis
using the state of the art metrics on independence of functionality and modularity
of services was conducted on 200 open-source projects collected from GitHub. Cohesion
at message and domain level metrics' showed medians of roughly 0.6. Interfaces per
service exhibited a median of 1.5 with a compact interquartile range. Structural and
conceptual modularity revealed medians of 0.2 and 0.4 respectively.Our first results
are positive demonstrating beneficial identification of services due to overall metrics'
results.},
  doi       = {10.1145/3412841.3442016},
  file      = {:Brito2021 - Identification of Microservices from Monolithic Applications through Topic Modelling.pdf:PDF},
  isbn      = {9781450381048},
  location  = {Virtual Event, Republic of Korea},
  numpages  = {10},
  url       = {https://doi.org/10.1145/3412841.3442016},
}

@InProceedings{Souza2016,
  author    = {Ramon Hugo de Souza and Paulo Arion Flores and Mario Antonio Ribeiro Dantas and Frank Siqueira},
  booktitle = {Symposium on Computers and Communication (ISCC)},
  title     = {Architectural recovering model for Distributed Databases: A reliability, availability and serviceability approach},
  year      = {2016},
  month     = {jun},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/iscc.2016.7543799},
  file      = {:Souza2016 - Architectural Recovering Model for Distributed Databases_ a Reliability, Availability and Serviceability Approach.pdf:PDF},
  url       = {https://doi.org/10.1109/iscc.2016.7543799},
}

@InCollection{Engel2018,
  author    = {Thomas Engel and Melanie Langermeier and Bernhard Bauer and Alexander Hofmann},
  booktitle = {Lecture Notes in Business Information Processing},
  publisher = {Springer International Publishing},
  title     = {Evaluation of Microservice Architectures: A Metric and Tool-Based Approach},
  year      = {2018},
  pages     = {74--89},
  abstract  = {Microservices are an architectural style that decomposes the functionality of an application system into several small functional units. The services are implemented and managed independently from each other. Breaking up monolithic structures into a microservice architecture increases the number of single components massively. Thus, effective management of the dependencies between them is required. This task can be supported with the creation and evaluation of architectural models. In this work, we propose an evaluation approach for microservice architectures based on identified architecture principles from research and practice like a small size of the services, a domain-driven design or loose coupling. Based on a study showing the challenges in current microservice architectures, we derived principles and metrics for the evaluation of the architectural design. The required architecture data is captured with a reverse engineering approach from traces of communication data. The developed tool is finally evaluated within a case study.},
  doi       = {10.1007/978-3-319-92901-9_8},
  file      = {:Engel2018 - Evaluation of Microservice Architectures_ a Metric and Tool Based Approach.pdf:PDF},
  url       = {https://doi.org/10.1007%2F978-3-319-92901-9_8},
}

@Article{Garg2013,
  author    = {Saurabh Kumar Garg and Steve Versteeg and Rajkumar Buyya},
  journal   = {Future Generation Computer Systems},
  title     = {A framework for ranking of cloud computing services},
  year      = {2013},
  month     = {jun},
  number    = {4},
  pages     = {1012--1023},
  volume    = {29},
  comment   = {found through Guerron2020},
  doi       = {10.1016/j.future.2012.06.006},
  file      = {:Garg2013 - A Framework for Ranking of Cloud Computing Services.pdf:PDF},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016/j.future.2012.06.006},
}

@Article{Guerout2014,
  author    = {Tom Gu{\'{e}}rout and Samir Medjiah and Georges Da Costa and Thierry Monteil},
  journal   = {Sustainable Computing: Informatics and Systems},
  title     = {Quality of service modeling for green scheduling in Clouds},
  year      = {2014},
  month     = {dec},
  number    = {4},
  pages     = {225--240},
  volume    = {4},
  comment   = {found through Guerron2020},
  doi       = {10.1016/j.suscom.2014.08.006},
  file      = {:Guerout2014 - Quality of Service Modeling for Green Scheduling in Clouds.pdf:PDF},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016/j.suscom.2014.08.006},
}

@Article{Guerron2020,
  author   = {Guerron, Ximena and Abrah√£o, Silvia and Insfran, Emilio and Fern√°ndez-Diego, Marta and Gonz√°lez-Ladr√≥n-De-Guevara, Fernando},
  journal  = {IEEE Access},
  title    = {A Taxonomy of Quality Metrics for Cloud Services},
  year     = {2020},
  issn     = {2169-3536},
  pages    = {131461-131498},
  volume   = {8},
  abstract = {A large number of metrics with which to assess the quality of cloud services have been proposed over the last years. However, this knowledge is still dispersed, and stakeholders have little or no guidance when choosing metrics that will be suitable to evaluate their cloud services. The objective of this paper is, therefore, to systematically identify, taxonomically classify, and compare existing quality of service (QoS) metrics in the cloud computing domain. We conducted a systematic literature review of 84 studies selected from a set of 4333 studies that were published from 2006 to November 2018. We specifically identified 470 metric operationalizations that were then classified using a taxonomy, which is also introduced in this paper. The data extracted from the metrics were subsequently analyzed using thematic analysis. The findings indicated that most metrics evaluate quality attributes related to performance efficiency (64%) and that there is a need for metrics that evaluate other characteristics, such as security and compatibility. The majority of the metrics are used during the Operation phase of the cloud services and are applied to the running service. Our results also revealed that metrics for cloud services are still in the early stages of maturity - only 10% of the metrics had been empirically validated. The proposed taxonomy can be used by practitioners as a guideline when specifying service level objectives or deciding which metric is best suited to the evaluation of their cloud services, and by researchers as a comprehensive quality framework in which to evaluate their approaches.},
  doi      = {10.1109/ACCESS.2020.3009079},
  file     = {:Guerron2020 - A Taxonomy of Quality Metrics for Cloud Services.pdf:PDF},
  keywords = {Measurement;Cloud computing;Taxonomy;Quality of service;Systematics;NIST;Elasticity;Software quality;metrics;cloud services;systematic literature review},
  url      = {https://doi.org/10.1109/ACCESS.2020.3009079},
}

@InProceedings{Haupt2017,
  author    = {Florian Haupt and Frank Leymann and Anton Scherer and Karolina Vukojevic-Haupt},
  booktitle = {2017 {IEEE} International Conference on Software Architecture ({ICSA})},
  title     = {A Framework for the Structural Analysis of {REST} {APIs}},
  year      = {2017},
  month     = {apr},
  publisher = {{IEEE}},
  comment   = {found through Bogner2020},
  doi       = {10.1109/icsa.2017.40},
  file      = {:Haupt2017 - A Framework for the Structural Analysis of REST APIs.pdf:PDF},
  url       = {https://doi.org/10.1109/icsa.2017.40},
}

@InCollection{Hirzalla2009,
  author    = {Mamoun Hirzalla and Jane Cleland-Huang and Ali Arsanjani},
  booktitle = {Service-Oriented Computing {\textendash} {ICSOC} 2008 Workshops},
  publisher = {Springer Berlin Heidelberg},
  title     = {A Metrics Suite for Evaluating Flexibility and Complexity in Service Oriented Architectures},
  year      = {2009},
  pages     = {41--52},
  comment   = {found through Bogner2017, Bogner2020 and NikDaud2014},
  doi       = {10.1007/978-3-642-01247-1_5},
  file      = {:Hirzalla2009 - A Metrics Suite for Evaluating Flexibility and Complexity in Service Oriented Architectures.pdf:PDF},
  url       = {https://doi.org/10.1007/978-3-642-01247-1_5},
}

@InProceedings{Hofmeister2008,
  author    = {Helge Hofmeister and Guido Wirtz},
  booktitle = {2008 12th International {IEEE} Enterprise Distributed Object Computing Conference},
  title     = {Supporting Service-Oriented Design with Metrics},
  year      = {2008},
  month     = {sep},
  publisher = {{IEEE}},
  comment   = {found through Bogner2017 and NikDaud2014},
  doi       = {10.1109/edoc.2008.13},
  file      = {:Hofmeister2008 - Supporting Service Oriented Design with Metrics.pdf:PDF},
  url       = {https://doi.org/10.1109/edoc.2008.13},
}

@InProceedings{Hu2016,
  author    = {Yazhou Hu and Bo Deng and Yu Yang and Dongxia Wang},
  booktitle = {15th International Symposium on Parallel and Distributed Computing (ISPDC)},
  title     = {Elasticity Evaluation of {IaaS} Cloud Based on Mixed Workloads},
  year      = {2016},
  publisher = {{IEEE}},
  doi       = {10.1109/ispdc.2016.28},
  file      = {:Hu2016 - Elasticity Evaluation of IaaS Cloud Based on Mixed Workloads.pdf:PDF},
  url       = {https://doi.org/10.1109/ispdc.2016.28},
}

@Article{Jin2021,
  author    = {Wuxia Jin and Ting Liu and Yuanfang Cai and Rick Kazman and Ran Mo and Qinghua Zheng},
  journal   = {{IEEE} Transactions on Software Engineering},
  title     = {Service Candidate Identification from Monolithic Systems Based on Execution Traces},
  year      = {2021},
  month     = {may},
  number    = {5},
  pages     = {987--1007},
  volume    = {47},
  comment   = {found through Brito2021},
  doi       = {10.1109/tse.2019.2910531},
  file      = {:Jin2021 - Service Candidate Identification from Monolithic Systems Based on Execution Traces.pdf:PDF},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
  url       = {https://doi.org/10.1109/tse.2019.2910531},
}

@InProceedings{Jin2018,
  author    = {Wuxia Jin and Ting Liu and Qinghua Zheng and Di Cui and Yuanfang Cai},
  booktitle = {International Conference on Web Services (ICWS)},
  title     = {Functionality-Oriented Microservice Extraction Based on Execution Trace Clustering},
  year      = {2018},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {found through Brito2021},
  doi       = {10.1109/icws.2018.00034},
  file      = {:Jin2018 - Functionality Oriented Microservice Extraction Based on Execution Trace Clustering.pdf:PDF},
  url       = {https://doi.org/10.1109/icws.2018.00034},
}

@InProceedings{Karhikeyan2012,
  author    = {T. Karhikeyan and J. Geetha},
  booktitle = {2012 International Conference on Recent Advances in Computing and Software Systems},
  title     = {A metrics suite and fuzzy model for measuring coupling in Service Oriented Architecture},
  year      = {2012},
  month     = {apr},
  publisher = {{IEEE}},
  comment   = {found through NikDaud2014},
  doi       = {10.1109/racss.2012.6212677},
  file      = {:Karhikeyan2012 - A Metrics Suite and Fuzzy Model for Measuring Coupling in Service Oriented Architecture.pdf:PDF},
  url       = {https://doi.org/10.1109/racss.2012.6212677},
}

@InProceedings{Kazemi2011,
  author    = {Ali Kazemi and Ali Rostampour and Amin Zamiri and Pooyan Jamshidi and Hassan Haghighi and Fereidoon Shams},
  booktitle = {2011 11th International Conference on Quality Software},
  title     = {An Information Retrieval Based Approach for Measuring Service Conceptual Cohesion},
  year      = {2011},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {found through NikDaud2014},
  doi       = {10.1109/qsic.2011.24},
  file      = {:Kazemi2011 - An Information Retrieval Based Approach for Measuring Service Conceptual Cohesion.pdf:PDF},
  url       = {https://doi.org/},
}

@Article{KAZEMI2013,
  author    = {ALI KAZEMI and HASSAN HAGHIGHI and FEREIDOON SHAMS},
  journal   = {International Journal of Software Engineering and Knowledge Engineering},
  title     = {{ABSIM}: {AN} {AUTOMATED} {BUSINESS} {SERVICE} {IDENTIFICATION} {METHOD}},
  year      = {2013},
  month     = {nov},
  number    = {09},
  pages     = {1303--1342},
  volume    = {23},
  comment   = {found through BaniIsmail2018},
  doi       = {10.1142/s0218194013500411},
  file      = {:KAZEMI2013 - ABSIM_ aN AUTOMATED BUSINESS SERVICE IDENTIFICATION METHOD.pdf:PDF},
  publisher = {World Scientific Pub Co Pte Lt},
  url       = {https://doi.org/},
}

@InProceedings{Kuhlenkamp2019,
  author    = {Kuhlenkamp, J\"{o}rn and Werner, Sebastian and Borges, Maria C. and El Tal, Karim and Tai, Stefan},
  booktitle = {Proceedings of the 12th IEEE/ACM International Conference on Utility and Cloud Computing},
  title     = {An Evaluation of FaaS Platforms as a Foundation for Serverless Big Data Processing},
  year      = {2019},
  address   = {New York, NY, USA},
  pages     = {1‚Äì9},
  publisher = {Association for Computing Machinery},
  series    = {UCC'19},
  abstract  = {Function-as-a-Service (FaaS), offers a new alternative to operate cloud-based applications.
FaaS platforms enable developers to define their application only through a set of
service functions, relieving them of infrastructure management tasks, which are executed
automatically by the platform. Since its introduction, FaaS has grown to support workloads
beyond the lightweight use-cases it was originally intended for, and now serves as
a viable paradigm for big data processing. However, several questions regarding FaaS
platform quality are still unanswered. Specifically, the impact of automatic infrastructure
management on serverless big data applications remains unexplored.In this paper, we
propose a novel evaluation method (SIEM) to understand the impact of these tasks.
For this purpose, we introduce new metrics to quantify quality in different big data
application scenarios. We show an application of SIEM by evaluating the four major
FaaS providers, and contribute results and new insights for FaaS-based big data processing.},
  doi       = {10.1145/3344341.3368796},
  file      = {:Kuhlenkamp2019 - An Evaluation of FaaS Platforms As a Foundation for Serverless Big Data Processing.pdf:PDF},
  isbn      = {9781450368940},
  keywords  = {serverless, benchmarking, big data processing, cloud computing},
  location  = {Auckland, New Zealand},
  numpages  = {9},
  url       = {https://doi.org/10.1145/3344341.3368796},
}

@InProceedings{La2013,
  author    = {Hyun Jung La and Jin Sun Her and Soo Dong Kim},
  booktitle = {2013 5th International Workshop on Principles of Engineering Service-Oriented Systems ({PESOS})},
  title     = {Framework for evaluating reusability of Component-as-a-Service ({CaaS})},
  year      = {2013},
  month     = {may},
  publisher = {{IEEE}},
  comment   = {found through Oliveira2018},
  doi       = {10.1109/pesos.2013.6635976},
  file      = {:La2013 - Framework for Evaluating Reusability of Component As a Service (CaaS).pdf:PDF},
  url       = {https://doi.org/},
}

@InProceedings{Lehmann2017,
  author    = {Lehmann, Martin and Sandnes, Frode Eika},
  booktitle = {Proceedings of the Second International Conference on Internet of Things, Data and Cloud Computing},
  title     = {A Framework for Evaluating Continuous Microservice Delivery Strategies},
  year      = {2017},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  series    = {ICC '17},
  abstract  = {The emergence of service-oriented computing, and in particular microservice architecture,
has introduced a new layer of complexity to the already challenging task of continuously
delivering changes to the end users. Cloud computing has turned scalable hardware
into a commodity, but also imposes some requirements on the software development process.
Yet, the literature mainly focuses on quantifiable metrics such as number of manual
steps and lines of code required to make a change. The industry, on the other hand,
appears to focus more on qualitative metrics such as increasing the productivity of
their developers. These are common goals, but must be measured using different approaches.
Therefore, based on interviews of industry stakeholders a framework for evaluating
and comparing approaches to continuous microservice delivery is proposed. We show
that it is possible to efficiently evaluate and compare strategies for continuously
delivering microservices.},
  articleno = {64},
  doi       = {10.1145/3018896.3018961},
  file      = {:Lehmann2017 - A Framework for Evaluating Continuous Microservice Delivery Strategies.pdf:PDF},
  isbn      = {9781450347747},
  keywords  = {microservices, microservice architectures, deployment strategy, cloud computing, evaluation framework, continuous deployment},
  location  = {Cambridge, United Kingdom},
  numpages  = {9},
  url       = {https://doi.org/10.1145/3018896.3018961},
}

@Article{Li2020,
  author   = {Li, Keqin},
  journal  = {IEEE Transactions on Cloud Computing},
  title    = {Quantitative Modeling and Analytical Calculation of Elasticity in Cloud Computing},
  year     = {2020},
  issn     = {2168-7161},
  month    = {Oct},
  number   = {4},
  pages    = {1135-1148},
  volume   = {8},
  abstract = {Elasticity is a fundamental feature of cloud computing and can be considered as a great advantage and a key benefit of cloud computing. One key challenge in cloud elasticity is lack of consensus on a quantifiable, measurable, observable, and calculable definition of elasticity and systematic approaches to modeling, quantifying, analyzing, and predicting elasticity. Another key challenge in cloud computing is lack of effective ways for prediction and optimization of performance and cost in an elastic cloud platform. The present paper makes the following significant contributions. First, we present a new, quantitative, and formal definition of elasticity in cloud computing, i.e., the probability that the computing resources provided by a cloud platform match the current workload. Our definition is applicable to any cloud platform and can be easily measured and monitored. Furthermore, we develop an analytical model to study elasticity by treating a cloud platform as a queueing system, and use a continuous-time Markov chain (CTMC) model to precisely calculate the elasticity value of a cloud platform by using an analytical and numerical method based on just a few parameters, namely, the task arrival rate, the service rate, the virtual machine start-up and shut-down rates. In addition, we formally define auto-scaling schemes and point out that our model and method can be easily extended to handle arbitrarily sophisticated scaling schemes. Second, we apply our model and method to predict many other important properties of an elastic cloud computing system, such as average task response time, throughput, quality of service, average number of VMs, average number of busy VMs, utilization, cost, cost-performance ratio, productivity, and scalability. In fact, from a cloud consumer's point of view, these performance and cost metrics are even more important than the elasticity metric. Our study in this paper has two significance. On one hand, a cloud service provider can predict its performance and cost guarantee using the results developed in this paper. On the other hand, a cloud service provider can optimize its elastic scaling scheme to deliver the best cost-performance ratio. To the best of our knowledge, this is the first paper that analytically and comprehensively studies elasticity, performance, and cost in cloud computing. Our model and method significantly contribute to the understanding of cloud elasticity and management of elastic cloud computing systems.},
  doi      = {10.1109/TCC.2017.2665549},
  file     = {:Li2020c - Quantitative Modeling and Analytical Calculation of Elasticity in Cloud Computing.pdf:PDF},
  keywords = {Cloud computing;Markov processes;Computational modeling;Analytical models;Pricing;Quality of service;Optimization;Queueing analysis;Cloud computing;continuous-time Markov chain;cost-performance ratio;elasticity;queueing model},
  url      = {https://doi.org/10.1109/TCC.2017.2665549},
}

@InProceedings{Ma2009,
  author    = {Qian Ma and Nianjun Zhou and Yanfeng Zhu and Hao Wang},
  booktitle = {International Conference on Services Computing},
  title     = {Evaluating Service Identification with Design Metrics on Business Process Decomposition},
  year      = {2009},
  publisher = {{IEEE}},
  comment   = {found through Kazemi2013},
  doi       = {10.1109/scc.2009.44},
  file      = {:Ma2009 - Evaluating Service Identification with Design Metrics on Business Process Decomposition.pdf:PDF},
  url       = {https://doi.org/10.1109/scc.2009.44},
}

@Article{Manuel2013,
  author    = {Paul Manuel},
  journal   = {Annals of Operations Research},
  title     = {A trust model of cloud computing based on Quality of Service},
  year      = {2013},
  month     = {apr},
  number    = {1},
  pages     = {281--292},
  volume    = {233},
  comment   = {found through Guerron2020},
  doi       = {10.1007/s10479-013-1380-x},
  file      = {:Manuel2013 - A Trust Model of Cloud Computing Based on Quality of Service.pdf:PDF},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007/s10479-013-1380-x},
}

@InProceedings{NikDaud2014,
  author    = {Nik Daud, Nik Marsyahariani and Wan Kadir, Wan M. N.},
  booktitle = {2014 8th. Malaysian Software Engineering Conference (MySEC)},
  title     = {Static and dynamic classifications for SOA structural attributes metrics},
  year      = {2014},
  month     = {Sep.},
  pages     = {130-135},
  abstract  = {Evaluating qualities of software based on software structural attributes such as coupling and cohesion are frequently done in practice as these attributes directly have impacts on value of higher level quality. Concerning oneself with structural attributes values early on helps developers to predict quality attributes level in the software. Service-Oriented Architecture (SOA) is an architectural concept where services are used as building blocks in developing new software. Lots of structural attributes metrics related to SOA had been proposed these recent years, which triggered an investigation to classify these metrics based on specific criteria. In this paper, we introduce classifications for SOA based structural attributes metrics, where the metrics are restricted to coupling, cohesion and complexity metrics. These metrics are classified based on software static and dynamic aspects with some brief introduction for each metric. By classifying these SOA based structural attributes metrics, it will allow user to avoid redundancy in proposing similar metrics thus increases the reusability of existing metrics.},
  doi       = {10.1109/MySec.2014.6986002},
  file      = {:NikDaud2014 - Static and Dynamic Classifications for SOA Structural Attributes Metrics.pdf:PDF},
  keywords  = {Couplings;Service-oriented architecture;Complexity theory;Software measurement;Semiconductor optical amplifiers;Structural attributes metric;Service Oriented Architecture;metrics classification},
  url       = {https://doi.org/10.1109/MySec.2014.6986002},
}

@InCollection{Ntentos2020a,
  author    = {Evangelos Ntentos and Uwe Zdun and Konstantinos Plakidas and Sebastian Meixner and Sebastian Geiger},
  booktitle = {Software Architecture},
  publisher = {Springer International Publishing},
  title     = {Assessing Architecture Conformance to Coupling-Related Patterns and Practices in Microservices},
  year      = {2020},
  pages     = {3--20},
  abstract  = {Microservices are the go-to architectural style for building applications that are polyglot, support high scalability, independent development and deployment, and are rapidly adaptable to changes. Among the core tenets for a successful microservice architecture is high independence of the individual microservices, i.e. loose coupling. A number of patterns and best practices are well-established in the literature, but most actual microservice-based systems do not, as a whole or in part, conform to them. Assessing this conformance manually is not realistically possible for large-scale systems. This study aims to provide the foundations for an automated approach for assessing conformance to coupling-related patterns and practices specific for microservice architectures. We propose a model-based assessment based on generic, technology-independent metrics, connected to typical design decisions encountered in microservice architectures. We demonstrate and assess the validity and appropriateness of these metrics by performing an assessment of the conformance of real-world systems to patterns through statistical methods.},
  doi       = {10.1007/978-3-030-58923-3_1},
  file      = {:Ntentos2020 - Assessing Architecture Conformance to Coupling Related Patterns and Practices in Microservices.pdf:PDF},
  url       = {https://doi.org/10.1007%2F978-3-030-58923-3_1},
}

@InProceedings{Ntentos2020,
  author       = {Ntentos, Evangelos and Zdun, Uwe and Plakidas, Konstantinos and Meixner, Sebastian and Geiger, Sebastian},
  booktitle    = {International Conference on Service-Oriented Computing},
  title        = {Metrics for Assessing Architecture Conformance to Microservice Architecture Patterns and Practices},
  year         = {2020},
  organization = {Springer},
  pages        = {580--596},
  doi          = {10.1007/978-3-030-65310-1_42},
  file         = {:Ntentos2020 - Metrics for Assessing Architecture Conformance to Microservice Architecture Patterns and Practices.pdf:PDF},
  url          = {https://doi.org/10.1007/978-3-030-65310-1_42},
}

@InProceedings{Oh2011,
  author    = {Sang Hun Oh and Hyun Jung La and Soo Dong Kim},
  booktitle = {2011 {IEEE} 8th International Conference on e-Business Engineering},
  title     = {A Reusability Evaluation Suite for Cloud Services},
  year      = {2011},
  month     = {oct},
  publisher = {{IEEE}},
  comment   = {found through La2013},
  doi       = {10.1109/icebe.2011.27},
  file      = {:Oh2011 - A Reusability Evaluation Suite for Cloud Services.pdf:PDF},
  url       = {https://doi.org/10.1109/icebe.2011.27},
}

@InProceedings{Oliveira2018,
  author    = {Oliveira, Joyce Aline and Vargas, Matheus and Rodrigues, Roni},
  booktitle = {Proceedings of the XIV Brazilian Symposium on Information Systems},
  title     = {SOA Reuse: Systematic Literature Review Updating and Research Directions},
  year      = {2018},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  series    = {SBSI'18},
  abstract  = {Service Oriented Architecture (SOA) reuse has been used strategically in organizations
to reduce development costs and increase the quality of applications. This article
analyzes a systematic literature review in order to identify concepts, goals, strategies,
and metrics of SOA reuse. The results show that the main goal of SOA reuse is to decrease
development costs. The factor that most negatively influences SOA reuse is the existence
of legacy systems. The strategy used most to potentialize SOA reuse is business process
management. Metrics proposed by studies to measure SOA reuse are related to modularity
and adaptability indicators. The study is relevant because it increases the body of
knowledge of the area. Additionally, a set of gaps to be addressed by researchers
and reuse practitioners was identified.},
  articleno = {71},
  doi       = {10.1145/3229345.3229419},
  file      = {:Oliveira2018 - SOA Reuse_ Systematic Literature Review Updating and Research Directions.pdf:PDF},
  isbn      = {9781450365598},
  keywords  = {Service Oriented Architecture, systematic literature review, SOA reuse},
  location  = {Caxias do Sul, Brazil},
  numpages  = {8},
  url       = {https://doi.org/10.1145/3229345.3229419},
}

@InProceedings{Perepletchikov2007,
  author    = {Mikhail Perepletchikov and Caspar Ryan and Keith Frampton},
  booktitle = {Seventh International Conference on Quality Software ({QSIC} 2007)},
  title     = {Cohesion Metrics for Predicting Maintainability of Service-Oriented Software},
  year      = {2007},
  publisher = {{IEEE}},
  comment   = {found through Bogner2017, Bogner2020 and NikDaud2014},
  doi       = {10.1109/qsic.2007.4385516},
  file      = {:Perepletchikov2007 - Cohesion Metrics for Predicting Maintainability of Service Oriented Software.pdf:PDF},
  url       = {https://doi.org/10.1109/qsic.2007.4385516},
}

@InProceedings{Perepletchikov2007a,
  author    = {Mikhail Perepletchikov and Caspar Ryan and Keith Frampton and Zahir Tari},
  booktitle = {2007 Australian Software Engineering Conference ({ASWEC}{\textquotesingle}07)},
  title     = {Coupling Metrics for Predicting Maintainability in Service-Oriented Designs},
  year      = {2007},
  month     = {apr},
  publisher = {{IEEE}},
  comment   = {found through Bogner2017 and NikDaud2014},
  doi       = {10.1109/aswec.2007.17},
  file      = {:Perepletchikov2007a - Coupling Metrics for Predicting Maintainability in Service Oriented Designs.pdf:PDF},
  url       = {https://doi.org/10.1109/aswec.2007.17},
}

@Article{PTQ2009,
  author    = {{Pham Thi Quynh} and Thang, Huynh Quyet},
  journal   = {International Journal of Computer Science and Engineering},
  title     = {Dynamic Coupling Metrics For Service ‚Äì Oriented Software},
  year      = {2009},
  comment   = {found through NikDaud2014},
  copyright = {Creative Commons Attribution 4.0},
  doi       = {10.5281/ZENODO.1058263},
  file      = {:PhamThiQuynh2009 - Dynamic Coupling Metrics for Service ‚Äì Oriented Software.pdf:PDF},
  keywords  = {Dynamic coupling metric, SOA, web service, SOAP Extension.},
  language  = {en},
  publisher = {Zenodo},
  url       = {https://doi.org/10.5281/ZENODO.1058263},
}

@InProceedings{Qian2006,
  author    = {Kai Qian and Jigang Liu and F. Tsui},
  booktitle = {5th {IEEE}/{ACIS} International Conference on Computer and Information Science and 1st {IEEE}/{ACIS} International Workshop on Component-Based Software Engineering,Software Architecture and Reuse ({ICIS}-{COMSAR}{\textquotesingle}06)},
  title     = {Decoupling Metrics for Services Composition},
  year      = {2006},
  publisher = {{IEEE}},
  comment   = {found through NikDaud2014},
  doi       = {10.1109/icis-comsar.2006.30},
  file      = {:Qian2006 - Decoupling Metrics for Services Composition.pdf:PDF},
  url       = {https://doi.org/10.1109/icis-comsar.2006.30},
}

@InProceedings{Raj2018,
  author    = {Raj, Vinay and Ravichandra, S.},
  booktitle = {2018 3rd IEEE International Conference on Recent Trends in Electronics, Information Communication Technology (RTEICT)},
  title     = {Microservices: A perfect SOA based solution for Enterprise Applications compared to Web Services},
  year      = {2018},
  month     = {May},
  pages     = {1531-1536},
  abstract  = {The Software Engineering community has defined different types of architectures to build applications. One among them is Service Oriented Architecture(SOA) which has created significant impact the way software applications are built. There are many implementations of SOA like Web Services, REST services etc. But Web Services and REST services do not fully follow all the principles of SOA. Microservices as an architectural style recently emerged from SOA by which we can develop business requirements with loosely coupled, self deploying and scalable services. Microservices have gained more popularity in application development as they are easy to understand, scale and deploy. In this paper we discuss principles of SOA, major drawbacks of web services and benefits of Microservices over SOA based web services. We have highlighted the importance of Microservices in software development. This paper gives information for architects as to why choose Microservices architecture over web services. We have also discussed metrics used for calculating Coupling between services and we evaluated by considering a smart payment application for ecommerce which is built using both the styles. We observed that Microservices architectural style has less coupling between services compared to Web Service style based on the metric values of the application.},
  doi       = {10.1109/RTEICT42901.2018.9012140},
  file      = {:Raj2018 - Microservices_ a Perfect SOA Based Solution for Enterprise Applications Compared to Web Services.pdf:PDF},
  keywords  = {Service-oriented architecture;Couplings;Measurement;Computer architecture;Business;Service Oriented Architecture(SOA);Web Services;Microservices;Coupling;Metrics},
  url       = {https://doi.org/10.1109/RTEICT42901.2018.9012140},
}

@Article{Raj2021,
  author    = {Vinay Raj and Ravichandra Sadam},
  journal   = {{SN} Computer Science},
  title     = {Evaluation of {SOA}-Based Web Services and Microservices Architecture Using Complexity Metrics},
  year      = {2021},
  month     = {jul},
  number    = {5},
  volume    = {2},
  abstract  = {Distributed systems have evolved rapidly as the demand for independent design and deployment of software applications has increased. Web services and microservices are two styles of designing distributed applications based on the principles of Service-Oriented Architecture (SOA). After the evolution of microservices, software architects are in chaos, whether to adopt microservices over web services. To the best of our knowledge, there has been no empirical work done in the literature for comparing both web services and microservices architecture in terms of the coupling principle of SOA. In this paper, a service graph-based approach is proposed to analyze and evaluate the effectiveness of microservices architecture when compared with web services. Loose coupling is used as a perspective for evaluation, and we have chosen two case study applications to evaluate them in terms of coupling. From the results, it is observed that microservices has lesser coupling values than web services.},
  doi       = {10.1007/s42979-021-00767-6},
  file      = {:Raj2021 - Evaluation of SOA Based Web Services and Microservices Architecture Using Complexity Metrics.pdf:PDF},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007%2Fs42979-021-00767-6},
}

@Article{Rizvi2017,
  author    = {Syed Rizvi and Hannah Roddy and Joseph Gualdoni and Ilva Myzyri},
  journal   = {Procedia computer science},
  title     = {Three-Step Approach to {QoS} Maintenance in Cloud Computing Using a Third-Party Auditor},
  year      = {2017},
  pages     = {83--92},
  volume    = {114},
  doi       = {10.1016/j.procs.2017.09.014},
  file      = {:Rizvi2017 - Three Step Approach to QoS Maintenance in Cloud Computing Using a Third Party Auditor.pdf:PDF},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016/j.procs.2017.09.014},
}

@InProceedings{Rosa2020,
  author    = {Rosa, Thatiane de Oliveira and Goldman, Alfredo and Guerra, Eduardo Martins},
  booktitle = {2020 IEEE International Conference on Software Architecture Companion (ICSA-C)},
  title     = {How ‚Äòmicro‚Äô are your services?},
  year      = {2020},
  month     = {March},
  pages     = {75-78},
  abstract  = {Microservice is an architectural style that proposes that a complex system should be developed from small and independent services that work together. There is not a welldefined boundary about when a software architecture can be considered based on microservices or not. Because of that, defining microservices context and infrastructure is challenging, especially to characterize aspects related to microservice size, data consistency, and microservices coupling. Thus, it is crucial to understand the microservices-based software characteristics, to comprehend the impact of some evolutions on architecture, and evaluate how much a particular architecture fits the microservices architectural style. Therefore, based on bibliographic research and case studies conducted in academical and industrial environments, we aim to propose a model to characterize the architecture structure based on the main guidelines of the microservice architectural style. This model introduces dimensions that measure characteristics based on modules size, coupling to data sources, and service collaboration. This study should facilitate the mapping, measurement, and monitoring of different impacts generated in the software architecture from increments and refactoring performed. This work is on the initial development stage and as a result, we expected that the model supports architectural decisions that consider different quality attributes to achieve the right balance between service independence and collaboration for a given system.},
  doi       = {10.1109/ICSA-C50368.2020.00023},
  file      = {:Rosa2020 - How ‚Äòmicro‚Äô Are Your Services_.pdf:PDF},
  keywords  = {Measurement;Databases;Couplings;Complexity theory;Software;Computer architecture;Software architecture;software architecture;microservices;characterization model},
  url       = {https://doi.org/10.1109/ICSA-C50368.2020.00023},
}

@InProceedings{Rud2006,
  author    = {Rud, Dmytro and Schmietendorf, Andreas and Dumke, Reiner R.},
  booktitle = {IWSM/MetriKon},
  title     = {{Product Metrics for Service-Oriented Infrastructures}},
  year      = {2006},
  comment   = {found through Bogner2017 and NikDaud2014},
  file      = {:Rud2006 - Product Metrics for Service Oriented Infrastructures.pdf:PDF},
}

@InProceedings{Shim2008,
  author    = {Bingu Shim and Siho Choue and Suntae Kim and Sooyong Park},
  booktitle = {2008 15th Asia-Pacific Software Engineering Conference},
  title     = {A Design Quality Model for Service-Oriented Architecture},
  year      = {2008},
  publisher = {{IEEE}},
  comment   = {found through Bogner2017},
  doi       = {10.1109/apsec.2008.32},
  file      = {:Shim2008 - A Design Quality Model for Service Oriented Architecture.pdf:PDF},
  url       = {https://doi.org/10.1109/apsec.2008.32},
}

@Article{Singh2015,
  author    = {Sukhpal Singh and Inderveer Chana},
  journal   = {Computers & Electrical Engineering},
  title     = {Q-aware: Quality of service based cloud resource provisioning},
  year      = {2015},
  month     = {oct},
  pages     = {138--160},
  volume    = {47},
  doi       = {10.1016/j.compeleceng.2015.02.003},
  file      = {:Singh2015 - Q Aware_ Quality of Service Based Cloud Resource Provisioning.pdf:PDF},
  publisher = {Elsevier {BV}},
  url       = {https://doi.org/10.1016/j.compeleceng.2015.02.003},
}

@Article{Slimani2020,
  author    = {Sarra Slimani and Tarek Hamrouni and Faouzi Ben Charrada},
  journal   = {Cluster Computing},
  title     = {Service-oriented replication strategies for improving quality-of-service in cloud computing: a survey},
  year      = {2020},
  month     = {may},
  number    = {1},
  pages     = {361--392},
  volume    = {24},
  abstract  = {The recent years have witnessed significant interest in migrating different applications into the cloud platforms. In this context, one of the main challenges for cloud applications providers is how to ensure high availability of the delivered applications while meeting users‚Äô QoS. In this respect, replication techniques are commonly applied to efficiently handle this issue. From the literature, according to the used granularity for replication there are two major approaches to achieve replication: either through replicating the service or the underlying data. The latter one is also known as Data-oriented Replication (DoR), while the former one is referred to as Service-oriented Replication (SoR). DoR is discussed extensively in the available literature and several surveys are already published. However, SoR is still at its infancy and there is a lack of research studies. Hence, in this paper we present a comprehensive survey of SoR strategies in cloud computing. We propose a classification of existing works based on the research methods they use. Then, we carried out an in-depth study and analysis of these works. In addition, a tabular representation of all relevant features is presented to facilitate the comparison of SoR techniques and the proposal of new enhanced strategies.},
  doi       = {10.1007/s10586-020-03108-z},
  file      = {:Slimani2020 - Service Oriented Replication Strategies for Improving Quality of Service in Cloud Computing_ a Survey.pdf:PDF},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007/s10586-020-03108-z},
}

@InProceedings{Taherizadeh2017,
  author    = {Salman Taherizadeh and Vlado Stankovski},
  booktitle = {41st Annual Computer Software and Applications Conference (COMPSAC)},
  title     = {Incremental Learning from Multi-level Monitoring Data and Its Application to Component Based Software Engineering},
  year      = {2017},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/compsac.2017.148},
  file      = {:Taherizadeh2017 - Incremental Learning from Multi Level Monitoring Data and Its Application to Component Based Software Engineering.pdf:PDF},
  url       = {https://doi.org/10.1109/compsac.2017.148},
}

@InProceedings{Talwar2005,
  author    = {V. Talwar and Qinyi Wu and C. Pu and Wenchang Yan and Gueyoung Jung and D. Milojicic},
  booktitle = {25th {IEEE} International Conference on Distributed Computing Systems ({ICDCS}{\textquotesingle}05)},
  title     = {Comparison of Approaches to Service Deployment},
  year      = {2005},
  publisher = {{IEEE}},
  comment   = {found through Lehmann2017},
  doi       = {10.1109/icdcs.2005.18},
  file      = {:Talwar2005 - Comparison of Approaches to Service Deployment.pdf:PDF},
  url       = {https://doi.org/10.1109/icdcs.2005.18},
}

@Article{Tiwari2014,
  author     = {Tiwari, Umesh and Kumar, Santosh},
  journal    = {SIGSOFT Softw. Eng. Notes},
  title      = {In-out Interaction Complexity Metrics for Component-Based Software},
  year       = {2014},
  issn       = {0163-5948},
  month      = sep,
  number     = {5},
  pages      = {1‚Äì4},
  volume     = {39},
  abstract   = {In the current state of software engineering, component-based software development
is one of the most alluring paradigms for developing large and complex software products.
In this software engineering methodology pre-engineered, pre-tested, context-based,
adaptable, deployable software components are assembled according to a predefined
architecture. Rather than developing a system from scratch, component-based software
development emphasizes the integration of these components according to the user's
requirements and specifications. In component-based software, the components interact
to access and provide services and functionality to each other. Currently, the emphasis
of industry and researchers is on developing impressive and efficient metrics and
measurement tools to analyze the interaction complexity among these components. To
represent the request and the response of services among components, we have used
outgoing edges and incoming edges respectively. In this paper we have defined these
interactions as In-Interactions and Out-Interactions. The metrics proposed in this
paper are solely based on the interactions among the components. In this work some
simple methods and metrics for computing the complexity of composable components are
suggested. The metrics discussed in this paper include the computation of interaction
complexities as Total-Interactions of a component, Total- Interactions of component-based
software, Interaction-Ratio of a component, Interaction-Ratio of component-based software,
Average- Interaction among components and Interaction-Percentage of components.},
  address    = {New York, NY, USA},
  doi        = {10.1145/2659118.2659135},
  file       = {:Tiwari2014 - In Out Interaction Complexity Metrics for Component Based Software.pdf:PDF},
  issue_date = {September 2014},
  keywords   = {component-based software development, adaptable, in-interactions, out-interactions, context-based, metrics, pre-engineered},
  numpages   = {4},
  publisher  = {Association for Computing Machinery},
  url        = {https://doi.org/10.1145/2659118.2659135},
}

@InProceedings{Vedam2012,
  author    = {Venu Vedam and Jayanti Vemulapati},
  booktitle = {36th Annual Computer Software and Applications Conference},
  title     = {Demystifying Cloud Benchmarking Paradigm - An in Depth View},
  year      = {2012},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/compsac.2012.61},
  file      = {:Vedam2012 - Demystifying Cloud Benchmarking Paradigm an in Depth View.pdf:PDF},
  url       = {https://doi.org/10.1109/compsac.2012.61},
}

@InProceedings{Wang2009,
  author    = {Xiao-jun Wang},
  booktitle = {2009 International Conference on Information Engineering and Computer Science},
  title     = {Metrics for Evaluating Coupling and Service Granularity in Service Oriented Architecture},
  year      = {2009},
  month     = {dec},
  publisher = {{IEEE}},
  comment   = {found through NikDaud2014},
  doi       = {10.1109/iciecs.2009.5362767},
  file      = {:Wang2009 - Metrics for Evaluating Coupling and Service Granularity in Service Oriented Architecture.pdf:PDF},
  url       = {https://doi.org/10.1109/iciecs.2009.5362767},
}

@InProceedings{Xiong2015,
  author    = {Kaiqi Xiong and Xiao Chen},
  booktitle = {35th International Conference on Distributed Computing Systems Workshops},
  title     = {Ensuring Cloud Service Guarantees via Service Level Agreement ({SLA})-Based Resource Allocation},
  year      = {2015},
  month     = {jun},
  publisher = {{IEEE}},
  comment   = {found through Guerron2020},
  doi       = {10.1109/icdcsw.2015.18},
  file      = {:Xiong2015 - Ensuring Cloud Service Guarantees Via Service Level Agreement (SLA) Based Resource Allocation.pdf:PDF},
  url       = {https://doi.org/10.1109/icdcsw.2015.18},
}

@InCollection{Zdun2017,
  author    = {Uwe Zdun and Elena Navarro and Frank Leymann},
  booktitle = {Service-Oriented Computing},
  publisher = {Springer International Publishing},
  title     = {Ensuring and Assessing Architecture Conformance to Microservice Decomposition Patterns},
  year      = {2017},
  pages     = {411--429},
  abstract  = {Microservice-based software architecture design has been widely discussed, and best practices have been published as architecture design patterns. However, conformance to those patterns is hard to ensure and assess automatically, leading to problems such as architectural drift and erosion, especially in the context of continued software evolution or large-scale microservice systems. In addition, not much in the component and connector architecture models is specific (only) to the microservices approach, whereas other aspects really specific to that approach, such as independent deployment of microservices, are usually modeled in other views or not at all. We suggest a set of constraints to check and metrics to assess architecture conformance to microservice patterns. In comparison to expert judgment derived from the patterns, a subset of these constraints and metrics shows a good relative performance and potential for automation.},
  doi       = {10.1007/978-3-319-69035-3_29},
  file      = {:Zdun2017 - Ensuring and Assessing Architecture Conformance to Microservice Decomposition Patterns.pdf:PDF},
  url       = {https://doi.org/10.1007%2F978-3-319-69035-3_29},
}

@InProceedings{Zhang2009,
  author    = {Qingqing Zhang and Li Xinke},
  booktitle = {2009 Second International Symposium on Knowledge Acquisition and Modeling},
  title     = {Complexity Metrics for Service-Oriented Systems},
  year      = {2009},
  month     = {nov},
  publisher = {{IEEE}},
  comment   = {found through Bogner2017 and NikDaud2014},
  doi       = {10.1109/kam.2009.90},
  file      = {:Zhang2009 - Complexity Metrics for Service Oriented Systems.pdf:PDF},
  url       = {https://doi.org/10.1109/kam.2009.90},
}

@InProceedings{Zimmermann2015,
  author    = {Zimmermann, Olaf},
  booktitle = {Proceedings of the Second International Workshop on Software Architecture and Metrics},
  title     = {Metrics for Architectural Synthesis and Evaluation: Requirements and Compilation by Viewpoint: An Industrial Experience Report},
  year      = {2015},
  address   = {Florence, Italy},
  pages     = {8‚Äì14},
  publisher = {IEEE Press},
  series    = {SAM '15},
  abstract  = {During architectural analysis and synthesis, architectural metrics are established
tacitly or explicitly. In architectural evaluation, these metrics are then consulted
to assess whether architectures are fit for purpose and in line with recommended practices
and published architectural knowledge. This experience report presents a personal
retrospective of the author's use of architectural metrics during 20 years in IT architect
roles in professional services as well as research and development. This reflection
drives the identification of use cases, critical success factors and elements of risk
for architectural metrics management. An initial catalog of architectural metrics
is compiled next, which is organized by viewpoints and domains. The report concludes
with a discussion of practical impact of architectural metrics and potential research
topics in this area.},
  file      = {:Zimmermann2015 - Metrics for Architectural Synthesis and Evaluation_ Requirements and Compilation by Viewpoint_ an Industrial Experience Report.pdf:PDF},
  keywords  = {patterns, viewpoints, architectural metrics, architectural metrics management, enterprise information systems, architectural reviews, integration},
  numpages  = {7},
}

@InProceedings{Camilli2022,
  author    = {Camilli, Matteo and Guerriero, Antonio and Janes, Andrea and Russo, Barbara and Russo, Stefano},
  booktitle = {Proceedings of the 3rd ACM/IEEE International Conference on Automation of Software Test},
  title     = {Microservices Integrated Performance and Reliability Testing},
  year      = {2022},
  address   = {New York, NY, USA},
  pages     = {29‚Äì39},
  publisher = {Association for Computing Machinery},
  series    = {AST '22},
  abstract  = {Continuous quality assurance for extra-functional properties of modern software systems is today a big challenge as their complexity is constantly increasing to satisfy market demands. This is the case of microservice systems. They provide high control on the scale of operation by means of fine-grained service decomposition, but this demands careful consideration of the relations between performance of individual microservices and service failures.In this work, we propose MIPaRT, a novel methodology, and platform to automatically test microservice operations for performance and reliability in combination. The proposed platform can be integrated into a DevOps cycle to support continuous testing and monitoring by the automatic (1) generation and execution of performance-reliability ex-vivo testing sessions, (2) collection of monitoring data, (3) computation of performance and reliability metrics, and (4) integrated visualization of the results.We apply our approach by operating the platform on an open source benchmark. Results show that our integrated approach can provide additional insights into the performance and reliability behaviour of microservices as well as their mutual relationships.},
  doi       = {10.1145/3524481.3527233},
  file      = {:Camilli2022 - Microservices Integrated Performance and Reliability Testing.pdf:PDF},
  isbn      = {9781450392860},
  keywords  = {performance testing, reliability testing, microservices systems},
  location  = {Pittsburgh, Pennsylvania},
  numpages  = {11},
  url       = {https://doi.org/10.1145/3524481.3527233},
}

@InProceedings{Filippone2023,
  author    = {Gianluca Filippone and Nadeem Qaisar Mehmood and Marco Autili and Fabrizio Rossi and Massimo Tivoli},
  booktitle = {2023 {IEEE} 20th International Conference on Software Architecture ({ICSA})},
  title     = {From monolithic to microservice architecture: an automated approach based on graph clustering and combinatorial optimization},
  year      = {2023},
  month     = {mar},
  publisher = {{IEEE}},
  comment   = {cites Brito2021},
  doi       = {10.1109/icsa56044.2023.00013},
  file      = {:Filippone2023 - From Monolithic to Microservice Architecture_ an Automated Approach Based on Graph Clustering and Combinatorial Optimization.pdf:PDF},
  url       = {https://doi.org/10.1109/icsa56044.2023.00013},
}

@InCollection{Genfer2021,
  author    = {Patric Genfer and Uwe Zdun},
  booktitle = {Software Architecture},
  publisher = {Springer International Publishing},
  title     = {Identifying Domain-Based Cyclic Dependencies in Microservice {APIs} Using Source Code Detectors},
  year      = {2021},
  pages     = {207--222},
  comment   = {cites Engel2018},
  doi       = {10.1007/978-3-030-86044-8_15},
  file      = {:Genfer2021 - Identifying Domain Based Cyclic Dependencies in Microservice APIs Using Source Code Detectors.pdf:PDF},
  url       = {https://doi.org/10.1007/978-3-030-86044-8_15},
}

@Article{Henning2022,
  author    = {S√∂ren Henning and Wilhelm Hasselbring},
  journal   = {Empirical Software Engineering},
  title     = {A configurable method for benchmarking scalability of cloud-native applications},
  year      = {2022},
  month     = {aug},
  number    = {6},
  volume    = {27},
  doi       = {10.1007/s10664-022-10162-1},
  file      = {:Henning2022 - A Configurable Method for Benchmarking Scalability of Cloud Native Applications.pdf:PDF},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007/s10664-022-10162-1},
}

@InProceedings{Moreira2022,
  author    = {Moreira, Mateus Gabi and De Fran\c{c}a, Breno Bernard Nicolau},
  booktitle = {Proceedings of the 16th Brazilian Symposium on Software Components, Architectures, and Reuse},
  title     = {Analysis of Microservice Evolution Using Cohesion Metrics},
  year      = {2022},
  address   = {New York, NY, USA},
  pages     = {40‚Äì49},
  publisher = {Association for Computing Machinery},
  series    = {SBCARS '22},
  abstract  = {The adoption of Microservices Architecture (MSA) has increased in recent years due to several claimed benefits, such as reducing deployment complexity, supporting technology diversity, and better scalability. However, MSA is not free from maintainability issues, especially the lack of cohesion, in which microservices possibly concentrate or miss responsibilities. Also, the lack of empirically-validated cohesion metrics for MSA makes the quantitative assessment even more challenging. In this paper, we empirically explore the practical applicability of service-level cohesion metrics in an open-source MSA application context. The qualitative results show the possibility of assessing MSA cohesion using these service-level metrics, the feasibility of tracking software evolution, and an indication of possible technical debts along the way.},
  doi       = {10.1145/3559712.3559716},
  file      = {:Moreira2022 - Analysis of Microservice Evolution Using Cohesion Metrics.pdf:PDF},
  isbn      = {9781450397452},
  keywords  = {Cohesion Metrics, Software evolution, Microservices, Software architecture},
  location  = {Uberlandia, Brazil},
  numpages  = {10},
  url       = {https://doi.org/10.1145/3559712.3559716},
}

@InProceedings{Ntentos2022,
  author    = {Evangelos Ntentos and Uwe Zdun and Ghareeb Falazi and Uwe Breitenbucher and Frank Leymann},
  booktitle = {2022 {IEEE} International Conference on Services Computing ({SCC})},
  title     = {Assessing Architecture Conformance to Security-Related Practices in Infrastructure as Code Based Deployments},
  year      = {2022},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {cites Zdun2017},
  doi       = {10.1109/scc55611.2022.00029},
  file      = {:Ntentos2022 - Assessing Architecture Conformance to Security Related Practices in Infrastructure As Code Based Deployments.pdf:PDF},
  url       = {https://doi.org/10.1109/scc55611.2022.00029},
}

@InProceedings{Peng2022,
  author    = {Peng, Xin and Zhang, Chenxi and Zhao, Zhongyuan and Isami, Akasaka and Guo, Xiaofeng and Cui, Yunna},
  booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  title     = {Trace Analysis Based Microservice Architecture Measurement},
  year      = {2022},
  address   = {New York, NY, USA},
  pages     = {1589‚Äì1599},
  publisher = {Association for Computing Machinery},
  series    = {ESEC/FSE 2022},
  abstract  = {Microservice architecture design highly relies on expert experience and may often result in improper service decomposition. Moreover, a microservice architecture is likely to degrade with the continuous evolution of services. Architecture measurement is thus important for the long-term evolution of microservice architectures. Due to the independent and dynamic nature of services, source code analysis based approaches cannot well capture the interactions between services. In this paper, we propose a trace analysis based microservice architecture measurement approach. We define a trace data model for microservice architecture measurement, which enables fine-grained analysis of the execution processes of requests and the interactions between interfaces and services. Based on the data model, we define 14 architectural metrics to measure the service independence and invocation chain complexity of a microservice system. We implement the approach and conduct three case studies with a student course project, an open-source microservice benchmark system, and three industrial microservice systems. The results show that our approach can well characterize the independence and invocation chain complexity of microservice architectures and help developers to identify microservice architecture issues caused by improper service decomposition and architecture degradation.},
  doi       = {10.1145/3540250.3558951},
  file      = {:Peng2022 - Trace Analysis Based Microservice Architecture Measurement.pdf:PDF},
  isbn      = {9781450394130},
  keywords  = {Dynamic analysis, Architecture, Tracing, Microservice},
  location  = {Singapore, Singapore},
  numpages  = {11},
  url       = {https://doi.org/10.1145/3540250.3558951},
}

@InProceedings{Silva2023,
  author    = {Samira Silva and Adiel Tuyishime and Tiziano Santilli and Patrizio Pelliccione and Ludovico Iovino},
  booktitle = {2023 {IEEE} 20th International Conference on Software Architecture ({ICSA})},
  title     = {Quality Metrics in Software Architecture},
  year      = {2023},
  month     = {mar},
  publisher = {{IEEE}},
  comment   = {cites Perepletchikov2007},
  doi       = {10.1109/icsa56044.2023.00014},
  file      = {:Silva2023 - Quality Metrics in Software Architecture.pdf:PDF},
  url       = {https://doi.org/10.1109/icsa56044.2023.00014},
}

@InProceedings{Straesser2023,
  author    = {Straesser, Martin and Mathiasch, Jonas and Bauer, Andr\'{e} and Kounev, Samuel},
  booktitle = {Proceedings of the 2023 ACM/SPEC International Conference on Performance Engineering},
  title     = {A Systematic Approach for Benchmarking of Container Orchestration Frameworks},
  year      = {2023},
  address   = {New York, NY, USA},
  pages     = {187‚Äì198},
  publisher = {Association for Computing Machinery},
  series    = {ICPE '23},
  abstract  = {Container orchestration frameworks play a critical role in modern cloud computing paradigms such as cloud-native or serverless computing. They significantly impact the quality and cost of service deployment as they manage many performance-critical tasks such as container provisioning, scheduling, scaling, and networking. Consequently, a comprehensive performance assessment of container orchestration frameworks is essential. However, until now, there is no benchmarking approach that covers the many different tasks implemented in such platforms and supports evaluating different technology stacks. In this paper, we present a systematic approach that enables benchmarking of container orchestrators. Based on a definition of container orchestration, we define the core requirements and benchmarking scope for such platforms. Each requirement is then linked to metrics and measurement methods, and a benchmark architecture is proposed. With COFFEE, we introduce a benchmarking tool supporting the definition of complex test campaigns for container orchestration frameworks. We demonstrate the potential of our approach with case studies of the frameworks Kubernetes and Nomad in a self-hosted environment and on the Google Cloud Platform. The presented case studies focus on container startup times, crash recovery, rolling updates, and more.},
  doi       = {10.1145/3578244.3583726},
  file      = {:Straesser2023a - A Systematic Approach for Benchmarking of Container Orchestration Frameworks.pdf:PDF},
  isbn      = {9798400700682},
  keywords  = {nomad, kubernetes, benchmarking, performance, container orchestration},
  location  = {Coimbra, Portugal},
  numpages  = {12},
  url       = {https://doi.org/10.1145/3578244.3583726},
}

@InCollection{Yussupov2022,
  author    = {Vladimir Yussupov and Uwe Breitenb√ºcher and Antonio Brogi and Lukas Harzenetter and Frank Leymann and Jacopo Soldani},
  booktitle = {Service-Oriented Computing},
  publisher = {Springer International Publishing},
  title     = {Serverless or~Serverful? A~Pattern-Based Approach for~Exploring Hosting Alternatives},
  year      = {2022},
  pages     = {45--67},
  doi       = {10.1007/978-3-031-18304-1_3},
  file      = {:Yussupov2022 - Serverless Or~Serverful_ A~Pattern Based Approach For~Exploring Hosting Alternatives.pdf:PDF},
  url       = {https://doi.org/10.1007/978-3-031-18304-1_3},
}

@Article{Zdun2023,
  author    = {Uwe Zdun and Pierre-Jean Queval and Georg Simhandl and Riccardo Scandariato and Somik Chakravarty and Marjan Jelic and Aleksandar Jovanovic},
  journal   = {{ACM} Transactions on Software Engineering and Methodology},
  title     = {Microservice Security Metrics for Secure Communication, Identity Management, and Observability},
  year      = {2023},
  month     = {jan},
  number    = {1},
  pages     = {1--34},
  volume    = {32},
  comment   = {cites Engel2018, Zdun2017},
  doi       = {10.1145/3532183},
  file      = {:Zdun2023 - Microservice Security Metrics for Secure Communication, Identity Management, and Observability.pdf:PDF},
  publisher = {Association for Computing Machinery ({ACM})},
  url       = {https://doi.org/10.1145/3532183},
}

@Article{Venkitachalam2017,
  author    = {Venkitachalam, Hariharan and Powale, Kalkin Anand and Granrath, Christian and Richenhagen, Johannes},
  title     = {Automated Continuous Evaluation of AUTOSAR Software Architecture for Complex Powertrain Systems},
  year      = {2017},
  doi       = {10.18420/IN2017_156},
  file      = {:Venkitachalam2017 - Automated Continuous Evaluation of AUTOSAR Software Architecture for Complex Powertrain Systems.pdf:PDF},
  keywords  = {Software Architecture, Software Quality, AUTOSAR, Continuous Integration, Agile Methods, Frontloading},
  language  = {en},
  publisher = {Gesellschaft f√ºr Informatik, Bonn},
}

@Article{AlDebagy2020,
  author   = {Al-Debagy, O. and Martinek, P.},
  journal  = {Journal of Web Engineering},
  title    = {A Metrics Framework for Evaluating Microservices Architecture Designs},
  year     = {2020},
  issn     = {1544-5976},
  month    = {June},
  number   = {3‚Äì4},
  pages    = {341-370},
  volume   = {19},
  abstract = {Microservices are becoming a more popular software architecture among companies and developers. Therefore, there is a need to develop methods for quantifying the process of measuring the quality of microservices design. This paper has created a novel set of metrics for microservices architecture applications. The proposed metrics are the Service Granularity Metric ‚ÄúSGM‚Äù, the Lack of Cohesion Metric ‚ÄúLCOM‚Äù, and the Number of Operations ‚ÄúNOO‚Äù. The proposed metrics measure the granularity, cohesion, and complexity of individual microservices through analyzing the application programming interface ‚ÄúAPI‚Äù. Using these metrics, it is possible to evaluate the overall quality of the design of microservices applications. The proposed metrics were measured on 5 applications with different sizes and business cases. This research found that the value for the SGM metric needs to be between 0.2 and 0.6. Besides, the value of LCOM metric for a microservice needs to be between 0 and 0.8 with less than ten operations per microservice. These findings can be applied in the decomposition process of monolithic applications as well.},
  doi      = {10.13052/jwe1540-9589.19341},
  file     = {:AlDebagy2020 - A Metrics Framework for Evaluating Microservices Architecture Designs.pdf:PDF},
}

@InProceedings{Perera2018,
  author    = {Perera, K. J. P. G. and Perera, I.},
  booktitle = {2018 IEEE/ACIS 17th International Conference on Computer and Information Science (ICIS)},
  title     = {TheArchitect: A Serverless-Microservices Based High-level Architecture Generation Tool},
  year      = {2018},
  month     = {June},
  pages     = {204-210},
  abstract  = {Software is ubiquitous in today's systems and business operations. Most importantly the architecture of a software system determines its quality and longevity, because the development work related to the software system will be carried out to be in line with its architecture design. Hence, it's highly important to structure the high-level software architecture accordingly to deliver the expected customer requirements while accounting for quality measures such as scalability, high availability and high performance. We propose TheArchitect, a serverless-microservices based high-level architecture generation tool, which will auto generate serverless-microservices based high-level architecture for a given business application, preserving the highlighted quality measures providing a tool based support for the software architect with respect to designing the high-level architecture. TheArchitect will provide any software developer to generate a proper architecture minimizing the involvement of an experienced software architect. Furthermore, the positives that microservices and serverless technologies has brought to the world of software engineering has made the software engineering community shift from the era of building large monolith applications containing overly complex designs, to microservices and serverless based technologies. Hence TheArchitect focuses on generating best fitted microservices and serverless based high-level architecture for a given application.},
  doi       = {10.1109/ICIS.2018.8466390},
  file      = {:Perera2018 - TheArchitect_ a Serverless Microservices Based High Level Architecture Generation Tool.pdf:PDF},
}

@InProceedings{Perera2018a,
  author    = {Perera, K. J. P. G. and Perera, I.},
  booktitle = {2018 IEEE International Systems Engineering Symposium (ISSE)},
  title     = {A Rule-based System for Automated Generation of Serverless-Microservices Architecture},
  year      = {2018},
  month     = {Oct},
  pages     = {1-8},
  abstract  = {Software being ubiquitous in today's systems and business operations, it's highly important to structure the high-level architecture of a software application accordingly to deliver the expected customer requirements while accounting for quality measures such as scalability, high availability and high performance. We propose The Architect, a rule-based system for serverless-microservices based high-level architecture generation. In the process of auto generating serverless-microservices high-level architecture, TheArchitect will preserve the highlighted quality measures. It will also provide a tool based support for the high-level architecture designing process of the software architect. Any software developer will be able to use TheArchitect to generate a proper architecture minimizing the involvement of a software architect. Furthermore, the positives of microservices and serverless technologies have made a significant impact on the software engineering community in terms of shifting from the era of building large monolith applications containing overly complex designs, to microservices and serverless based technologies. Hence The Architect focuses on generating best fitted microservices and serverless based high-level architecture for a given application.},
  doi       = {10.1109/SysEng.2018.8544423},
  file      = {:Perera2018a - A Rule Based System for Automated Generation of Serverless Microservices Architecture.pdf:PDF},
}

@InProceedings{Asik2017,
  author    = {Asik, Tugrul and Selcuk, Yunus Emre},
  booktitle = {2017 IEEE 15th International Conference on Software Engineering Research, Management and Applications (SERA)},
  title     = {Policy enforcement upon software based on microservice architecture},
  year      = {2017},
  month     = {June},
  pages     = {283-287},
  abstract  = {Microservice is an architectural style that has recently started gaining popularity to become a new architectural phenomenon. Microservice architecture provides new opportunities to deploy scalable, language free and dynamically adjustable applications. This type of applications consist of hundreds or more of service instances. So that, management, monitoring, refactoring and testing of applications are more complex than monolithic applications. Therefore, some metrics and policies for measuring the quality of an application which is based on microservice architecture is needed. Moreover, automated tools are needed to carry out those tasks and enforce those policies. This work represents such metrics and policies. Additionally, an automated tool is implemented for automatic analysis of those metrics and policies upon software.},
  doi       = {10.1109/SERA.2017.7965739},
  file      = {:Asik2017 - Policy Enforcement upon Software Based on Microservice Architecture.pdf:PDF},
}

@InProceedings{Gamage2021,
  author    = {Gamage, Isuru Udara Piyadigama and Perera, Indika},
  booktitle = {2021 Moratuwa Engineering Research Conference (MERCon)},
  title     = {Using dependency graph and graph theory concepts to identify anti-patterns in a microservices system: A tool-based approach},
  year      = {2021},
  month     = {July},
  pages     = {699-704},
  abstract  = {Microservice architecture (MSA) based application developments are becoming the common trend in implementing large-scale applications. Unlike the traditional monolith applications, MSA applications are composed of many services hence there is an immense possibility of anti-patterns introduced into the system. To identify these design problems, a detailed analysis of the architecture needs to be performed. We see great potential for adopting graph concepts and algorithms in this regard. However, the few tools proposed by existing work to find anti-patterns that adopt graph concepts are not up to providing developers with adequate statistical information such as metrics along with visualization techniques or they are not fully automated. In this research, we present a tool-based solution for this problem which is capable of utilizing traced data of an MSA system to generate dependency graphs and thereby extract metrics using graph theory concepts and algorithms. We analyze a sample MSA system for anti-patterns with the tool. To verify the usability of the tool further, a group of developers also analyze an open-source system with the tool.},
  doi       = {10.1109/MERCon52712.2021.9525743},
  file      = {:Gamage2021 - Using Dependency Graph and Graph Theory Concepts to Identify Anti Patterns in a Microservices System_ a Tool Based Approach.pdf:PDF},
  issn      = {2691-364X},
}

@Article{Abgaz2023,
  author   = {Abgaz, Yalemisew and McCarren, Andrew and Elger, Peter and Solan, David and Lapuz, Neil and Bivol, Marin and Jackson, Glenn and Yilmaz, Murat and Buckley, Jim and Clarke, Paul},
  journal  = {IEEE Transactions on Software Engineering},
  title    = {Decomposition of Monolith Applications Into Microservices Architectures: A Systematic Review},
  year     = {2023},
  issn     = {1939-3520},
  month    = {Aug},
  number   = {8},
  pages    = {4213-4242},
  volume   = {49},
  abstract = {Microservices architecture has gained significant traction, in part owing to its potential to deliver scalable, robust, agile, and failure-resilient software products. Consequently, many companies that use large and complex software systems are actively looking for automated solutions to decompose their monolith applications into microservices. This paper rigorously examines 35 research papers selected from well-known databases using a Systematic Literature Review (SLR) protocol and snowballing method, extracting data to answer the research questions, and presents the following four contributions. First, the Monolith to Microservices Decomposition Framework (M2MDF) which identifies the major phases and key elements of decomposition. Second, a detailed analysis of existing decomposition approaches, tools and methods. Third, we identify the metrics and datasets used to evaluate and validate monolith to microservice decomposition processes. Fourth, we propose areas for future research. Overall, the findings suggest that monolith decomposition into microservices remains at an early stage and there is an absence of methods for combining static, dynamic, and evolutionary data. Insufficient tool support is also in evidence. Furthermore, standardised metrics, datasets, and baselines have yet to be established. These findings can assist practitioners seeking to understand the various dimensions of monolith decomposition and the community's current capabilities in that endeavour. The findings are also of value to researchers looking to identify areas to further extend research in the monolith decomposition space.},
  doi      = {10.1109/TSE.2023.3287297},
  file     = {:Abgaz2023 - Decomposition of Monolith Applications into Microservices Architectures_ a Systematic Review.pdf:PDF},
}

@Article{Zdun2023a,
  author   = {Zdun, Uwe and Queval, Pierre-Jean and Simhandl, Georg and Scandariato, Riccardo and Chakravarty, Somik and Jeliƒá, Marjan and Jovanoviƒá, Aleksandar},
  journal  = {IEEE Transactions on Dependable and Secure Computing},
  title    = {Detection Strategies for Microservice Security Tactics},
  year     = {2023},
  issn     = {1941-0018},
  pages    = {1-17},
  abstract = {Microservice architectures are widely used today to implement distributed systems. Securing microservice architectures is challenging because of their polyglot nature, continuous evolution, and various security concerns relevant to such architectures. This article proposes a novel, model-based approach providing detection strategies to address the automated detection of security tactics (or patterns and best practices) in a given microservice architecture decomposition model. Our novel detection strategies are metrics-based rules that decide conformance to a security recommendation based on a statistical predictor. The proposed approach models this recommendation using Architectural Design Decisions (ADDs). We apply our approach for four different security-related ADDs on access management, traffic control, and avoiding plaintext sensitive data in the context of microservice systems. We then apply our approach to a model data set of 10 open-source microservice systems and 20 variants of those systems. Our results are detection strategies showing a very low bias, a very high correlation, and a low prediction error in our model data set.},
  doi      = {10.1109/TDSC.2023.3276487},
  file     = {:Zdun2023a - Detection Strategies for Microservice Security Tactics.pdf:PDF},
}

@InProceedings{Daniel2023,
  author    = {Daniel, Jo√£o and Guerra, Eduardo and Rosa, Thatiane and Goldman, Alfredo},
  booktitle = {2023 49th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title     = {Towards the Detection of Microservice Patterns Based on Metrics},
  year      = {2023},
  month     = {Sep.},
  pages     = {132-139},
  abstract  = {Microservices is a popular architectural approach for complex systems in companies, despite its nature of decentralization. There is a comprehensive set of microservices architectural patterns that guides implementations and helps developers to overcome issues. However, the community still scarcely adopts these patterns and only has a theoretical understanding of them. In this work, in order to increase awareness of such patterns and provide aid to developers to better understand an architecture based on microservices, we propose a detection approach based on metrics for microservices patterns. We focused on structural or architectural patterns, and implemented detection for five of them. We conducted two case studies with real-world applications and evaluated the accuracy and applicability of our approach with the developers of those applications.},
  doi       = {10.1109/SEAA60479.2023.00029},
  file      = {:Daniel2023 - Towards the Detection of Microservice Patterns Based on Metrics.pdf:PDF},
  issn      = {2376-9521},
}

 
@InBook{Ntentos2021,
  author    = {Ntentos, Evangelos and Zdun, Uwe and Plakidas, Konstantinos and Geiger, Sebastian},
  pages     = {188‚Äì203},
  publisher = {Springer International Publishing},
  title     = {Evaluating and Improving Microservice Architecture Conformance to Architectural Design Decisions},
  year      = {2021},
  isbn      = {9783030914318},
  abstract  = {Microservices are a commonly used architectural style targeting independent development, deployment, and release of services, as well as supporting polyglot capabilities and rapid release strategies. This depends on the presence of certain software architecture qualities. A number of architecture patterns and best practices that support the required qualities have been proposed in the literature, but usually in isolation of one another. Additionally, in real-world systems, assessing conformance to these patterns and practices and detecting possible violations is a significant challenge. For small-scale systems of a few services, a manual assessment and violation detection by an expert is probably both accurate and sufficient. However, for industrial-scale systems of several hundred or more services, manual assessment and violation detection is laborious and likely leads to inaccurate results. Furthermore, manual assessment is impractical for rapidly evolving and frequently released system architectures. In this work we examine a subset of microservice-relevant patterns, and propose a method for the semi-automatic detection and resolution of conformance violations. Our aim is to assist the software architect by providing a set of possible fix options and generating models of ‚Äúfixed‚Äù architectures.},
  booktitle = {Lecture Notes in Computer Science},
  doi       = {10.1007/978-3-030-91431-8_12},
  file      = {:Ntentos2021 - Evaluating and Improving Microservice Architecture Conformance to Architectural Design Decisions.pdf:PDF},
  issn      = {1611-3349},
  url       = {http://dx.doi.org/10.1007/978-3-030-91431-8_12},
}

@InProceedings{Assuncao2021,
  author    = {Assuncao, Wesley K. G. and Colanzi, Thelma Elita and Carvalho, Luiz and Pereira, Juliana Alves and Garcia, Alessandro and de Lima, Maria Julia and Lucena, Carlos},
  booktitle = {2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  title     = {A Multi-Criteria Strategy for Redesigning Legacy Features as Microservices: An Industrial Case Study},
  year      = {2021},
  month     = mar,
  publisher = {IEEE},
  doi       = {10.1109/saner50967.2021.00042},
  file      = {:Assuncao2021 - A Multi Criteria Strategy for Redesigning Legacy Features As Microservices_ an Industrial Case Study.pdf:PDF},
}

@Article{Desai2021,
  author    = {Desai, Utkarsh and Bandyopadhyay, Sambaran and Tamilselvam, Srikanth},
  journal   = {Proceedings of the AAAI Conference on Artificial Intelligence},
  title     = {Graph Neural Network to Dilute Outliers for Refactoring Monolith Application},
  year      = {2021},
  issn      = {2159-5399},
  month     = may,
  number    = {1},
  pages     = {72--80},
  volume    = {35},
  doi       = {10.1609/aaai.v35i1.16079},
  file      = {:Desai2021 - Graph Neural Network to Dilute Outliers for Refactoring Monolith Application.pdf:PDF},
  publisher = {Association for the Advancement of Artificial Intelligence (AAAI)},
}

@Comment{jabref-meta: databaseType:bibtex;}
