@InProceedings{Camilli2022,
  author    = {Camilli, Matteo and Guerriero, Antonio and Janes, Andrea and Russo, Barbara and Russo, Stefano},
  booktitle = {Proceedings of the 3rd ACM/IEEE International Conference on Automation of Software Test},
  title     = {Microservices Integrated Performance and Reliability Testing},
  year      = {2022},
  address   = {New York, NY, USA},
  pages     = {29–39},
  publisher = {Association for Computing Machinery},
  series    = {AST '22},
  abstract  = {Continuous quality assurance for extra-functional properties of modern software systems is today a big challenge as their complexity is constantly increasing to satisfy market demands. This is the case of microservice systems. They provide high control on the scale of operation by means of fine-grained service decomposition, but this demands careful consideration of the relations between performance of individual microservices and service failures.In this work, we propose MIPaRT, a novel methodology, and platform to automatically test microservice operations for performance and reliability in combination. The proposed platform can be integrated into a DevOps cycle to support continuous testing and monitoring by the automatic (1) generation and execution of performance-reliability ex-vivo testing sessions, (2) collection of monitoring data, (3) computation of performance and reliability metrics, and (4) integrated visualization of the results.We apply our approach by operating the platform on an open source benchmark. Results show that our integrated approach can provide additional insights into the performance and reliability behaviour of microservices as well as their mutual relationships.},
  doi       = {10.1145/3524481.3527233},
  file      = {:Camilli2022 - Microservices Integrated Performance and Reliability Testing.pdf:PDF},
  isbn      = {9781450392860},
  keywords  = {performance testing, reliability testing, microservices systems},
  location  = {Pittsburgh, Pennsylvania},
  numpages  = {11},
  url       = {https://doi.org/10.1145/3524481.3527233},
}

@Article{Henning2022,
  author    = {Sören Henning and Wilhelm Hasselbring},
  journal   = {Empirical Software Engineering},
  title     = {A configurable method for benchmarking scalability of cloud-native applications},
  year      = {2022},
  month     = {aug},
  number    = {6},
  volume    = {27},
  doi       = {10.1007/s10664-022-10162-1},
  file      = {:Henning2022 - A Configurable Method for Benchmarking Scalability of Cloud Native Applications.pdf:PDF},
  publisher = {Springer Science and Business Media {LLC}},
  url       = {https://doi.org/10.1007/s10664-022-10162-1},
}

@InProceedings{Moreira2022,
  author    = {Moreira, Mateus Gabi and De Fran\c{c}a, Breno Bernard Nicolau},
  booktitle = {Proceedings of the 16th Brazilian Symposium on Software Components, Architectures, and Reuse},
  title     = {Analysis of Microservice Evolution Using Cohesion Metrics},
  year      = {2022},
  address   = {New York, NY, USA},
  pages     = {40–49},
  publisher = {Association for Computing Machinery},
  series    = {SBCARS '22},
  abstract  = {The adoption of Microservices Architecture (MSA) has increased in recent years due to several claimed benefits, such as reducing deployment complexity, supporting technology diversity, and better scalability. However, MSA is not free from maintainability issues, especially the lack of cohesion, in which microservices possibly concentrate or miss responsibilities. Also, the lack of empirically-validated cohesion metrics for MSA makes the quantitative assessment even more challenging. In this paper, we empirically explore the practical applicability of service-level cohesion metrics in an open-source MSA application context. The qualitative results show the possibility of assessing MSA cohesion using these service-level metrics, the feasibility of tracking software evolution, and an indication of possible technical debts along the way.},
  doi       = {10.1145/3559712.3559716},
  file      = {:Moreira2022 - Analysis of Microservice Evolution Using Cohesion Metrics.pdf:PDF},
  isbn      = {9781450397452},
  keywords  = {Cohesion Metrics, Software evolution, Microservices, Software architecture},
  location  = {Uberlandia, Brazil},
  numpages  = {10},
  url       = {https://doi.org/10.1145/3559712.3559716},
}

@InProceedings{Peng2022,
  author    = {Peng, Xin and Zhang, Chenxi and Zhao, Zhongyuan and Isami, Akasaka and Guo, Xiaofeng and Cui, Yunna},
  booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  title     = {Trace Analysis Based Microservice Architecture Measurement},
  year      = {2022},
  address   = {New York, NY, USA},
  pages     = {1589–1599},
  publisher = {Association for Computing Machinery},
  series    = {ESEC/FSE 2022},
  abstract  = {Microservice architecture design highly relies on expert experience and may often result in improper service decomposition. Moreover, a microservice architecture is likely to degrade with the continuous evolution of services. Architecture measurement is thus important for the long-term evolution of microservice architectures. Due to the independent and dynamic nature of services, source code analysis based approaches cannot well capture the interactions between services. In this paper, we propose a trace analysis based microservice architecture measurement approach. We define a trace data model for microservice architecture measurement, which enables fine-grained analysis of the execution processes of requests and the interactions between interfaces and services. Based on the data model, we define 14 architectural metrics to measure the service independence and invocation chain complexity of a microservice system. We implement the approach and conduct three case studies with a student course project, an open-source microservice benchmark system, and three industrial microservice systems. The results show that our approach can well characterize the independence and invocation chain complexity of microservice architectures and help developers to identify microservice architecture issues caused by improper service decomposition and architecture degradation.},
  doi       = {10.1145/3540250.3558951},
  file      = {:Peng2022 - Trace Analysis Based Microservice Architecture Measurement.pdf:PDF},
  isbn      = {9781450394130},
  keywords  = {Dynamic analysis, Architecture, Tracing, Microservice},
  location  = {Singapore, Singapore},
  numpages  = {11},
  url       = {https://doi.org/10.1145/3540250.3558951},
}

@InProceedings{Straesser2023,
  author    = {Straesser, Martin and Mathiasch, Jonas and Bauer, Andr\'{e} and Kounev, Samuel},
  booktitle = {Proceedings of the 2023 ACM/SPEC International Conference on Performance Engineering},
  title     = {A Systematic Approach for Benchmarking of Container Orchestration Frameworks},
  year      = {2023},
  address   = {New York, NY, USA},
  pages     = {187–198},
  publisher = {Association for Computing Machinery},
  series    = {ICPE '23},
  abstract  = {Container orchestration frameworks play a critical role in modern cloud computing paradigms such as cloud-native or serverless computing. They significantly impact the quality and cost of service deployment as they manage many performance-critical tasks such as container provisioning, scheduling, scaling, and networking. Consequently, a comprehensive performance assessment of container orchestration frameworks is essential. However, until now, there is no benchmarking approach that covers the many different tasks implemented in such platforms and supports evaluating different technology stacks. In this paper, we present a systematic approach that enables benchmarking of container orchestrators. Based on a definition of container orchestration, we define the core requirements and benchmarking scope for such platforms. Each requirement is then linked to metrics and measurement methods, and a benchmark architecture is proposed. With COFFEE, we introduce a benchmarking tool supporting the definition of complex test campaigns for container orchestration frameworks. We demonstrate the potential of our approach with case studies of the frameworks Kubernetes and Nomad in a self-hosted environment and on the Google Cloud Platform. The presented case studies focus on container startup times, crash recovery, rolling updates, and more.},
  doi       = {10.1145/3578244.3583726},
  file      = {:Straesser2023a - A Systematic Approach for Benchmarking of Container Orchestration Frameworks.pdf:PDF},
  isbn      = {9798400700682},
  keywords  = {nomad, kubernetes, benchmarking, performance, container orchestration},
  location  = {Coimbra, Portugal},
  numpages  = {12},
  url       = {https://doi.org/10.1145/3578244.3583726},
}

@InProceedings{Vale2022,
  author    = {Vale, Guilherme and Correia, Filipe Figueiredo and Guerra, Eduardo Martins and de Oliveira Rosa, Thatiane and Fritzsch, Jonas and Bogner, Justus},
  booktitle = {2022 IEEE 19th International Conference on Software Architecture (ICSA)},
  title     = {Designing Microservice Systems Using Patterns: An Empirical Study on Quality Trade-Offs},
  year      = {2022},
  pages     = {69-79},
  doi       = {10.1109/ICSA53651.2022.00015},
  file      = {:Vale2022 - Designing Microservice Systems Using Patterns_ an Empirical Study on Quality Trade Offs.pdf:PDF},
  url       = {https://doi.org/10.1109/ICSA53651.2022.00015},
}

@InProceedings{Yilmaz2021,
  author    = {Yilmaz, Rahime and Buzluca, Feza},
  booktitle = {2021 2nd International Informatics and Software Engineering Conference (IISEC)},
  title     = {A Fuzzy Quality Model to Measure the Maintainability of Microservice Architectures},
  year      = {2021},
  pages     = {1-6},
  doi       = {10.1109/IISEC54230.2021.9672417},
  file      = {:Yilmaz2021 - A Fuzzy Quality Model to Measure the Maintainability of Microservice Architectures.pdf:PDF},
  url       = {https://doi.org/10.1109/IISEC54230.2021.9672417},
}

@InCollection{Yussupov2022,
  author    = {Vladimir Yussupov and Uwe Breitenbücher and Antonio Brogi and Lukas Harzenetter and Frank Leymann and Jacopo Soldani},
  booktitle = {Service-Oriented Computing},
  publisher = {Springer International Publishing},
  title     = {Serverless or~Serverful? A~Pattern-Based Approach for~Exploring Hosting Alternatives},
  year      = {2022},
  pages     = {45--67},
  doi       = {10.1007/978-3-031-18304-1_3},
  file      = {:Yussupov2022 - Serverless Or~Serverful_ A~Pattern Based Approach For~Exploring Hosting Alternatives.pdf:PDF},
  url       = {https://doi.org/10.1007/978-3-031-18304-1_3},
}

@InProceedings{Filippone2023,
  author    = {Gianluca Filippone and Nadeem Qaisar Mehmood and Marco Autili and Fabrizio Rossi and Massimo Tivoli},
  booktitle = {2023 {IEEE} 20th International Conference on Software Architecture ({ICSA})},
  title     = {From monolithic to microservice architecture: an automated approach based on graph clustering and combinatorial optimization},
  year      = {2023},
  month     = {mar},
  publisher = {{IEEE}},
  comment   = {cites Brito2021},
  doi       = {10.1109/icsa56044.2023.00013},
  file      = {:Filippone2023 - From Monolithic to Microservice Architecture_ an Automated Approach Based on Graph Clustering and Combinatorial Optimization.pdf:PDF},
  url       = {https://doi.org/10.1109/icsa56044.2023.00013},
}

@InCollection{Genfer2021,
  author    = {Patric Genfer and Uwe Zdun},
  booktitle = {Software Architecture},
  publisher = {Springer International Publishing},
  title     = {Identifying Domain-Based Cyclic Dependencies in Microservice {APIs} Using Source Code Detectors},
  year      = {2021},
  pages     = {207--222},
  comment   = {cites Engel2018},
  doi       = {10.1007/978-3-030-86044-8_15},
  file      = {:Genfer2021 - Identifying Domain Based Cyclic Dependencies in Microservice APIs Using Source Code Detectors.pdf:PDF},
  url       = {https://doi.org/10.1007/978-3-030-86044-8_15},
}

@InProceedings{Ntentos2022,
  author    = {Evangelos Ntentos and Uwe Zdun and Ghareeb Falazi and Uwe Breitenbucher and Frank Leymann},
  booktitle = {2022 {IEEE} International Conference on Services Computing ({SCC})},
  title     = {Assessing Architecture Conformance to Security-Related Practices in Infrastructure as Code Based Deployments},
  year      = {2022},
  month     = {jul},
  publisher = {{IEEE}},
  comment   = {cites Zdun2017},
  doi       = {10.1109/scc55611.2022.00029},
  file      = {:Ntentos2022 - Assessing Architecture Conformance to Security Related Practices in Infrastructure As Code Based Deployments.pdf:PDF},
  url       = {https://doi.org/10.1109/scc55611.2022.00029},
}

@InProceedings{Silva2023,
  author    = {Samira Silva and Adiel Tuyishime and Tiziano Santilli and Patrizio Pelliccione and Ludovico Iovino},
  booktitle = {2023 {IEEE} 20th International Conference on Software Architecture ({ICSA})},
  title     = {Quality Metrics in Software Architecture},
  year      = {2023},
  month     = {mar},
  publisher = {{IEEE}},
  comment   = {cites Perepletchikov2007},
  doi       = {10.1109/icsa56044.2023.00014},
  file      = {:Silva2023 - Quality Metrics in Software Architecture.pdf:PDF},
  url       = {https://doi.org/10.1109/icsa56044.2023.00014},
}

@Article{Zdun2023,
  author    = {Uwe Zdun and Pierre-Jean Queval and Georg Simhandl and Riccardo Scandariato and Somik Chakravarty and Marjan Jelic and Aleksandar Jovanovic},
  journal   = {{ACM} Transactions on Software Engineering and Methodology},
  title     = {Microservice Security Metrics for Secure Communication, Identity Management, and Observability},
  year      = {2023},
  month     = {jan},
  number    = {1},
  pages     = {1--34},
  volume    = {32},
  comment   = {cites Engel2018, Zdun2017},
  doi       = {10.1145/3532183},
  file      = {:Zdun2023 - Microservice Security Metrics for Secure Communication, Identity Management, and Observability.pdf:PDF},
  publisher = {Association for Computing Machinery ({ACM})},
  url       = {https://doi.org/10.1145/3532183},
}

@Article{Zhong2022,
  author    = {Chenxing Zhong and Huang Huang and He Zhang and Shanshan Li},
  journal   = {Software: Practice and Experience},
  title     = {Impacts, causes, and solutions of architectural smells in microservices: An industrial investigation},
  year      = {2022},
  month     = {aug},
  number    = {12},
  pages     = {2574--2597},
  volume    = {52},
  comment   = {cites Jin2021},
  doi       = {10.1002/spe.3138},
  file      = {:Zhong2022 - Impacts, Causes, and Solutions of Architectural Smells in Microservices_ an Industrial Investigation.pdf:PDF},
  publisher = {Wiley},
  url       = {https://doi.org/10.1002/spe.3138},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: fileDirectory-robin-robin-x1-carbon10:../../../pdfs;}

@Comment{jabref-meta: saveActions:disabled;
all-text-fields[identity]
date[normalize_date]
month[normalize_month]
pages[normalize_page_numbers]
;}
