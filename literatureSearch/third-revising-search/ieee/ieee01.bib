@ARTICLE{10251860,
  author={Al-Debagy, O. and Martinek, P.},
  journal={Journal of Web Engineering}, 
  title={A Metrics Framework for Evaluating Microservices Architecture Designs}, 
  year={2020},
  volume={19},
  number={3–4},
  pages={341-370},
  abstract={Microservices are becoming a more popular software architecture among companies and developers. Therefore, there is a need to develop methods for quantifying the process of measuring the quality of microservices design. This paper has created a novel set of metrics for microservices architecture applications. The proposed metrics are the Service Granularity Metric “SGM”, the Lack of Cohesion Metric “LCOM”, and the Number of Operations “NOO”. The proposed metrics measure the granularity, cohesion, and complexity of individual microservices through analyzing the application programming interface “API”. Using these metrics, it is possible to evaluate the overall quality of the design of microservices applications. The proposed metrics were measured on 5 applications with different sizes and business cases. This research found that the value for the SGM metric needs to be between 0.2 and 0.6. Besides, the value of LCOM metric for a microservice needs to be between 0 and 0.8 with less than ten operations per microservice. These findings can be applied in the decomposition process of monolithic applications as well.},
  keywords={},
  doi={10.13052/jwe1540-9589.19341},
  ISSN={1544-5976},
  month={June},}@INPROCEEDINGS{9101318,
  author={Santos, Nuno and Rito Silva, António},
  booktitle={2020 IEEE International Conference on Software Architecture (ICSA)}, 
  title={A Complexity Metric for Microservices Architecture Migration}, 
  year={2020},
  volume={},
  number={},
  pages={169-178},
  abstract={Monolith applications tend to be difficult to deploy, upgrade, maintain, and understand. Microservices, on the other hand, have the advantages of being independently developed, tested, deployed, scaled and, more importantly, easier to change and maintain. This paper addresses the problem of migrating a monolith to a microservices architecture. Therefore, we address two research questions: (1) Can we define the cost of decomposition in terms of the effort to redesign a functionality, which is implemented in the monolith as an ACID transaction, into several distributed transactions? (2) Considering several similarity measures between domain entities, which provide a better decomposition when they are compared using the proposed complexity metric? To answer the first research question, we propose a complexity metric, for each functionality of the monolith application, that measures the impact of relaxing the functionality consistency on the architecture redesign and implementation. Regarding the second research question, we experiment with four similarity measures, each based on a different type of information collected from monolith functionality implementation. We evaluated our approach with three monolith systems and compared our complexity metric against industry metrics of cohesion and coupling. We also evaluated the different similarity measures in terms of the complexity of the decomposition they produce. We were able to correctly correlate the complexity metric with other metrics of cohesion and coupling defined in other research and we conclude that no single combination of similarity measures outperforms the other, which is confirmed by the existing research. Additionally, we conclude that the approach can help on an incremental migration to microservices, which, actually, is the strategy proposed by the industry experts.},
  keywords={},
  doi={10.1109/ICSA47634.2020.00024},
  ISSN={},
  month={March},}@INPROCEEDINGS{9012140,
  author={Raj, Vinay and Ravichandra, S.},
  booktitle={2018 3rd IEEE International Conference on Recent Trends in Electronics, Information & Communication Technology (RTEICT)}, 
  title={Microservices: A perfect SOA based solution for Enterprise Applications compared to Web Services}, 
  year={2018},
  volume={},
  number={},
  pages={1531-1536},
  abstract={The Software Engineering community has defined different types of architectures to build applications. One among them is Service Oriented Architecture(SOA) which has created significant impact the way software applications are built. There are many implementations of SOA like Web Services, REST services etc. But Web Services and REST services do not fully follow all the principles of SOA. Microservices as an architectural style recently emerged from SOA by which we can develop business requirements with loosely coupled, self deploying and scalable services. Microservices have gained more popularity in application development as they are easy to understand, scale and deploy. In this paper we discuss principles of SOA, major drawbacks of web services and benefits of Microservices over SOA based web services. We have highlighted the importance of Microservices in software development. This paper gives information for architects as to why choose Microservices architecture over web services. We have also discussed metrics used for calculating Coupling between services and we evaluated by considering a smart payment application for ecommerce which is built using both the styles. We observed that Microservices architectural style has less coupling between services compared to Web Service style based on the metric values of the application.},
  keywords={},
  doi={10.1109/RTEICT42901.2018.9012140},
  ISSN={},
  month={May},}@INPROCEEDINGS{9095617,
  author={Rosa, Thatiane de Oliveira and Goldman, Alfredo and Guerra, Eduardo Martins},
  booktitle={2020 IEEE International Conference on Software Architecture Companion (ICSA-C)}, 
  title={How ‘micro’ are your services?}, 
  year={2020},
  volume={},
  number={},
  pages={75-78},
  abstract={Microservice is an architectural style that proposes that a complex system should be developed from small and independent services that work together. There is not a welldefined boundary about when a software architecture can be considered based on microservices or not. Because of that, defining microservices context and infrastructure is challenging, especially to characterize aspects related to microservice size, data consistency, and microservices coupling. Thus, it is crucial to understand the microservices-based software characteristics, to comprehend the impact of some evolutions on architecture, and evaluate how much a particular architecture fits the microservices architectural style. Therefore, based on bibliographic research and case studies conducted in academical and industrial environments, we aim to propose a model to characterize the architecture structure based on the main guidelines of the microservice architectural style. This model introduces dimensions that measure characteristics based on modules size, coupling to data sources, and service collaboration. This study should facilitate the mapping, measurement, and monitoring of different impacts generated in the software architecture from increments and refactoring performed. This work is on the initial development stage and as a result, we expected that the model supports architectural decisions that consider different quality attributes to achieve the right balance between service independence and collaboration for a given system.},
  keywords={},
  doi={10.1109/ICSA-C50368.2020.00023},
  ISSN={},
  month={March},}@INPROCEEDINGS{9672417,
  author={Yilmaz, Rahime and Buzluca, Feza},
  booktitle={2021 2nd International Informatics and Software Engineering Conference (IISEC)}, 
  title={A Fuzzy Quality Model to Measure the Maintainability of Microservice Architectures}, 
  year={2021},
  volume={},
  number={},
  pages={1-6},
  abstract={Microservice architecture (MSA) is a type of software and systems architecture that is based on the modularization principle. It proposes designing systems employing small-scaled, loosely coupled, and independently deployable microservices. There are several benefits of microservices architecture in terms of maintainability, scalability, and productivity which have led to rise in its popularity. Even though there are several studies about development in MSA, the studies on the quality of the microservice-based systems are limited. In this study, we propose a quality model based on fuzzy logic to measure and assess quality attributes of systems in MSA that can be used by software architects, developers, and project managers. We focus on maintainability of microservices because it is one of the most important quality attributes of software systems. We identified sub-characteristics and properties of microservices that affect maintainability, and constructed a hierarchical quality model based on ISO/IEC 250xy standard SQuaRE (System and Software Quality Requirements and Evaluation). Our fuzzy model measures maintainability of microservices in three levels, i.e., low, medium, and high. We provided a basis for the development and application of quality models in industrial practice as well as a basis for further extension. To demonstrate and evaluate our methodology, we used open-source applications designed in MSA. The results show that our method can assess maintainability of microservices realistically.},
  keywords={},
  doi={10.1109/IISEC54230.2021.9672417},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{9095641,
  author={Avritzer, Alberto},
  booktitle={2020 IEEE International Conference on Software Architecture Companion (ICSA-C)}, 
  title={Challenges and Approaches for the Assessment of Micro-Service Architecture Deployment Alternatives in DevOps : A tutorial presented at ICSA 2020}, 
  year={2020},
  volume={},
  number={},
  pages={1-2},
  abstract={The goal of this tutorial is to provide an overview of challenges and approaches for architecture/dependability assessment in the context of DevOps and microservices. Specifically, we present approaches that employ operational data obtained from production-level application performance management (APM) tools, giving access to operational workload profiles, architectural information, failure models, and security intrusions. We use this data to automatically create and conFigure architecture assessments based on models, load tests, and resilience benchmarks. The focus of this tutorial is on approaches that employ production usage, because these approaches provide more accurate recommendations for microservice architecture dependability assessment than approaches that do not consider production usage.We present an overview of (1) the state-of-the-art approaches for obtaining operational data from production systems using APM tools, (2) the challenges of dependability for DevOps and microservices, (3) selected approaches based on operational data to assess dependability. The architecture assessment focus of this tutorial is on scalability, resilience, survivability, and security. Particularly, we present a demo of the automated approach for the evaluation of a domain-based scalability and security metric assessment that is based on the microservice architecture ability to satisfy the performance requirement under load and/or intrusions. We illustrate the approach by presenting experimental results using a benchmark microservice architecture.},
  keywords={},
  doi={10.1109/ICSA-C50368.2020.00007},
  ISSN={},
  month={March},}@INPROCEEDINGS{9568289,
  author={Weerasinghe, L. D. S. B. and Perera, Indika},
  booktitle={2021 International Research Conference on Smart Computing and Systems Engineering (SCSE)}, 
  title={An exploratory evaluation of replacing ESB with microservices in service-oriented architecture}, 
  year={2021},
  volume={4},
  number={},
  pages={137-144},
  abstract={With the continuous progress in technology during the past few decades, cloud computing has become a fast-growing technology in the world, making computerized systems widespread. The emergence of Cloud Computing has evolved towards microservice concepts, which are highly demanded by corporates for enterprise application level. Most enterprise applications have moved away from traditional unified models of software programs like monolithic architecture and traditional SOA architecture to microservice architecture to ensure better scalability, lesser investment in hardware, and high performance. The monolithic architecture is designed in a manner that all the components and the modules are packed together and deployed on a single binary. However, in the microservice architecture, components are developed as small services so that horizontally and vertically scaling is made easier in comparison to monolith or SOA architecture. SOA and monolithic architecture are at a disadvantage compared to Microservice architecture, as they require colossal hardware specifications to scale the software. In general terms, the system performance of these architectures can be measured considering different aspects such as system capacity, throughput, and latency. This research focuses on how scalability and performance software quality attributes behave when converting the SOA system to microservice architecture. Experimental results have shown that microservice architecture can bring more scalability with a minimum cost generation. Nevertheless, specific gaps in performance are identified in the perspective of the final user experiences due to the interservice communication in the microservice architecture in a distributed environment.},
  keywords={},
  doi={10.1109/SCSE53661.2021.9568289},
  ISSN={2613-8662},
  month={Sep.},}@INPROCEEDINGS{9335808,
  author={Levin, Joshua and Benson, Theophilus A.},
  booktitle={2020 IEEE 9th International Conference on Cloud Networking (CloudNet)}, 
  title={ViperProbe: Rethinking Microservice Observability with eBPF}, 
  year={2020},
  volume={},
  number={},
  pages={1-8},
  abstract={Recent shifts to microservice-based architectures and the supporting servicemesh radically disrupt the landscape of performance-oriented management tasks. While the adoption of frameworks like Istio and Kubernetes ease the management and organization of such systems, they do not themselves provide strong observability. Microservice observability requires diverse, highly specialized, and often adaptive, metrics and algorithms to monitor both the health of individual services and the larger application. However, modern metrics collection frameworks are relatively static and rigid. We introduce ViperProbe, an eBPF-based microservices collection framework that provides (1) dynamic sampling and (2) collection of deep, diverse, and precise system metrics. Viper-Probe builds on the observation that the adoption of a common set of design patterns, e.g., servicemesh, enables offline analysis. By examining the performance profile of these patterns before deploying on production, ViperProbe can effectively reduce the set of collected metrics, thereby improving the efficiency and effectiveness of those metrics. To the best of our knowledge, ViperProbe is the first scalable eBPF-based dynamic and adaptive microservices metrics collection framework. Our results show ViperProbe has limited overhead, while significantly more effective for traditional management tasks, e.g., horizontal autoscaling.},
  keywords={},
  doi={10.1109/CloudNet51028.2020.9335808},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8466390,
  author={Perera, K. J. P. G. and Perera, I.},
  booktitle={2018 IEEE/ACIS 17th International Conference on Computer and Information Science (ICIS)}, 
  title={TheArchitect: A Serverless-Microservices Based High-level Architecture Generation Tool}, 
  year={2018},
  volume={},
  number={},
  pages={204-210},
  abstract={Software is ubiquitous in today's systems and business operations. Most importantly the architecture of a software system determines its quality and longevity, because the development work related to the software system will be carried out to be in line with its architecture design. Hence, it's highly important to structure the high-level software architecture accordingly to deliver the expected customer requirements while accounting for quality measures such as scalability, high availability and high performance. We propose TheArchitect, a serverless-microservices based high-level architecture generation tool, which will auto generate serverless-microservices based high-level architecture for a given business application, preserving the highlighted quality measures providing a tool based support for the software architect with respect to designing the high-level architecture. TheArchitect will provide any software developer to generate a proper architecture minimizing the involvement of an experienced software architect. Furthermore, the positives that microservices and serverless technologies has brought to the world of software engineering has made the software engineering community shift from the era of building large monolith applications containing overly complex designs, to microservices and serverless based technologies. Hence TheArchitect focuses on generating best fitted microservices and serverless based high-level architecture for a given application.},
  keywords={},
  doi={10.1109/ICIS.2018.8466390},
  ISSN={},
  month={June},}@INPROCEEDINGS{8544423,
  author={Perera, K. J. P. G. and Perera, I.},
  booktitle={2018 IEEE International Systems Engineering Symposium (ISSE)}, 
  title={A Rule-based System for Automated Generation of Serverless-Microservices Architecture}, 
  year={2018},
  volume={},
  number={},
  pages={1-8},
  abstract={Software being ubiquitous in today's systems and business operations, it's highly important to structure the high-level architecture of a software application accordingly to deliver the expected customer requirements while accounting for quality measures such as scalability, high availability and high performance. We propose The Architect, a rule-based system for serverless-microservices based high-level architecture generation. In the process of auto generating serverless-microservices high-level architecture, TheArchitect will preserve the highlighted quality measures. It will also provide a tool based support for the high-level architecture designing process of the software architect. Any software developer will be able to use TheArchitect to generate a proper architecture minimizing the involvement of a software architect. Furthermore, the positives of microservices and serverless technologies have made a significant impact on the software engineering community in terms of shifting from the era of building large monolith applications containing overly complex designs, to microservices and serverless based technologies. Hence The Architect focuses on generating best fitted microservices and serverless based high-level architecture for a given application.},
  keywords={},
  doi={10.1109/SysEng.2018.8544423},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{8029803,
  author={Mazlami, Genc and Cito, Jürgen and Leitner, Philipp},
  booktitle={2017 IEEE International Conference on Web Services (ICWS)}, 
  title={Extraction of Microservices from Monolithic Software Architectures}, 
  year={2017},
  volume={},
  number={},
  pages={524-531},
  abstract={Driven by developments such as mobile computing, cloud computing infrastructure, DevOps and elastic computing, the microservice architectural style has emerged as a new alternative to the monolithic style for designing large software systems. Monolithic legacy applications in industry undergo a migration to microservice-oriented architectures. A key challenge in this context is the extraction of microservices from existing monolithic code bases. While informal migration patterns and techniques exist, there is a lack of formal models and automated support tools in that area. This paper tackles that challenge by presenting a formal microservice extraction model to allow algorithmic recommendation of microservice candidates in a refactoring and migration scenario. The formal model is implemented in a web-based prototype. A performance evaluation demonstrates that the presented approach provides adequate performance. The recommendation quality is evaluated quantitatively by custom microservice-specific metrics. The results show that the produced microservice candidates lower the average development team size down to half of the original size or lower. Furthermore, the size of recommended microservice conforms with microservice sizing reported by empirical surveys and the domain-specific redundancy among different microservices is kept at a low rate.},
  keywords={},
  doi={10.1109/ICWS.2017.61},
  ISSN={},
  month={June},}@INPROCEEDINGS{7965739,
  author={Asik, Tugrul and Selcuk, Yunus Emre},
  booktitle={2017 IEEE 15th International Conference on Software Engineering Research, Management and Applications (SERA)}, 
  title={Policy enforcement upon software based on microservice architecture}, 
  year={2017},
  volume={},
  number={},
  pages={283-287},
  abstract={Microservice is an architectural style that has recently started gaining popularity to become a new architectural phenomenon. Microservice architecture provides new opportunities to deploy scalable, language free and dynamically adjustable applications. This type of applications consist of hundreds or more of service instances. So that, management, monitoring, refactoring and testing of applications are more complex than monolithic applications. Therefore, some metrics and policies for measuring the quality of an application which is based on microservice architecture is needed. Moreover, automated tools are needed to carry out those tasks and enforce those policies. This work represents such metrics and policies. Additionally, an automated tool is implemented for automatic analysis of those metrics and policies upon software.},
  keywords={},
  doi={10.1109/SERA.2017.7965739},
  ISSN={},
  month={June},}@INPROCEEDINGS{9527003,
  author={Weng, Tianjun and Yang, Wanqi and Yu, Guangba and Chen, Pengfei and Cui, Jieqi and Zhang, Chuanfu},
  booktitle={2021 IEEE/ACM International Workshop on Cloud Intelligence (CloudIntelligence)}, 
  title={Kmon: An In-kernel Transparent Monitoring System for Microservice Systems with eBPF}, 
  year={2021},
  volume={},
  number={},
  pages={25-30},
  abstract={Currently, the architecture of software systems is shifting from “monolith” to “microservice” which is an important enabling technology of cloud native systems. Since the advantages of microservice in agility, efficiency, and scaling, it has become the most popular architecture in the industry. However, as the increase of microservice complexity and scale, it becomes challenging to monitor such a large number of microservices. Traditional monitoring techniques such as end-to-end tracing cannot well fit microservice environment, because they need code instrumentation with great effort. Moreover, they cannot explore the fine-grained internal states of microservice instances. To tackle this problem, we propose Kmon, which is an In-kernel transparent monitoring system for microservice systems with extended Berkeley Packet Filter (eBPF). Kmon can provide multiple kinds of run-time information of micrservices such as latency, topology, performance metrics with a low overhead.},
  keywords={},
  doi={10.1109/CloudIntelligence52565.2021.00014},
  ISSN={},
  month={May},}@INPROCEEDINGS{9359175,
  author={Cui, Jieqi and Chen, Pengfei and Yu, Guangba},
  booktitle={2020 IEEE 26th International Conference on Parallel and Distributed Systems (ICPADS)}, 
  title={A Learning-based Dynamic Load Balancing Approach for Microservice Systems in Multi-cloud Environment}, 
  year={2020},
  volume={},
  number={},
  pages={334-341},
  abstract={Multi-cloud environment has become common since companies manage to prevent cloud vendor lock-in for security and cost concerns. Meanwhile, the microservice architecture is often considered for its flexibility. Combining multi-cloud with microservice, the problem of routing requests among all possible microservice instances in multi-cloud environment arises. This paper presents a learning-based approach to route requests in order to balance the load. In our approach, the performance of microservice is modeled explicitly through machine learning models. The model can derive the response time from request volume, route decision, and other cloud metrics. Then the balanced route decision is obtained from optimizing the model with Bayesian Optimization. With this approach, the request route decision can adjust to dynamic runtime metrics instead of remaining static for all different circumstances. Explicit performance modeling avoids searching on an actual microservice system which is time-consuming. Experiments show that our approach reduces average response time by 10% at least.},
  keywords={},
  doi={10.1109/ICPADS51040.2020.00052},
  ISSN={2690-5965},
  month={Dec},}@INPROCEEDINGS{9101217,
  author={Zhang, Yukun and Liu, Bo and Dai, Liyun and Chen, Kang and Cao, Xuelian},
  booktitle={2020 IEEE International Conference on Software Architecture (ICSA)}, 
  title={Automated Microservice Identification in Legacy Systems with Functional and Non-Functional Metrics}, 
  year={2020},
  volume={},
  number={},
  pages={135-145},
  abstract={Since microservice has merged as a promising architectural style with advantages in maintainability, scalability, evolvability, etc., increasing companies choose to restructure their legacy monolithic software systems as the microservice architecture. However, it is quite a challenge to properly partitioning the systems into suitable parts as microservices. Most approaches perform microservices identification from a function-splitting perspective and with sufficient legacy software artifacts. That may be not realistic in industrial practices and possibly results in generating unexpected microservices. To address this, we proposed an automated microservice identification (AMI) approach that extracts microservices from the execution and performance logs without providing documentation, models or source codes, while taking both functional and non-functional metrics into considerations. Our work firstly collects logs from the executable legacy system. Then, controller objects (COs) are identified as the key objects to converge strongly related subordinate objects (SOs). Subsequently, the relation between each pair of CO and SO is evaluated by a relation matrix from both the functional and non-functional perspective. We ultimately cluster classes(objects) into the microservices by optimizing the multi-objective of high-cohesion-low-coupling and load balance. The usefulness of the proposed approach is illustrated by applying to a case study.},
  keywords={},
  doi={10.1109/ICSA47634.2020.00021},
  ISSN={},
  month={March},}@INPROCEEDINGS{9110450,
  author={Lin, Thomas and Leon-Garcia, Alberto},
  booktitle={NOMS 2020 - 2020 IEEE/IFIP Network Operations and Management Symposium}, 
  title={Towards a Client-Centric QoS Auto-Scaling System}, 
  year={2020},
  volume={},
  number={},
  pages={1-9},
  abstract={Many modern day cloud services are composites of multiple smaller services working correctly together. This design has become increasingly prevalent due to the rise of the microservices application architecture, as well as service chaining in Network Function Virtualization (NFV). Future composite applications and services will be deployed on multi-tier clouds where their constituent microservices may be geographically spread over different regions. To optimize the delivery of such composites, the constituent microservices must be placed in locations where their clients, which may be other microservices, are able to meet certain QoS constraints. We propose an architecture and present a prototype system for incorporating network metrics into the auto-scaling and scheduling decisions of cloud management systems. Given a service with QoS constraints, our system monitors the network metrics (e.g. latency and bandwidth) of their clients. If a particular client is unable to receive the required latency or bandwidth of the service, our system auto-scales the service and strategically places the new instance(s) in a location capable of meeting the service quality, and re-directs traffic to the new instance.},
  keywords={},
  doi={10.1109/NOMS47738.2020.9110450},
  ISSN={2374-9709},
  month={April},}@INPROCEEDINGS{9101266,
  author={Selmadji, Anfel and Seriai, Abdelhak-Djamel and Bouziane, Hinde Lilia and Oumarou Mahamane, Rahina and Zaragoza, Pascal and Dony, Christophe},
  booktitle={2020 IEEE International Conference on Software Architecture (ICSA)}, 
  title={From Monolithic Architecture Style to Microservice one Based on a Semi-Automatic Approach}, 
  year={2020},
  volume={},
  number={},
  pages={157-168},
  abstract={Due to its tremendous advantages, microservice architectural style has become an essential element for the development of applications deployed on the cloud and for those adopting the DevOps practices. Nevertheless, while microservices can be used to develop new applications, there are monolithic ones, that are not well adapted neither to the cloud nor to DevOps. Migrating these applications towards microservices appears as a solution to adapt them to both. In this context, we propose an approach aiming to achieve this objective by focusing on the step of microservices identification. The proposed identification, in this paper, is based on an analysis of the relationships between source code elements, their relationships with the persistent data manipulated in this code and finally the knowledge, often partial, of the architect concerning the system to migrate. A function that measures the quality of a microservice based on its ability to provide consistent service and its interdependence with others microservice in the resulting architecture was defined. Moreover, the architect recommendations are used, when available, to guide the identification process. The conducted experiment shows the relevance of the obtained microservices by our approach.},
  keywords={},
  doi={10.1109/ICSA47634.2020.00023},
  ISSN={},
  month={March},}@INPROCEEDINGS{9165482,
  author={Khan, Michel Gokan and Taheri, Javid and Khoshkholghi, Mohammad Ali and Kassler, Andreas and Cartwright, Carolyn and Darula, Marian and Deng, Shuiguang},
  booktitle={2020 6th IEEE Conference on Network Softwarization (NetSoft)}, 
  title={A Performance Modelling Approach for SLA-Aware Resource Recommendation in Cloud Native Network Functions}, 
  year={2020},
  volume={},
  number={},
  pages={292-300},
  abstract={Network Function Virtualization (NFV) becomes the primary driver for the evolution of 5G networks, and in recent years, Network Function Cloudification (NFC) proved to be an inevitable part of this evolution. Microservice architecture also becomes the de facto choice for designing a modern Cloud Native Network Function (CNF) due to its ability to decouple components of each CNF into multiple independently manageable microservices. Even though taking advantage of microservice architecture in designing CNFs solves specific problems, this additional granularity makes estimating resource requirements for a Production Environment (PE) a complex task and sometimes leads to an over-provisioned PE. Traditionally, performance engineers dimension each CNF within a Service Function Chain (SFC) in a smaller Performance Testing Environment (PTE) through a series of performance benchmarks. Then, considering the Quality of Service (QoS) constraints of a Service Provider (SP) that are guaranteed in the Service Level Agreement (SLA), they estimate the required resources to set up the PE. In this paper, we used a machine learning approach to model the impact of each microservice's resource configuration (i.e., CPU and memory) on the QoS metrics (i.e. serving throughput and latency) of each SFC in a PTE. Then, considering an SP's Service Level Objectives (SLO), we proposed an algorithm to predict each microservice's resource capacities in a PE. We evaluated the accuracy of our prediction on a prototype of a cloud native 5G Home Subscriber Server (HSS). Our model showed 95%-78% accuracy in a PE that has 2-5 times more computing resources than the PTE.},
  keywords={},
  doi={10.1109/NetSoft48620.2020.9165482},
  ISSN={},
  month={June},}@INPROCEEDINGS{9237055,
  author={Shiraishi, Takashi and Noro, Masaaki and Kondo, Reiko and Takano, Yosuke and Oguchi, Naoki},
  booktitle={2020 21st Asia-Pacific Network Operations and Management Symposium (APNOMS)}, 
  title={Real-time Monitoring System for Container Networks in the Era of Microservices}, 
  year={2020},
  volume={},
  number={},
  pages={161-166},
  abstract={Large-scale web services are increasingly adopting the microservice architecture that mainly utilizes container technologies. Microservices are operated on complex configured infrastructures, such as containers, virtual machines, and physical machines. To ensure service quality of microservices, it is important to monitor not only the quality of services but also the quality of the infrastructures utilized by the services. Therefore, the metrics of the infrastructure related with the services should be traced. An extended Berkeley Packet Filter (eBPF) is a relatively new Linux's function, which is effectively used as a sensor of container-network metrics. There are two key challenges in realizing the service-linked monitoring system. One challenge is making the full-stack topology between microservices, containers, and machines visible to set the sensor related with the services. Another challenge is dynamic sensor management that can relocate the sensor quickly after the topology's change. In this paper, we propose a real-time monitoring system that creates a full-stack topology and relocates the sensor in conjunction with events from a container orchestrator. The system enables a dynamic deployment of the sensors related with the monitored services.},
  keywords={},
  doi={10.23919/APNOMS50412.2020.9237055},
  ISSN={2576-8565},
  month={Sep.},}@INPROCEEDINGS{9285951,
  author={Rossi, Fabiana and Cardellini, Valeria and Presti, Francesco Lo},
  booktitle={2020 28th International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems (MASCOTS)}, 
  title={Self-adaptive Threshold-based Policy for Microservices Elasticity}, 
  year={2020},
  volume={},
  number={},
  pages={1-8},
  abstract={The microservice architecture structures an application as a collection of loosely coupled and distributed services. Since application workloads usually change over time, the number of replicas per microservice should be accordingly scaled at run-time. The most widely adopted scaling policy relies on statically defined thresholds, expressed in terms of system-oriented metrics. This policy might not be well-suited to scale multi-component and latency-sensitive applications, which express requirements in terms of response time. In this paper, we present a two-layered hierarchical solution for controlling the elasticity of microservice-based applications. The higher-level controller estimates the microservice contribution to the application performance, and informs the lower-level components. The latter accordingly scale the single microservices using a dynamic threshold-based policy. So, we propose MB Threshold and QL Threshold, two policies that employ respectively model-based and model-free reinforcement learning approaches to learn threshold update strategies. These policies can compute different thresholds for the different application components, according to the desired deployment objectives. A wide set of simulation results shows the benefits and flexibility of the proposed solution, emphasizing the advantages of using dynamic thresholds over the most adopted policy that uses static thresholds.},
  keywords={},
  doi={10.1109/MASCOTS50786.2020.9285951},
  ISSN={2375-0227},
  month={Nov},}@INPROCEEDINGS{9590257,
  author={Agarwal, Shivali and Sinha, Raunak and Sridhara, Giriprasad and Das, Pratap and Desai, Utkarsh and Tamilselvam, Srikanth and Singhee, Amith and Nakamuro, Hiroaki},
  booktitle={2021 IEEE International Conference on Web Services (ICWS)}, 
  title={Monolith to Microservice Candidates using Business Functionality Inference}, 
  year={2021},
  volume={},
  number={},
  pages={758-763},
  abstract={In this paper, we propose a novel approach for monolith decomposition, that maps the implementation structure of a monolith application to a functional structure that in turn can be mapped to business functionality. First, we infer the classes in the monolith application that are distinctively representative of the business functionality in the application domain. This is done using formal concept analysis on statically determined code flow structures in a completely automated manner. Then, we apply a clustering technique, guided by the inferred representatives, on the classes belonging to the monolith to group them into different types of partitions, mainly: 1) functional groups representing microservice candidates, 2) a utility class group, and 3) a group of classes that require significant refactoring to enable a clean microservice architecture. This results in microservice candidates that are naturally aligned with the different business functions exposed by the application. A detailed evaluation on four publicly available applications show that our approach is able to determine better quality microservice candidates when compared to other existing state of the art techniques. We also conclusively show that clustering quality metrics like modularity are not reliable indicators of microservice candidate goodness.},
  keywords={},
  doi={10.1109/ICWS53863.2021.00104},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{9460467,
  author={Ramesh, Srinivasan and Malony, Allen D. and Carns, Philip and Ross, Robert B. and Dorier, Matthieu and Soumagne, Jerome and Snyder, Shane},
  booktitle={2021 IEEE International Parallel and Distributed Processing Symposium (IPDPS)}, 
  title={SYMBIOSYS: A Methodology for Performance Analysis of Composable HPC Data Services}, 
  year={2021},
  volume={},
  number={},
  pages={35-45},
  abstract={Microservices are a powerful new way of building, customizing, and deploying distributed services owing to their flexibility and maintainability. Several large-scale distributed platforms have emerged to serve the growing needs of data-centric workloads and services in commercial computing. Concurrently, high-performance computing (HPC) systems and software are rapidly evolving to meet the demands of diversified applications and heterogeneity. The interplay of hardware factors, software configuration parameters, and the flexibility offered with a microservice architecture makes it nontrivial to estimate the optimal service instantiation for a given application workload. Further, this problem is exacerbated when considering that these services operate in a dynamic and heterogeneous HPC environment. An optimally integrated service can be vastly more performant than a haphazardly integrated one. Existing performance tools for HPC either fail to understand the request-response model of communication inherent to microservices or they operate within a narrow scope, limiting the insight that can be gleaned from employing them in isolation.We propose a methodology for integrated performance analysis of HPC microservices frameworks and applications called SYMBIOSYS. We describe its design and implementation within the context of the Mochi framework. This integration is achieved by combining distributed callpath profiling and tracing with a performance data exchange strategy that collects fine-grained, low-level metrics from the RPC communication library and network layers. The result is a portable, low-overhead performance analysis setup that provides a holistic profile of the dependencies among microservices and how they interact with the Mochi RPC software stack. Using HEPnOS, a production-quality Mochi data service, we demonstrate the low-overhead operation of SYMBIOSYS at scale and use it to identify the root causes of poorly performing service configurations.},
  keywords={},
  doi={10.1109/IPDPS49936.2021.00013},
  ISSN={1530-2075},
  month={May},}@INPROCEEDINGS{9482273,
  author={Tang, Ming and Xia, Fei and Zou, Haodong and Hu, Youjun and Liu, Jun and Liu, Sai},
  booktitle={2021 IEEE 4th Advanced Information Management, Communicates, Electronic and Automation Control Conference (IMCEC)}, 
  title={Cloud platform load balancing mechanism for microservice architecture}, 
  year={2021},
  volume={4},
  number={},
  pages={435-439},
  abstract={In response to the increase in request response latency under the microservice architecture, from the perspective of cloud platform load balancing, the average request latency and host load on the microservice chain are used as metrics to formalize the latency and problem environment. A request load balancing algorithm perceived by the microservice chain is proposed as the load balancing strategy of the load balancer. Simulation experiments prove that the algorithm in this paper can effectively reduce request latency in a complex microservice chain environment, and it can also maintain relatively good performance in an environment where instances are unevenly distributed, and for workloads between hosts.},
  keywords={},
  doi={10.1109/IMCEC51613.2021.9482273},
  ISSN={2693-2776},
  month={June},}@INPROCEEDINGS{8258201,
  author={Alipour, Hanieh and Liu, Yan},
  booktitle={2017 IEEE International Conference on Big Data (Big Data)}, 
  title={Online machine learning for cloud resource provisioning of microservice backend systems}, 
  year={2017},
  volume={},
  number={},
  pages={2433-2441},
  abstract={Microservices are bundled and generating traffic on the backend systems that need to scale on demand. When microservices generate variant and unexpected, the challenge is to classify the workload on the backend systems and adjust the scaling policy to reflect the resource demand timely and accurately. In this paper, we propose a microservice architecture that encapsulates functions of monitoring metrics and learning workload pattern. Then this service architecture is used to predict the future workload for decision making on resource provisioning. We deploy two machine learning algorithms and predict the resource demand of the backend systems of microservices emulated by a Netflix workload benchmark application. This service architecture presents an integrated solution of implementing self-managing cloud data services under variant workload.},
  keywords={},
  doi={10.1109/BigData.2017.8258201},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{9492620,
  author={Behrad, Shanay and Espes, David and Bertin, Philippe and Phan, Cao-Thanh},
  booktitle={2021 IEEE 7th International Conference on Network Softwarization (NetSoft)}, 
  title={Impacts of Service Decomposition Models on Security Attributes: A Case Study with 5G Network Repository Function}, 
  year={2021},
  volume={},
  number={},
  pages={470-476},
  abstract={Microservices-based architectures gain more and more attention in industry and academia due to their tremendous advantages such as providing resiliency, scalability, composability, etc. To benefit from these advantages, a proper architectural design is very important. The decomposition model of services into microservices and the granularity of these microservices affect the different aspects of the system such as flexibility, maintainability, performance, and security. An inappropriate service decomposition into microservices (improper granularity) may increase the attack surface of the system and lower its security level. In this paper, first, we study the probability of compromising services before and after decomposition. Then we formulate the impacts of possible service decomposition models on confidentiality, integrity, and availability attributes of the system. To do so, we provide equations for measuring confidentiality, integrity, and availability risks of the decomposed services in the system. It is also shown that the number of entry points to the decomposed services and the size of the microservices affect the security attributes of the system. As a use case, we propose three different service decomposition models for the 5G NRF (Network Repository Function) and calculate the impacts of these decomposition models on the confidentiality, integrity, and availability of the system using the provided equations.},
  keywords={},
  doi={10.1109/NetSoft51509.2021.9492620},
  ISSN={2693-9789},
  month={June},}@INPROCEEDINGS{8940402,
  author={Fernandes Mioto de Oliveira dos Santos, Eduardo and Lima Werner, Claudia Maria},
  booktitle={2019 International Conference on Information Systems and Software Technologies (ICI2ST)}, 
  title={A Survey on Microservices Criticality Attributes on Established Architectures}, 
  year={2019},
  volume={},
  number={},
  pages={149-155},
  abstract={The microservice oriented software architecture considers the delegation of responsibilities by separate components, thus creating a set of interconnected but independent services. Information about the most critical microservices is relevant to software architects and other decision-makers, thus guiding the maintenance and evolution of architecture in a more assertive and guided way. This paper aims to observe the need for a method to measure criticality in a microservice oriented architecture, motivated by this purpose, during August 2019, a survey with twenty experienced participants from the industry and academia was conducted, where the lack of a grounded method to measure the criticality on established architectures was observed.},
  keywords={},
  doi={10.1109/ICI2ST.2019.00028},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{9582573,
  author={de Toledo, Saulo S. and Martini, Antonio and Sjøberg, Dag I.K. and Przybyszewska, Agata and Frandsen, Johannes Skov},
  booktitle={2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, 
  title={Reducing Incidents in Microservices by Repaying Architectural Technical Debt}, 
  year={2021},
  volume={},
  number={},
  pages={196-205},
  abstract={Architectural technical debt (ATD) may create a substantial extra effort in software development, which is called interest. There is little evidence about whether repaying ATD in microservices reduces such interest. Objectives: We wanted to conduct a first study on investigating the effect of removing ATD on the occurrence of incidents in a microservices architecture. Method: We conducted a quantitative and qualitative case study of a project with approximately 1000 microservices in a large, international financing services company. We measured and compared the number of software incidents of different categories before and after repaying ATD. Results: The total number of incidents was reduced by 84%, and the numbers of critical- and high-priority incidents were both reduced by approximately 90% after the architectural refactoring. The number of incidents in the architecture with the ATD was mainly constant over time, but we observed a slight increase of low priority incidents related to inaccessibility and the environment in the architecture without the ATD. Conclusion: This study shows evidence that refactoring ATDs, such as lack of communication standards, poor management of dead-letter queues, and the use of inadequate technologies in microservices, reduces the number of critical- and high-priority incidents and, thus, part of its interest, although some low priority incidents may increase.},
  keywords={},
  doi={10.1109/SEAA53835.2021.00033},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{8845242,
  author={Tseng, Yuchia and Imadali, Sofiane and Houatra, Drissa and Aravinthan, Gopalasingham and Thomas, Laurent},
  booktitle={IEEE INFOCOM 2019 - IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, 
  title={Demo Abstract: Monitoring Virtualized Telco Services for Multisided Platforms with SQL-like Query}, 
  year={2019},
  volume={},
  number={},
  pages={949-950},
  abstract={The Telco ecosystem transformation towards cloud-native network services enables constructing an integrative platform business model in the form of a Multi-Sided Platform (MSP) leveraging microservice-based Virtualized Network Function architecture. In particular, MSP based architectures enable a multi-organizational ecosystem with increased automation possibilities for carrier-grade services creation and operations. We present a microservice-based monitoring system for virtualized Telco services based on OpenAirInterface (OAI) with an SQL-like query manager for metrics. We demonstrate two monitoring scenarios: (1) Average receiving (rx) PDU in bytes at MAC layer from the targeted user equipment (UE). (2) Finding the UE who consumes the most Physical Resource Blocks (PRB) within a specific time interval for the uplink and downlink transmission.},
  keywords={},
  doi={10.1109/INFCOMW.2019.8845242},
  ISSN={},
  month={April},}@INPROCEEDINGS{9644910,
  author={Hou, Chuanjia and Jia, Tong and Wu, Yifan and Li, Ying and Han, Jing},
  booktitle={2021 IEEE Intl Conf on Parallel & Distributed Processing with Applications, Big Data & Cloud Computing, Sustainable Computing & Communications, Social Computing & Networking (ISPA/BDCloud/SocialCom/SustainCom)}, 
  title={Diagnosing Performance Issues in Microservices with Heterogeneous Data Source}, 
  year={2021},
  volume={},
  number={},
  pages={493-500},
  abstract={Microservices architecture is vulnerable to performance issues due to its highly fine-grained decomposition of an application. To diagnose performance issues in microservices, existing works utilize system metrics as the specific indicator and do a lot of heavy computation such as building service dependency graphs during the diagnosing process.To improve the effectiveness and efficiency of issue diagnosing, we propose PDiagnose, a practical approach using multiple data sources including metrics, logs and traces jointly to diagnose performance issues in microservices systems. Through combining lightweight unsupervised anomaly detection algorithms and vote-based issue localization strategy, PDiagnose is application-agnostic and can localize root cause indicators accurately. Our evaluation on two public-available datasets shows that PDiagnose can achieve an overall recall of 84.8%, outperforming the best baseline approach. Meanwhile, the diagnosis duration of PDiagnose is also promising.},
  keywords={},
  doi={10.1109/ISPA-BDCloud-SocialCom-SustainCom52081.2021.00074},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{9556733,
  author={Song, Da and Yuan, Long and Zhao, Weixing and Yu, Quanxi and Du, Jie and Pan, Kaiyan},
  booktitle={2021 China International Conference on Electricity Distribution (CICED)}, 
  title={Cloud-Edge Computing Resource Collaborative Optimization Method for Power Distribution Fault Analysis Service}, 
  year={2021},
  volume={},
  number={},
  pages={627-632},
  abstract={The cloud-edge computing architecture of distribution network can meet the computing and communication requirements of most novel and traditional distribution services. However, the demand for computing resources of fault service is often greater than the resource capacity of edge computing terminal. Therefore, based on the cloud-edge collaborative architecture, this paper proposes a collaborative optimization method of cloud and edge computing resources for fault service in distribution network. Firstly, this paper elaborates the characteristics of fault service in distribution network, and describes the possibility of cloud-edge collaborative information interaction and microservice offloading based on container technology. Then, a cloud-edge collaborative service computing model and the microservice model of fault service are established. According to the offloading mechanism, a microservice offloading decision optimization model is established, which take the system operation cost and calculation delay as the comprehensive measuring index. Finally, the method proposed in this paper is simulated by MATLAB, and the simulation results show that this method can effectively reduce the microservice response time of distribution network and meet the computing resource requirements of fault service.},
  keywords={},
  doi={10.1109/CICED50259.2021.9556733},
  ISSN={2161-749X},
  month={April},}@INPROCEEDINGS{9196461,
  author={Rossi, Fabiana and Cardellini, Valeria and Presti, Francesco Lo},
  booktitle={2020 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)}, 
  title={Hierarchical Scaling of Microservices in Kubernetes}, 
  year={2020},
  volume={},
  number={},
  pages={28-37},
  abstract={In the last years, we have seen the increasing adoption of the microservice architectural style where applications satisfy user requests by invoking a set of independently deployable services. Software containers and orchestration tools, such as Kubernetes, have simplified the development and management of microservices. To manage containers' horizontal elasticity, Kubernetes uses a decentralized threshold-based policy that requires to set thresholds on system-oriented metrics (i.e., CPU utilization). This might not be well-suited to scale latency-sensitive applications, which need to express requirements in terms of response time. Moreover, being a fully decentralized solution, it may lead to frequent and uncoordinated application reconfigurations. In this paper, we present me-kube (Multi-level Elastic Kubernetes), a Kubernetes extension that introduces a hierarchical architecture for controlling the elasticity of microservice-based applications. At higher level, a centralized per-application component coordinates the run-time adaptation of subordinated distributed components, which, in turn, locally control the adaptation of each microservice. Then, we propose novel proactive and reactive hierarchical control policies, based on queuing theory. To show that me-kube provides general mechanisms, we also integrate reinforcement learning-based scaling policies. Using me-kube, we perform a large set of experiments, aimed to show the advantages of a hierarchical control over the default Kubernetes autoscaler.},
  keywords={},
  doi={10.1109/ACSOS49614.2020.00023},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{9355698,
  author={Ray, Kaustabha and Banerjee, Ansuman and Narendra, Nanjangud C.},
  booktitle={2020 IEEE/ACM Symposium on Edge Computing (SEC)}, 
  title={Proactive Microservice Placement and Migration for Mobile Edge Computing}, 
  year={2020},
  volume={},
  number={},
  pages={28-41},
  abstract={In recent times, Mobile Edge Computing (MEC) has emerged as a new paradigm allowing low-latency access to services deployed on edge nodes offering computation, storage and communication facilities. Vendors deploy their services on MEC servers to improve performance and mitigate network latencies often encountered in accessing cloud services. A service placement policy determines which services are deployed on which MEC servers. A number of mechanisms exist in literature to determine the optimal placement of services considering different performance metrics. However, for applications designed as microservice workflow architectures, service placement schemes need to be re-examined through a different lens owing to the inherent interdependencies which exist between microservices. Indeed, the dynamic environment, with stochastic user movement and service invocations, along with a large placement configuration space makes microservice placement in MEC a challenging task. Additionally, owing to user mobility, a placement scheme may need to be recalibrated, triggering service migrations to maintain the advantages offered by MEC. Existing microservice placement and migration schemes consider on-demand strategies. In this work, we take a different route and propose a Reinforcement Learning based proactive mechanism for microservice placement and migration. We use the San Francisco Taxi dataset to validate our approach. Experimental results show the effectiveness of our approach in comparison to other state-of-the-art methods.},
  keywords={},
  doi={10.1109/SEC50012.2020.00010},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{9105640,
  author={Valdivia, José A. and Limón, Xavier and Cortes-Verdin, Karen},
  booktitle={2019 7th International Conference in Software Engineering Research and Innovation (CONISOFT)}, 
  title={Quality attributes in patterns related to microservice architecture: a Systematic Literature Review}, 
  year={2019},
  volume={},
  number={},
  pages={181-190},
  abstract={Microservices is an interesting option for those who want to migrate their systems to improve performance, maintainability, scalability, and interoperability. Microservice architecture is a collection of self-sufficient services working together to provide functionalities. Nowadays, there are many options to build microservices, some of them are lead by patterns. However, the mapping between quality attributes and patterns is not clear yet. This systematic literature review presents a microservice pattern collection, it describes their benefits and the association between patterns and quality attributes. Finally, some metrics of quality attributes are identified.},
  keywords={},
  doi={10.1109/CONISOFT.2019.00034},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{9130466,
  author={Al-Debagy, Omar and Martinek, Péter},
  booktitle={2020 IEEE 15th International Conference of System of Systems Engineering (SoSE)}, 
  title={Extracting Microservices’ Candidates from Monolithic Applications: Interface Analysis and Evaluation Metrics Approach}, 
  year={2020},
  volume={},
  number={},
  pages={289-294},
  abstract={There is a migration trend toward microservices architecture coming from the monolithic applications. This research proposes a decomposition method that extracts microservices’ candidates through analyzing the application programming interface in order to extract the operations and the parameters. Then the operation names are converted into word representations using word embedding models. Next, semantically similar operations are clustered together to provide a microservice’ candidate. Additional step is to evaluate the proposed candidate using cohesion and complexity metrics. The proposed algorithm improved the decomposition approach for big applications but did not affect the decomposition of smaller applications.},
  keywords={},
  doi={10.1109/SoSE50414.2020.9130466},
  ISSN={},
  month={June},}@INPROCEEDINGS{8399148,
  author={Guaman, Daniel and Yaguachi, Lady and Samanta, Cueva C. and Danilo, Jaramillo H. and Soto, Fernanda},
  booktitle={2018 13th Iberian Conference on Information Systems and Technologies (CISTI)}, 
  title={Performance evaluation in the migration process from a monolithic application to microservices}, 
  year={2018},
  volume={},
  number={},
  pages={1-8},
  abstract={Microservices are considered as a software architecture that allows the decomposition of a system, its components or its functionalities into a set of small services, which are implemented, deployed and managed independently. In this study, the models that allow migrating a Monolith to Microservices such as NGINX and IBM are analyzed. From these models, activities that allow such migration are carefully selected and identified. In order to implement and evaluate the activities proposed in those models, an application that initially does not have any structure at the design and coding level (using PHP programming language) is applied. Then, the application's coding language changes to Java and the classes and libraries are distributed into packages. Subsequently, as it is suggested in the models, services are identified and implemented using RESTful Web Services to finally implement the microservices using technologies such as Spring Boot, Eureka, and Zuul. In the migration process, the application under study is modified at the code and design level, including patterns such as Singleton, Façade, Strangler, Single Service per Host, Service Discovery, and API Gateway, which are used to evaluate performance as a quality attribute in each migration phase. In order to obtain the performance related metrics and to analyze the advantages and disadvantages of each migration phase, Apache JMeter as tool is used. This tool is set up to generate results regarding the use of resources such as CPU, memory, network, and database access. Finally, the results show scenarios of several concurrent users who access to consult records in the database that uses the aforementioned application in each migration phase.},
  keywords={},
  doi={10.23919/CISTI.2018.8399148},
  ISSN={},
  month={June},}@ARTICLE{9507486,
  author={Xu, Rongxu and Jin, Wenquan and Kim, Dohyeun},
  journal={IEEE Access}, 
  title={Enhanced Service Framework Based on Microservice Management and Client Support Provider for Efficient User Experiment in Edge Computing Environment}, 
  year={2021},
  volume={9},
  number={},
  pages={110683-110694},
  abstract={Leveraging the edge computing paradigm, computing resources are deployed in the network edge to provide heterogeneous services. Edge computing delivers sensing and actuating services to the Internet from the constrained Internet of Things (IoT) devices. Meanwhile, management of various elements is provided by offloading sufficient computing and storage to the edge of the networks for the IoT environments such as home, factory, and private spaces without cloud servers. In this paper, we propose an enhanced service framework based on microservice management and client support provider for efficient user experiments in the edge computing environment. For providing the edge computing service and management in the network edge, this paper presents an edge-computing architecture that provides various functions through microservice modules on the edge platform engine. Through the microservices, the interfaces are provided to the client to access the device, data, and additional services. Using Docker, the microservice modules are deployed in the edge platform to provide the services. However, the services and management functions need to be presented to the clients based on the friendly user interfaces. For providing the user interfaces of the services and Docker engine to the clients, the client support service provider is developed and deployed in the network edge based on the edge platform. Therefore, the proposed edge platform provides the services and management to the users for accessing the resources and functions through visualized interfaces in the IoT environment based on edge computing. The performance of our proposed system can be checked through the test result screen and delay time. Compared to controlling edge computing by using a command-line tool for users, we made it easy for general users who are not computer savvy to access edge services through a graphic user interface. And by measuring the delay time and comparing the execution time, it can be seen that the proposed system operates faster.},
  keywords={},
  doi={10.1109/ACCESS.2021.3102595},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{7829777,
  author={Parimala, N. and Kohar, Rachna},
  booktitle={2016 Eleventh International Conference on Digital Information Management (ICDIM)}, 
  title={A quality metric for BPEL process under evolution}, 
  year={2016},
  volume={},
  number={},
  pages={197-202},
  abstract={In Service-Oriented Architecture (SOA), behaviour of a business process is specified using Business Process Execution Language (BPEL) which is a XML based language. In today's competitive market, enterprises change their business processes frequently. Changes in BPEL process may affect the quality of BPEL process for the consumer. It is desirable to measure and evaluate the BPEL process quality when changes occur. Metrics are vastly used to provide a quantitative measure for the quality. In this paper, BPEL Process Usefulness Metric under Evolution (BUME) is proposed to measure quality of a BPEL process when it evolves. The applicability of the metric is demonstrated using simulated data for different versions of a BPEL process.},
  keywords={},
  doi={10.1109/ICDIM.2016.7829777},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{7562758,
  author={Honamore, Suhas and Kumar, Lov and Rath, Santanu Ku.},
  booktitle={2016 International Conference on Internet of Things and Applications (IOTA)}, 
  title={Analysis of control flow complexity metrics for web service composition}, 
  year={2016},
  volume={},
  number={},
  pages={389-394},
  abstract={In service oriented computing, web services are combined to meet the interoperability demands in different heterogeneous and distributed applications. However, incisively measuring the control flow complexity of Web Service Composition (WSC) is not an easy task due to characteristics of distributed, loose-coupling, and heterogeneity. In Service Oriented Architecture (SOA), Business Process Execution Language (BPEL) is used to describe the combination of web services. This paper mainly focuses on the complexity measurement of web service composition from BPEL. Petri-net is one of the models to represent the work flow. The BPEL of WSC is converted into Petri-net based model and by extracting the information of places, transitions, and their interrelationship; the complexity is measured for that Petri-net model. Two metric sets are considered for analysis of the WSC's complexity, which are identified by studying the workflow's execution dependency relations. The first metric set describes the static features, and second metric set describes about the dynamic complexity of business process.},
  keywords={},
  doi={10.1109/IOTA.2016.7562758},
  ISSN={},
  month={Jan},}@INPROCEEDINGS{9304633,
  author={Cebotari, Vadim and Kugele, Stefan},
  booktitle={2020 IEEE Intelligent Vehicles Symposium (IV)}, 
  title={Playground for Early Automotive Service Architecture Design and Evaluation}, 
  year={2020},
  volume={},
  number={},
  pages={1349-1356},
  abstract={Context: We consider the structure of service-oriented architectures in vehicular software. Aim: We aim at evaluating the structure and grouping of service architectures. Method: We propose and discuss architectural metrics tailored towards automotive service-oriented architectures. We apply the metrics on an adaptive cruise control case example extracted from the AUTOSAR standard. Results: The application of the proposed metrics to two different service groupings for ACC points clearly to the same service grouping that we consider, after a thorough analysis, to be better with respect to coupling and cohesion attributes. Conclusion: We demonstrate the usefulness of proposed service group metrics in early design phases of the development process and validate the metrics on the case example of an adaptive cruise control function.},
  keywords={},
  doi={10.1109/IV47402.2020.9304633},
  ISSN={2642-7214},
  month={Oct},}@INPROCEEDINGS{8614791,
  author={Parekh, Nikunj and Kurunji, Swathi and Beck, Alan},
  booktitle={2018 IEEE 9th Annual Information Technology, Electronics and Mobile Communication Conference (IEMCON)}, 
  title={Monitoring Resources of Machine Learning Engine In Microservices Architecture}, 
  year={2018},
  volume={},
  number={},
  pages={486-492},
  abstract={Microservices architecture facilitates building distributed scalable software products, usually deployed in a cloud environment. Monitoring microservices deployed in a Kubernetes orchestrated distributed advanced analytics machine learning engines is at the heart of many cloud resource management solutions. In addition, measuring resource utilization at more granular level such as per query or sub-query basis in an MPP Machine Learning Engine (MLE) is key to resource planning and is also the focus of our work. In this paper we propose two mechanisms to measure resource utilization in Teradata Machine Learning Engine (MLE). First mechanism is the Cluster Resource Monitoring (CRM). CRM is a high-level resource measuring mechanism for IT administrators and analytics users to visualize, plot, generates alerts and perform live and historical-analytics on overall cluster usage statistics. Second mechanism is the Query Resource Monitoring (QRM). QRM enables IT administrators and MLE users to measure compute resource utilization per individual query and its sub-queries. When query takes long time, QRM provides insights. This is useful to identify expensive phases within a query that tax certain resources more and skew the work distribution. We show the results of proposed mechanisms and highlight use-cases.},
  keywords={},
  doi={10.1109/IEMCON.2018.8614791},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8972825,
  author={Samir, Areeg and Pahl, Claus},
  booktitle={2019 7th International Conference on Future Internet of Things and Cloud (FiCloud)}, 
  title={DLA: Detecting and Localizing Anomalies in Containerized Microservice Architectures Using Markov Models}, 
  year={2019},
  volume={},
  number={},
  pages={205-213},
  abstract={Container-based microservice architectures are emerging as a new approach for building distributed applications as a collection of independent services that works together. As a result, with microservices, we are able to scale and update their applications based on the load attributed to each service. Monitoring and managing the load in a distributed system is a complex task as the degradation of performance within a single service will cascade reducing the performance of other dependent services. Such performance degradations may result in anomalous behaviour observed for instance for the response time of a service. This paper presents a Detection and Localization system for Anomalies (DLA) that monitors and analyzes performance-related anomalies in container-based microservice architectures. To evaluate the DLA, an experiment is done using R, Docker and Kubernetes, and different performance metrics are considered. The results show that DLA is able to accurately detect and localize anomalous behaviour.},
  keywords={},
  doi={10.1109/FiCloud.2019.00036},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{6986002,
  author={Nik Daud, Nik Marsyahariani and Wan Kadir, Wan M. N.},
  booktitle={2014 8th. Malaysian Software Engineering Conference (MySEC)}, 
  title={Static and dynamic classifications for SOA structural attributes metrics}, 
  year={2014},
  volume={},
  number={},
  pages={130-135},
  abstract={Evaluating qualities of software based on software structural attributes such as coupling and cohesion are frequently done in practice as these attributes directly have impacts on value of higher level quality. Concerning oneself with structural attributes values early on helps developers to predict quality attributes level in the software. Service-Oriented Architecture (SOA) is an architectural concept where services are used as building blocks in developing new software. Lots of structural attributes metrics related to SOA had been proposed these recent years, which triggered an investigation to classify these metrics based on specific criteria. In this paper, we introduce classifications for SOA based structural attributes metrics, where the metrics are restricted to coupling, cohesion and complexity metrics. These metrics are classified based on software static and dynamic aspects with some brief introduction for each metric. By classifying these SOA based structural attributes metrics, it will allow user to avoid redundancy in proposing similar metrics thus increases the reusability of existing metrics.},
  keywords={},
  doi={10.1109/MySec.2014.6986002},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{9000664,
  author={Orduz, Juan S. and Orozco, Gabriel D. and Tobar-Arteaga, Carlos H. and Rendon, Oscar Mauricio Caicedo},
  booktitle={2019 IEEE 44th LCN Symposium on Emerging Topics in Networking (LCN Symposium)}, 
  title={μvIMS: A Finer-Scalable Architecture Based on Microservices}, 
  year={2019},
  volume={},
  number={},
  pages={141-148},
  abstract={The steps toward all over IP have defined to the IP Multimedia Subsystem (IMS) as the de facto technology for end-to-end multimedia service provisioning in 5G. However, the unpredictable growth of users in 5G requires to improve IMS scalability to handle dynamic user traffic. Several works have addressed this issue by introducing auto-scaling mechanisms in virtualized IMS (vIMS) architectures. However, the current vIMS deployments use monolithic designs that do not allow finer-scalability. In this paper, we present μvIMS, an architecture that uses microservices to provide finer-scalability and more effective resource usage than regular monolithic design. To test our architecture, we evaluate μvIMS prototype regarding CPU usage, RAM usage, Successful Call Rate (SCR), and latency metrics. Our test results reveal that μvIMS achieves a higher SCR, using the available resources effectively with a negligible latency increasing. Thus, we can state that dividing the monolithic vIMS architecture in microservices allows providing finer-scalability.},
  keywords={},
  doi={10.1109/LCNSymposium47956.2019.9000664},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{9527007,
  author={Wu, Li and Tordsson, Johan and Bogatinovski, Jasmin and Elmroth, Erik and Kao, Odej},
  booktitle={2021 IEEE/ACM International Workshop on Cloud Intelligence (CloudIntelligence)}, 
  title={MicroDiag: Fine-grained Performance Diagnosis for Microservice Systems}, 
  year={2021},
  volume={},
  number={},
  pages={31-36},
  abstract={Microservice architecture has emerged as a popular pattern for developing large-scale applications for its benefits of flexibility, scalability, and agility. However, the large number of services and complex dependencies make it difficult and time-consuming to diagnose performance issues. We propose Micro-Diag, an automated system to localize root causes of performance issues in microservice systems at a fine granularity, including not only locating the faulty component but also discovering detailed information for its abnormality. MicroDiag constructs a component dependency graph and performs causal inference on diverse anomaly symptoms to derive a metrics causality graph, which is used to infer root causes. Our experimental evaluation on a microservice benchmark running in a Kubernetes cluster shows that MicroDiag localizes root causes well, with 97% precision of the top 3 most likely root causes, outperforming state-of-the-art methods by at least 31.1%.},
  keywords={},
  doi={10.1109/CloudIntelligence52565.2021.00015},
  ISSN={},
  month={May},}@INPROCEEDINGS{9582183,
  author={Choochotkaew, Sunyanan and Chiba, Tatsuhiro and Trent, Scott and Amaral, Marcelo},
  booktitle={2021 IEEE 14th International Conference on Cloud Computing (CLOUD)}, 
  title={Run Wild: Resource Management System with Generalized Modeling for Microservices on Cloud}, 
  year={2021},
  volume={},
  number={},
  pages={609-618},
  abstract={Microservice architecture competes with the traditional monolithic design by offering benefits of agility, flexibility, reusability resilience, and ease of use. Nevertheless, due to the increase in internal communication complexity, care must be taken for resource-usage scaling in harmony with placement scheduling, and request balancing to prevent cascading performance degradation across microservices. We prototype Run Wild, a resource management system that controls all mechanisms in the microservice-deployment process covering scaling, scheduling, and balancing to optimize for desirable performance on the dynamic cloud driven by an automatic, united, and consistent deployment plan. In this paper, we also highlight the significance of co-location aware metrics on predicting the resource usage and computing the deployment plan. We conducted experiments with an actual cluster on the IBM Cloud platform. RunWild reduced the 90th percentile response time by 11% and increased average throughput by 10% with more than 30% lower resource usage for widely used autoscaling benchmarks on Kubernetes clusters.},
  keywords={},
  doi={10.1109/CLOUD53861.2021.00079},
  ISSN={2159-6190},
  month={Sep.},}@INPROCEEDINGS{9680438,
  author={Ramesh, Srinivasan and Ross, Robert and Dorier, Matthieu and Malony, Allen and Carns, Philip and Huck, Kevin},
  booktitle={2021 IEEE 28th International Conference on High Performance Computing, Data, and Analytics (HiPC)}, 
  title={SYMBIOMON: A High-Performance, Composable Monitoring Service}, 
  year={2021},
  volume={},
  number={},
  pages={332-342},
  abstract={High-performance computing (HPC) software is evolving to support an increasingly diverse set of applications and heterogeneous hardware architectures. As part of this evolution, the construction of scientific software has shifted from a traditional monolithic message passing interface executable model to a coupled, services-style model in which simulations run alongside a host of distributed HPC data services within the same batch job allocation. Microservices have emerged as a powerful new way to build these distributed data services through a composition model. However, performance analysis of composed microservices is a daunting challenge. It requires collecting, monitoring, aggre-gating, and exporting performance data from multiple sources. To be effective, the design of such a monitoring solution must allow for seamless integration into HPC applications and distributed services alike, be scalable, operate with a low overhead, and take advantage of the HPC platform. We propose SYMBIOMON, a monitoring service that is built by composing high-performance microservices. We describe its design and implementation within the context of the Mochi framework. SYMBIOMON combines a time-series data model with existing Mochi data services to collect, aggregate, and export performance metrics in a distributed manner. SYMBIOMON enables seamless, low-overhead monitoring and analysis of data services and HPC applications alike. Using HEPnOS, a production-quality Mochi data service, we demonstrate the use of SYMBIOMON to identify better service configurations.},
  keywords={},
  doi={10.1109/HiPC53243.2021.00047},
  ISSN={2640-0316},
  month={Dec},}@INPROCEEDINGS{7899252,
  author={Do, Nam H. and Van Do, Tien and Thi Tran, Xuan and Farkas, Lóránt and Rotter, Csaba},
  booktitle={2017 20th Conference on Innovations in Clouds, Internet and Networks (ICIN)}, 
  title={A scalable routing mechanism for stateful microservices}, 
  year={2017},
  volume={},
  number={},
  pages={72-78},
  abstract={Scalability is an important requirement in the development and the operation of applications in a cloud environment. To handling heavy concurrency in the input load, many design-related and operational factors should be considered. The microservice architecture patterns provide better means to increase the scalability than traditional software architecture patterns. However, certain aspects of applications such as the need to persist/maintain the application state require additional measures in the design and the supporting mechanism. We propose a scalable routing mechanism for applications designed according to the microservice architecture. In particular, a cloud infrastructure resource reservation application has been designed with some stateful services. The proposed approach maintains a good scalability, which provides a mean to achieve the efficient usage of the infrastructure resources.},
  keywords={},
  doi={10.1109/ICIN.2017.7899252},
  ISSN={2472-8144},
  month={March},}@INPROCEEDINGS{8494072,
  author={Pulparambil, Supriya and Baghdadi, Youcef and Al-Hamdani, Abdullah and Al-Badawi, Mohammed},
  booktitle={2018 9th International Conference on Computing, Communication and Networking Technologies (ICCCNT)}, 
  title={Service Design Metrics to Predict IT-Based Drivers of Service Oriented Architecture Adoption}, 
  year={2018},
  volume={},
  number={},
  pages={1-7},
  abstract={The key factors for deploying successful services is centered on the service design practices adopted by an enterprise. The design level information should be validated and measures are required to quantify the structural attributes. The metrics at this stage will support an early discovery of design flaws and help designers to predict the capabilities of service oriented architecture (SOA) adoption. In this work, we take a deeper look at how we can forecast the key SOA capabilities infrastructure efficiency and service reuse from the service designs modeled by SOA modeling language. The proposed approach defines metrics based on the structural and domain level similarity of service operations. The proposed metrics are analytically validated with respect to software engineering metrics properties. Moreover, a tool has been developed to automate the proposed approach and the results indicate that the metrics predict the SOA capabilities at the service design stage. This work can be further extended to predict the business based capabilities of SOA adoption such as flexibility and agility.},
  keywords={},
  doi={10.1109/ICCCNT.2018.8494072},
  ISSN={},
  month={July},}@INPROCEEDINGS{9525743,
  author={Gamage, Isuru Udara Piyadigama and Perera, Indika},
  booktitle={2021 Moratuwa Engineering Research Conference (MERCon)}, 
  title={Using dependency graph and graph theory concepts to identify anti-patterns in a microservices system: A tool-based approach}, 
  year={2021},
  volume={},
  number={},
  pages={699-704},
  abstract={Microservice architecture (MSA) based application developments are becoming the common trend in implementing large-scale applications. Unlike the traditional monolith applications, MSA applications are composed of many services hence there is an immense possibility of anti-patterns introduced into the system. To identify these design problems, a detailed analysis of the architecture needs to be performed. We see great potential for adopting graph concepts and algorithms in this regard. However, the few tools proposed by existing work to find anti-patterns that adopt graph concepts are not up to providing developers with adequate statistical information such as metrics along with visualization techniques or they are not fully automated. In this research, we present a tool-based solution for this problem which is capable of utilizing traced data of an MSA system to generate dependency graphs and thereby extract metrics using graph theory concepts and algorithms. We analyze a sample MSA system for anti-patterns with the tool. To verify the usability of the tool further, a group of developers also analyze an open-source system with the tool.},
  keywords={},
  doi={10.1109/MERCon52712.2021.9525743},
  ISSN={2691-364X},
  month={July},}@INPROCEEDINGS{9198750,
  author={Brusakova, I. A.},
  booktitle={2020 XXIII International Conference on Soft Computing and Measurements (SCM)}, 
  title={Metrics for Cognitive Management of IT Services}, 
  year={2020},
  volume={},
  number={},
  pages={259-261},
  abstract={The article presents metrics for managing IT services in a service-oriented architecture of the information system. Cognitive management of the effectiveness of IT services is considered on a variety of ICT infrastructure management metrics, information system management metrics, IT service management metrics. The necessary components of the formation of an analytical platform for the cognitive management of IT services in the EIM environment for SAP BI (Business Objects Business Intelligent) are considered. A model of cognitive management of IT services using key performance indicators (KPIs) for managing IT service metrics is presented.},
  keywords={},
  doi={10.1109/SCM50615.2020.9198750},
  ISSN={},
  month={May},}@INPROCEEDINGS{8029780,
  author={Wang, Hanzhang and Kessentini, Marouane and Hassouna, Taghreed and Ouni, Ali},
  booktitle={2017 IEEE International Conference on Web Services (ICWS)}, 
  title={On the Value of Quality of Service Attributes for Detecting Bad Design Practices}, 
  year={2017},
  volume={},
  number={},
  pages={341-348},
  abstract={Service-Oriented Architectures (SOAs) successfully evolve over time to update existing exposed features to the users and fix possible bugs. This evolution process may have a negative impact on the design quality of Web services. Recent studies addressed the problem of Web service antipatterns detection (bad design practices). To the best of our knowledge, these studies focused only on the use of metrics extracted from the implementation details (source code) of the interface and the services. However, the quality of service (QoS) metrics, widely used to evaluate the overall performance, are never used in the context of Web service antipatterns detection. We start, in this work, from the hypothesis that these bad design practices may impact several QoS metrics such as the response time. Furthermore, the source code metrics of services may not be always available. Without the consideration of these QoS metrics, the current detection processes of antipatterns will still lack the integration of symptoms that could be extracted from the usage of services. In this paper, we propose an automated approach to generate Web service defect detection rules that consider not only the code/interface level metrics but also the quality of service attributes. Through multi-objective optimization, the proposed approach generates solutions (detection rules) that maximize the coverage of antipattern examples and minimize the coverage of well-designed service examples. An empirical validation is performed with eight different common types of Web design defects to evaluate our approach. We compared our results with three other state of the art techniques which are not using QoS metrics. The statistical analysis of the obtained results confirm that our approach outperforms other techniques and generates detection rules that are more meaningful from the services' user perspective.},
  keywords={},
  doi={10.1109/ICWS.2017.126},
  ISSN={},
  month={June},}@INPROCEEDINGS{9369609,
  author={Heideker, Alexandre and Kamienski, Carlos},
  booktitle={2021 IEEE 18th Annual Consumer Communications & Networking Conference (CCNC)}, 
  title={Towards a Network Queuing Assessment for Elasticity Management of Virtualized Services}, 
  year={2021},
  volume={},
  number={},
  pages={1-6},
  abstract={With the increasing adoption of cloud computing, microservice architecture, and network function virtualization (NFV), addressing scalability and elasticity management becomes essential. The high demand for these services challenges the research community to create new automated management techniques, from which an essential part is the detection of bottlenecks in infrastructures and application boxes. The traditional approach based on hardware resource metrics (CPU and RAM) is the most straightforward strategy, providing independence from particular applications but may not capture the application's behavior in terms of workload variations. On the other hand, using an application-oriented approach provides a significant correlation with the end-user quality of experience but needs to be tailored for each case. We propose the Network Queuing Assessment (NQA) that breaks away with this tradeoff, capturing the application's workload variations and providing a significant correlation with the end-user quality of experience. Also, similarly to CPU and RAM, it is independent of particular applications. Our performance analysis results for CPU, RAM, and NQA metrics using virtualized applications and network functions in a cloud environment confirm this approach's usefulness.},
  keywords={},
  doi={10.1109/CCNC49032.2021.9369609},
  ISSN={2331-9860},
  month={Jan},}@INPROCEEDINGS{8704556,
  author={Alvarez Q., Juan M. and Sanabria O., John A. and Garcia M., Jose I},
  booktitle={2019 IEEE Latin American Test Symposium (LATS)}, 
  title={Microservices-based architecture for fault diagnosis in tele-rehabilitation equipment operated via Internet}, 
  year={2019},
  volume={},
  number={},
  pages={1-6},
  abstract={This paper presents the design of a microservices based architecture allows early fault detection and diagnosis on a remote controlled physical rehabilitation machine using the Internet as a communication channel. Aforementioned architecture is composed of three layers: the low layer which collects variables from the rehabilitation machine components, using Internet of Things protocols. The middle layer which analyses the provided variables and diagnoses the component status, using fuzzy logic. And finally, the upper layer which makes decisions depending on the diagnosis data. The proposed architecture is suitable for heterogeneous systems.This paper also shows how this architecture fulfills the specific and rigorous safety measures for critical mission devices like technical aids for health-care.},
  keywords={},
  doi={10.1109/LATW.2019.8704556},
  ISSN={2373-0862},
  month={March},}@INPROCEEDINGS{6966260,
  author={Gomathy, C. K. and Rajalakshmi, S.},
  booktitle={Second International Conference on Current Trends In Engineering and Technology - ICCTET 2014}, 
  title={A software quality metric performance of professional management in service oriented architecture}, 
  year={2014},
  volume={},
  number={},
  pages={41-47},
  abstract={Service-oriented architecture (SOA) is generally the way of containing and examines to develop the information management needs in order to make dealing responsive and elastic in pace with forceful quality conditions. Adopting, implementing and running SOA require considerable thought and effort in order to distribute high-quality metrics data and become conscious the complete assessment of SOA. In this paper, inspect the sequentially and quality related metrics issues that have been investigated organizations in order to uncover the activities in regard to information quality within their initiatives of implementing SOA. In the succession of quality behavior that solve certain information quality and maintenance, development issues therefore, can be enthusiastically established across any industry to support the building of high quality and then making SOA solutions. In current days service oriented architecture design is also incorporated and potentially distributed with the quality metrics and to perform a superior evaluation of the representation.},
  keywords={},
  doi={10.1109/ICCTET.2014.6966260},
  ISSN={},
  month={July},}@INPROCEEDINGS{8818401,
  author={Yu, Guangba and Chen, Pengfei and Zheng, Zibin},
  booktitle={2019 IEEE International Conference on Web Services (ICWS)}, 
  title={Microscaler: Automatic Scaling for Microservices with an Online Learning Approach}, 
  year={2019},
  volume={},
  number={},
  pages={68-75},
  abstract={Recently, the microservice becomes a popular architecture to construct cloud native systems due to its agility. In cloud native systems, autoscaling is a core enabling technique to adapt to workload changes by scaling out/in. However, it becomes a challenging problem in a microservice system, since such a system usually comprises a large number of different micro services with complex interactions. When bursty and unpredictable workloads arrive, it is difficult to pinpoint the scaling-needed services which need to scale and evaluate how much resource they need. In this paper, we present a novel system named Microscaler to automatically identify the scaling-needed services and scale them to meet the service level agreement (SLA) with an optimal cost for micro-service systems. Microscaler collects the quality of service metrics (QoS) with the help of the service mesh enabled infrastructure. Then, it determines the under-provisioning or over-provisioning services with a novel criterion named service power. By combining an online learning approach and a step-by-step heuristic approach, Microscaler could achieve the optimal service scale satisfying the SLA requirements. The experimental evaluations in a micro-service benchmark show that Microscaler converges to the optimal service scale faster than several state-of-the-art methods.},
  keywords={},
  doi={10.1109/ICWS.2019.00023},
  ISSN={},
  month={July},}@INPROCEEDINGS{9407977,
  author={Tummalapalli, Sahithi and Kumar, Lov and Neti, Lalita Bhanu Murthy and Krishna, Aneesh},
  booktitle={2020 IEEE 22nd International Conference on High Performance Computing and Communications; IEEE 18th International Conference on Smart City; IEEE 6th International Conference on Data Science and Systems (HPCC/SmartCity/DSS)}, 
  title={An Empirical Analysis on the Role of WSDL Metrics in Web Service Anti-Pattern Prediction}, 
  year={2020},
  volume={},
  number={},
  pages={559-564},
  abstract={Service-Oriented Architecture (SOA) is one of the most well-known models for designing web systems. SOA system evolution and maintenance is challenging because of its distributive nature and secondly due to the demand of designing high-quality, stable interfaces. This evolution leads to a problem called Anti-patterns in web services. It is observed that these anti-patterns negatively impact the evolution and maintenance of software systems, making the early detection and correction of them a primary concern for the software developers. The primary motivation of this work is to investigate the relationship between the Web Service Description Language(WSDL) metrics and anti-patterns in web services. This research aims to develop an automatic method for the detection of web service anti-patterns. The core idea of the methodology defined is to identify the most crucial WSDL metrics with the association of various feature selection techniques for the prediction of anti-patterns. Experimental results show that the model developed by using all the WSDL quantity metrics(AM) shows a bit high performance compared to the models developed with the other metric sets. Experimental results also showed that the performance of the models generated using Decision Tree(DT) and Major Voting Ensemble(MVE) is high compared to the models generated using other classifier techniques.},
  keywords={},
  doi={10.1109/HPCC-SmartCity-DSS50907.2020.00070},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{8035019,
  author={Alnahdi, Amany and Liu, Shih-Hsi},
  booktitle={2017 IEEE International Conference on Services Computing (SCC)}, 
  title={Identifying Characteristic Attributes for Estimating Cost of Service in Service Oriented Architecture}, 
  year={2017},
  volume={},
  number={},
  pages={467-470},
  abstract={Web services are software modules that provide interoperability over a network. Web services provide Web service users platform independence while using software. It enables businesses to collaborate by using Web services from Web service providers. Estimating a Cost of Service (CoS) is essential when pricing, selecting, and monitoring a Web service. The concept of cost is not restricted to financial value of technology hardware and software. The cost concept can also include time, usability, and maintenance. Cost of a Web service can be estimated by identifying the attributes of cost from the perspective of different stakeholders such as Web service provider, Web service consumer, Web service repository moderator, and Web service policy maker. In addition, analyzing different roles in Service Oriented Architecture (SOA) will further provide more knowledge about different perspectives of cost concepts in SOA. This paper addresses the essential attributes of estimating cost of a Web service. Moreover, this paper specifies attributes of measuring CoS, defines these attributes, and defines metrics and units of these attributes. Additionally, it provides further hierarchy classification of Web service cost concepts. It also provides a model for evaluating Web service cost based on different cost criteria. By measuring CoS, Web service stakeholders will be able to estimate an accurate value to the CoS.},
  keywords={},
  doi={10.1109/SCC.2017.66},
  ISSN={2474-2473},
  month={June},}@INPROCEEDINGS{8786277,
  author={Delgado, Andrea},
  booktitle={2018 XLIV Latin American Computer Conference (CLEI)}, 
  title={Monitoring and Analyzing Service Execution from Business Processes: An AXIS Extension}, 
  year={2018},
  volume={},
  number={},
  pages={582-589},
  abstract={Implementing Business Processes (BPs) with services (and microservices) is nowadays the main way to support the execution of automated activities in processes, both within the organization itself, and externally interacting with customers, suppliers and other participants. In order to do so, it is important not only to model and implement services but also to define Quality of Service (QoS) characteristics for services, to monitor and evaluate their execution. Although there are many proposals for services monitoring and evaluation from the services point of view, there are not many from the BPs perspective. In this paper we present a reference architecture for service monitoring tools, along with a prototype implementation as an extension of the web services execution environment AXIS2. We show that existing service measures and new ones can be defined into the monitor to collect execution data and relate this data with BPs execution, to measure BPs and service execution in an integrated manner.},
  keywords={},
  doi={10.1109/CLEI.2018.00075},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{9307705,
  author={Camilli, Matteo and Colarusso, Carmine and Russo, Barbara and Zimeo, Eugenio},
  booktitle={2020 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, 
  title={Domain Metric Driven Decomposition of Data-Intensive Applications}, 
  year={2020},
  volume={},
  number={},
  pages={189-196},
  abstract={The microservices architectural style is picking up more and more momentum in IT industry for the development of systems as loosely coupled, collaborating services. Companies that undergo the migration of their own applications have aspirations such as increasing maintainability and the scale of operation. Such a process is worthwhile but not easy, since it should ensure atomic improvements to the overall architecture for each migration step. Furthermore, the systematic evaluation of migration steps becomes cumbersome without sensible optimization metrics that take into account performance and scalability under expected operational conditions. Recent lines of research recognize this task as challenging, especially in data-intensive applications where known approaches based, for instance, on Domain Driven Design may not be adequate. In this paper, we introduce an approach to evaluate a migration in an iterative way and recognize whether it represents an improvement in terms of performance and scalability. The approach leverages a Domain Metric-based analysis to quantitatively evaluate alternative architectures. We exemplified the envisioned approach on a data-intensive application case study in the domain of smart mobility. Preliminary results from our controlled experiments show the effectiveness of our approach to support systematic and automated evaluation of migration processes.},
  keywords={},
  doi={10.1109/ISSREW51248.2020.00071},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{8986987,
  author={Tripathi, Manish K and Chaubisa, Divyanshu and Kumar, Lov and Murthy Neti, Lalita Bhanu},
  booktitle={2018 15th IEEE India Council International Conference (INDICON)}, 
  title={Prediction of Quality of Service Parameters Using Aggregate Software Metrics and Machine Learning Techniques}, 
  year={2018},
  volume={},
  number={},
  pages={1-6},
  abstract={In todays Service-Oriented Architecture (SOA) world, software systems are built by composing web services offered by Service Providers (SPs). There are different SPs offering services for the same set of functional requirements. Service providers are expected to be highly competitive in their offerings to enhance their market. The quality of web services is an important factor that differentiates one service provider from another. Twelve parameters are identified by which quality of service can be measured. The prediction of these twelve QoS parameters help SPs to enhance the quality of their service. Each web service is realized by several programming files. CK and object oriented metrics of the underlying Java files of the web services are important features for predicting QoS parameters of the web service. The aggregated measure, mean, is chosen to be a feature in predicting the QoS parameters in earlier studies. We propose to build prediction models using 16 aggregate measures and show that there is significant difference between these aggregate measures. We find best feature subset using six feature selection techniques and build prediction models using Extreme Learning Machines with different kernels. We show that feature selection techniques might not enhance prediction accuracies and the ensemble algorithm out performs other learning algorithms.},
  keywords={},
  doi={10.1109/INDICON45594.2018.8986987},
  ISSN={2325-9418},
  month={Dec},}@INPROCEEDINGS{8767397,
  author={White, Gary and Palade, Andrei and Cabrera, Christian and Clarke, Siobhán},
  booktitle={2019 IEEE International Conference on Pervasive Computing and Communications (PerCom}, 
  title={Autoencoders for QoS Prediction at the Edge}, 
  year={2019},
  volume={},
  number={},
  pages={1-9},
  abstract={In service-oriented architectures, collaborative filtering is a key technique for service recommendation based on QoS prediction. Matrix factorisation has emerged as one of the main approaches for collaborative filtering as it can handle sparse matrices and produces good prediction accuracy. However, this process is resource-intensive and training must take place in the cloud, which can lead to a number of issues for user privacy and being able to update the model with new QoS information. Due to the time-varying nature of QoS it is essential to update the QoS prediction model to ensure that it is using the most recent values to maintain prediction accuracy. The request time, which is the time for a middleware to submit a user's information and receive QoS metrics for a candidate services is also important due to the limited time during dynamic service adaptations to choose suitable replacement services. In this paper we propose a stacked autoencoder with dropout on a deep edge architecture and show how this can be used to reduce training and request time compared to traditional matrix factorisation algorithms, while maintaining predictive accuracy. To evaluate the accuracy of the algorithms we compare the actual and predicted QoS values using standard error metrics such as MAE and RMSE. In addition, we propose an alternative evaluation technique using the predictions as part of a service composition and measuring the impact that the predictions have on the response time and throughput of the final composition. This more clearly shows the direct impact that these algorithms will have in practice.},
  keywords={},
  doi={10.1109/PERCOM.2019.8767397},
  ISSN={2474-249X},
  month={March},}@INPROCEEDINGS{7434265,
  author={Bora, Abhijit and Bezboruah, Tulshi},
  booktitle={2015 IEEE International Conference on Research in Computational Intelligence and Communication Networks (ICRCICN)}, 
  title={Some aspects of QoS for interoperability of multi service multi functional service oriented computing}, 
  year={2015},
  volume={},
  number={},
  pages={363-368},
  abstract={Quality of service is the key indicator for service oriented architectures, because it directly expresses the operability and computational nature of the system. As such, we propose a quality evaluation framework for multi service multi functional hierarchical SOAP based web service. The overall interoperable quality is evaluated through load testing using Mercury Load Runner with Apache Tomcat web server and MySQL database engine. The recorded quality metrics are analyzed statistically. We present here in detail the architecture, observed metrics and analyzed results of the service oriented computing to validate the acceptability of the evaluation framework.},
  keywords={},
  doi={10.1109/ICRCICN.2015.7434265},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8539382,
  author={Park, Youngki and Yang, Hyunsik and Kim, Younghan},
  booktitle={2018 International Conference on Information and Communication Technology Convergence (ICTC)}, 
  title={Performance Analysis of CNI (Container Networking Interface) based Container Network}, 
  year={2018},
  volume={},
  number={},
  pages={248-250},
  abstract={The increasing significance of lightweight cloud infrastructure for microservices cannot be overstated. This has led many researchers to propose container based virtualized computing services. Specifically, for networks, Container Networking Interface technologies are proposed to connect heterogeneous network services between virtual-machine based clouds and containers. In order to improve network performance of cloud systems, a comparison with detailed design and performance verification of network configuration using CNI technologies is required. In this paper, centering on various CNI technologies, we designed network architectures with OpenStack cloud platform and Kubernetes container management environment, and subsequently measured network performance for each design. The results of the evaluation are useful to provide guidelines for containerized cloud system deployment.},
  keywords={},
  doi={10.1109/ICTC.2018.8539382},
  ISSN={2162-1233},
  month={Oct},}@INPROCEEDINGS{9272016,
  author={Liu, Bo and Betancourt, Victor Pazmino and Zhu, Yimeng and Becker, Jürgen},
  booktitle={2020 IEEE International Symposium on Systems Engineering (ISSE)}, 
  title={Towards an On-Demand Redundancy Concept for Autonomous Vehicle Functions using Microservice Architecture}, 
  year={2020},
  volume={},
  number={},
  pages={1-5},
  abstract={More and more functionalities will be deployed on heterogeneous devices in the vehicle for future autonomous driving. These devices will be connected not only within the vehicle but also to the internet to receive information or consume services provided by other vehicles or road-side units. Even some functions could be offloaded to the cloud infrastructure. However, this high connectivity also means more cyber-security issues for future autonomous driving cars. As cyber-attacks become a more serious issue for the future automotive industry, keeping high availability of safety-critical and non-safety-critical vehicle functions when connected devices in the vehicle are being attacked is an important and challenging task. In this paper, we propose an on-demand redundancy concept to get high availability for autonomous vehicle functions using microservice architecture and container technology. We implemented the concept of embedded devices and showed the feasibility of this concept. The results showed that redundancy could be setup dynamically for non-safety-critical vehicle functions in a cost-effective manner using the proposed approach. This approach could be taken as a security measure while certain devices are being attacked, and the system could continue working without being influenced.},
  keywords={},
  doi={10.1109/ISSE49799.2020.9272016},
  ISSN={2687-8828},
  month={Oct},}@INPROCEEDINGS{9279887,
  author={Băjenaru, Lidia and Dobre, Ciprian and Ciobanu, Radu-Ioan and Dedu, Georgiana and Pantelimon, Silviu-George and Marinescu, Ion Alexandru and Gavrilă, Veronica},
  booktitle={2020 International Conference on e-Health and Bioengineering (EHB)}, 
  title={Depth-based Human Activity Recognition: vINCI Case Study}, 
  year={2020},
  volume={},
  number={},
  pages={1-4},
  abstract={The growing aging of the world's population is leading to the need to take assistance measures and prepare health care systems for the elderly. The innovative vINCI system provides technologies and uses smart devices that can noninvasively monitor the activity of elderly, to intervene in case of alerts, to prevent possible health problems, such as falling, in the same time to keep their life independent and to improve their quality of life. Monitoring physical activity of the elderly with the help of smart cameras is important in identifying one of the most important lifestyle risk factors for many chronic conditions in the older age. In this paper there are presented the microservice-based vINCI architecture and how an Orbbec Persee camera is used to monitor the physical activity as well as to recognize the elderly. The advantages of the monitoring physical activity application consist in detecting a low level of activity or detecting health problems allowing intervention and correction of an unhealthy lifestyle.},
  keywords={},
  doi={10.1109/EHB50910.2020.9279887},
  ISSN={2575-5145},
  month={Oct},}@INPROCEEDINGS{9628475,
  author={de Faria, Brenno Tondato and Aguzzi, Cristiano and Bates, Travis and Campbell, Colin and Tomei, Fausto and Bittelli, Marco and Roffia, Luca},
  booktitle={2021 IEEE International Workshop on Metrology for Agriculture and Forestry (MetroAgriFor)}, 
  title={Predict soil moisture into the future: on the integration of CRITERIA-1D into ZENTRA cloud}, 
  year={2021},
  volume={},
  number={},
  pages={331-335},
  abstract={This paper presents a case of study of a IoT cloud plat-form composed of a microservices architecture that has been developed to integrate the CRITERIA-1D into the ZENTRA cloud. CRITERIA-1D is an open-source agro-hydrological model developed by ARPAE simulating one-dimensional soil water fluxes, crop development, and crop water needs. CRITERIA-1D comes with a default set of crops and soils that can be used or tuned for a specific scenarios. Taking as input the weather forecasts (i.e., temperatures and precipitations), the model can be used to predict the soil water content and soil water potential at different depths. Along with the design of the implemented solution, this paper presents the process of tuning crop and soil parameters for a specific use case. The results show that the tuned model estimates very well with respect to the measures observed by sensors, paving the way to its application within the larger context of the METER’s ZENTRA cloud.},
  keywords={},
  doi={10.1109/MetroAgriFor52389.2021.9628475},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{7062707,
  author={Nuraini, Aminah and Widyani, Yani},
  booktitle={2014 International Conference on Data and Software Engineering (ICODSE)}, 
  title={Software with service oriented architecture quality assessment}, 
  year={2014},
  volume={},
  number={},
  pages={1-6},
  abstract={Service Oriented Architecture (SOA) is becoming popular since its flexibility fulfill the need of rapidly changing enterprise requirement. Therefore, expectation of a good quality software with SOA is getting higher. To address this need, this paper presents a guideline to conduct quality assessment using an existing tool. The quality assessment model is designed by selecting the relevant quality factors, choosing an appropriate quality to metric mapping method, identifying the relevant metrics, and mapping each quality factor to the metrics. Using the model, the quality assessment process is prepared by identifying data and selecting the appropriate tools. The chosen tool may require some modification. The proposed quality assessment guideline can help the software quality assurance team to assess quality of their software with SOA. The proposed guideline has been used to assess the quality of an existing sofware with SOA (Bonita BPM). The result is considered as promising, although several improvement are still needed.},
  keywords={},
  doi={10.1109/ICODSE.2014.7062707},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8622058,
  author={Streiffer, Christopher and Raghavendra, Ramya and Benson, Theophilus and Srivatsa, Mudhakar},
  booktitle={2018 IEEE International Conference on Big Data (Big Data)}, 
  title={Learning to Simplify Distributed Systems Management}, 
  year={2018},
  volume={},
  number={},
  pages={1837-1845},
  abstract={Managing large-scale distributed systems is a difficult task. System administrators are responsible for the upkeep and maintenance of numerous components with complex dependencies. With the shift to microservices-based architectures, these systems can consist of 100s to 1000s of interconnected nodes. To combat this difficulty, administrators rely on analyzing logs and metrics collected from the different services. However, the number of available metrics for large systems presents complexity and scaling issues. To combat these issues, we present Minerva, an unsupervised Machine Learning (ML) framework for performing network diagnosis analysis. Minerva is composed of a multi-stage pipeline, where each component can act individually or cohesively to perform various management tasks. Our system offers a unified and extensible framework for managing the complexity of large networks, and presents administrators with a swiss-army knife for diagnosing the overall health of their systems. To demonstrate the feasibility of Minerva, we evaluate its performance on a production-scale system. We present use cases for the various management tools made available by Minerva, and show how these tools can be used to make strong inferences about the system using unsupervised techniques.},
  keywords={},
  doi={10.1109/BigData.2018.8622058},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{9453517,
  author={Lennick, David and Azim, Akramul and Liscano, Ramiro},
  booktitle={2021 22nd IEEE International Conference on Industrial Technology (ICIT)}, 
  title={A Microservice-Based Architecture for Performance and Energy Benchmarking of Docker-Host Linux Distributions on Internet-of-Things Devices}, 
  year={2021},
  volume={1},
  number={},
  pages={705-711},
  abstract={Containers are rapidly being adopted in several areas of the information technology industry. A major area is edge and embedded Internet-of-Things systems. In this paper, we present a microservice-based architecture for performance analysis and energy consumption of Internet-of-Things "Docker host" Linux distributions. Our methodology builds on previous container benchmarking work, with analysis of performance metrics such as processing, memory, and disk throughput. Furthermore, our methodology introduces container-engine performance metrics related to container lifecycle operations, and concurrent container performance. We demonstrate by comparing four Linux distributions in this domain: BalenaOS, HypriotOS, RancherOS, and Raspbian Lite. All source code is provided.},
  keywords={},
  doi={10.1109/ICIT46573.2021.9453517},
  ISSN={},
  month={March},}@INPROCEEDINGS{7019405,
  author={Deepiga A S and Senthil Velan S and Babu, Chitra},
  booktitle={2014 IEEE International Conference on Advanced Communications, Control and Computing Technologies}, 
  title={Empirical investigation of introducing Aspect Oriented Programming across versions of an SOA application}, 
  year={2014},
  volume={},
  number={},
  pages={1732-1739},
  abstract={Service Oriented Architecture (SOA) is an architectural style used to provide services to consumers that promotes loose coupling between services. The scattered and tangled functionalities modeled in an SOA application can be redesigned using Aspect Oriented Programming (AOP). This results in two sets of services, the first set having services for the base functionalities and the other modeling cross-cutting functionalities. During compilation, cross-cutting functionalities in the second set are woven to the functionalities modeled in the first set. By introducing AOP in SOA, the quality attributes such as re-usability, extendibility and maintainability can be improved. The objective of this paper is to perform an empirical investigation by quantitatively measuring the effect of introducing Aspect Orientation (AO) in SOA by developing with multiple versions of a given application. An AO based SOA application (University Automation System) for automating the functionalities of a typical University with multiple versions has been developed as an experimental test bed. An equivalent set of versions without introducing aspectization are also developed in parallel. The values of the AOP metrics are measured for the different versions of University Automation System both aspectized and unaspectized. The measured values show that the quality attributes namely maintainability, reusability and extendibility improve whereas the complexity of the application decreases during the evolution of the case study application.},
  keywords={},
  doi={10.1109/ICACCCT.2014.7019405},
  ISSN={},
  month={May},}@INPROCEEDINGS{6830891,
  author={Alzahmi, Salwa Mohamed and Abu-Matar, Mohammad and Mizouni, Rabeb},
  booktitle={2014 IEEE 8th International Symposium on Service Oriented System Engineering}, 
  title={A Practical Tool for Automating Service Oriented Software Product Lines Derivation}, 
  year={2014},
  volume={},
  number={},
  pages={90-97},
  abstract={Service Oriented Architecture (SOA) is a business driven architecture that supports business strategies and goals. In enterprise systems, it offers flexibility for building IT solutions that can respond rapidly to changing business requirements and technology. The success of a service-oriented application implementation is measured by the level of flexibility, extendibility and customization in the provided services. In effect, it raises variability management concerns that require a good understanding of the business domain and a careful design of the application artifacts to cater for various service consumers' demands and requirements. Many approaches and frameworks have been proposed to realize variability in SOA by applying the concept of Software Product Lines (SPL) where services are the core assets and each member of the service-oriented product line is a possible assembly of those services. However, there are few tools that support these approaches and ease the derivation process of member applications taking into consideration the variability from different perspectives. In this paper we present a tool that facilitates the automatic derivation of SOA applications based on Model Driven Engineering (MDE) as an implementation methodology. The tool is based on the Multiple-Views Service-Oriented Product Line Variability approach. The tool architecture as well as its implemented modules is first described. Then, an example in the e-health domain is presented.},
  keywords={},
  doi={10.1109/SOSE.2014.16},
  ISSN={},
  month={April},}@INPROCEEDINGS{8009904,
  author={Arcuri, Andrea},
  booktitle={2017 IEEE International Conference on Software Quality, Reliability and Security (QRS)}, 
  title={RESTful API Automated Test Case Generation}, 
  year={2017},
  volume={},
  number={},
  pages={9-20},
  abstract={Nowadays, web services play a major role in the development of enterprise applications. Many such applications are now developed using a service-oriented architecture (SOA), where microservices is one of its most popular kind. A RESTful web service will provide data via an API over the network using HTTP, possibly interacting with databases and other web services. Testing a RESTful API poses challenges, as inputs/outputs are sequences of HTTP requests/responses to a remote server. Many approaches in the literature do black-box testing, as the tested API is a remote service whose code is not available. In this paper, we consider testing from the point of view of the developers, which do have full access to the code that they are writing. Therefore, we propose a fully automated white-box testing approach, where test cases are automatically generated using an evolutionary algorithm. Tests are rewarded based on code coverage and fault finding metrics. We implemented our technique in a tool called EVOMASTER, which is open-source. Experiments on two open-source, yet non-trivial RESTful services and an industrial one, do show that our novel technique did automatically find 38 real bugs in those applications. However, obtained code coverage is lower than the one achieved by the manually written test suites already existing in those services. Research directions on how to further improve such approach are therefore discussed.},
  keywords={},
  doi={10.1109/QRS.2017.11},
  ISSN={},
  month={July},}@INPROCEEDINGS{8595113,
  author={Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
  booktitle={2018 IEEE/ACM International Conference on Technical Debt (TechDebt)}, 
  title={Limiting Technical Debt with Maintainability Assurance – An Industry Survey on Used Techniques and Differences with Service- and Microservice-Based Systems}, 
  year={2018},
  volume={},
  number={},
  pages={125-133},
  abstract={Maintainability assurance techniques are used to control this quality attribute and limit the accumulation of potentially unknown technical debt. Since the industry state of practice and especially the handling of Service-and Microservice-Based Systems in this regard are not well covered in scientific literature, we created a survey to gather evidence for a) used processes, tools, and metrics in the industry, b) maintainability-related treatment of systems based on service-orientation, and c) influences on developer satisfaction w.r.t. maintainability. 60 software professionals responded to our online questionnaire. The results indicate that using explicit and systematic techniques has benefits for maintainability. The more sophisticated the applied methods the more satisfied participants were with the maintainability of their software while no link to a hindrance in productivity could be established. Other important findings were the absence of architecture-level evolvability control mechanisms as well as a significant neglect of service-oriented particularities for quality assurance. The results suggest that industry has to improve its quality control in these regards to avoid problems with long-living service-based software systems.},
  keywords={},
  doi={},
  ISSN={},
  month={May},}@ARTICLE{9285284,
  author={Rumez, Marcel and Grimm, Daniel and Kriesten, Reiner and Sax, Eric},
  journal={IEEE Access}, 
  title={An Overview of Automotive Service-Oriented Architectures and Implications for Security Countermeasures}, 
  year={2020},
  volume={8},
  number={},
  pages={221852-221870},
  abstract={New requirements from the customers' and manufacturers' point of view such as adding new software functions during the product life cycle require a transformed architecture design for future vehicles. The paradigm of signal-oriented communication established for many years will increasingly be replaced by service-oriented approaches in order to increase the update and upgrade capability. In this article, we provide an overview of current protocols and communication patterns for automotive architectures based on the service-oriented architecture (SOA) paradigm and compare them with signal-oriented approaches. Resulting challenges and opportunities of SOAs with respect to information security are outlined and discussed. For this purpose, we explain different security countermeasures and present a state of the section of automotive approaches in the fields of firewalls, Intrusion Detection Systems (IDSs) and Identity and Access Management (IAM). Our final discussion is based on an exemplary hybrid architecture (signal- and service-oriented) and examines the adaptation of existing security measures as well as their specific security features.},
  keywords={},
  doi={10.1109/ACCESS.2020.3043070},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{7959309,
  author={Zavvar, Mohammad and Garavand, Shole and Sabbagh, Esmaeel and Rezaei, Meysam and Khalili, Hajar and Zavvar, Mohammad Hossein and Motameni, Homayun},
  booktitle={2017 3th International Conference on Web Research (ICWR)}, 
  title={Measuring service quality in service-oriented architectures using a hybrid particle swarm optimization algorithm and artificial neural network (PSO-ANN)}, 
  year={2017},
  volume={},
  number={},
  pages={78-83},
  abstract={Web service combination is an important task performed in different phases of the service-oriented architecture lifecycle. Measuring service quality based on the non-functional characteristics is an exceedingly difficult task. Therefore, this paper presents a Multilayer Perceptron Artificial Neural Network (MLPANN) to provide a method for measuring quality of service in a service-oriented architecture. To improve network performance, Particle Swarm Optimization (PSO) is used to optimize the weights of the network. Finally, our results are compared to those of a combination of Different Evolution (DE) algorithm and MLPANN in terms of Mean Square Error (MSE), Root Mean Square Error (RMSE) and Standard Deviation (STD). The results demonstrate the superiority of the proposed method.},
  keywords={},
  doi={10.1109/ICWR.2017.7959309},
  ISSN={},
  month={April},}@INPROCEEDINGS{9628703,
  author={du Plessis, Shani and Correia, Noélia},
  booktitle={2021 IEEE International Conference on Internet of Things and Intelligence Systems (IoTaIS)}, 
  title={A Comparative Study of Software Architectures in Constrained Device IoT Deployments}, 
  year={2021},
  volume={},
  number={},
  pages={35-41},
  abstract={The Internet of Things (IoT) is an area that has consistently seen growth and development and will no doubt continue to do so. One group of IoT devices - constrained devices - has seen significant developments in recent years. With the advent of constrained devices in almost every area of life, e.g. industrial, leisure and medical, this group of devices is well worth studying. Clearly, resource management is a critical aspect to ensure optimal use of such devices. A number of factors can have a significant impact on resource management, such as the operating system and the software architecture.This study aimed to compare the power consumption, runtime performance and memory consumption of two software architectures: microservices and monolithic. The study was conducted using a constrained device, and to ensure that the results are not language-specific, three different programming languages were used: Go, Python and C++. It was found that, for smallscale applications, the monolithic architecture performed better across most metrics. These results may provide valuable insights to engineers for the design and implementation of constrained-device IoT applications. It was recommended that additional research be conducted on larger-scale applications.},
  keywords={},
  doi={10.1109/IoTaIS53735.2021.9628703},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8638056,
  author={Ahmed, Abdelmuttlib Ibrahim Abdalla and Khan, Suleman and Gani, Abdullah and Hamid, Siti Hafizah Ab and Guizani, Mohsen},
  booktitle={2018 IEEE 43rd Conference on Local Computer Networks (LCN)}, 
  title={Entropy-based Fuzzy AHP Model for Trustworthy Service Provider Selection in Internet of Things}, 
  year={2018},
  volume={},
  number={},
  pages={606-613},
  abstract={Nowadays, trust and reputation models are used to build a wide range of trust-based security mechanisms and trust-based service management applications on the Internet of Things (IoT). Considering trust as a single unit can result in missing important and significant factors. We split trust into its building-blocks, then we sort and assign weight to these building-blocks (trust metrics) on the basis of its priorities for the transaction context of a particular goal. To perform these processes, we consider trust as a multi-criteria decision-making problem, where a set of trust worthiness metrics represent the decision criteria. We introduce Entropy-based fuzzy analytic hierarchy process (EFAHP) as a trust model for selecting a trustworthy service provider, since the sense of decision making regarding multi-metrics trust is structural. EFAHP gives 1) fuzziness, which fits the vagueness, uncertainty, and subjectivity of trust attributes; 2) AHP, which is a systematic way for making decisions in complex multi-criteria decision making; and 3) entropy concept, which is utilized to calculate the aggregate weights for each service provider. We present a numerical illustration in trust-based Service Oriented Architecture in the IoT (SOA-IoT) to demonstrate the service provider selection using the EFAHP Model in assessing and aggregating the trust scores.},
  keywords={},
  doi={10.1109/LCN.2018.8638056},
  ISSN={0742-1303},
  month={Oct},}@ARTICLE{6812231,
  author={Hertis, Matej and Juric, Matjaz B.},
  journal={IEEE Transactions on Software Engineering}, 
  title={An Empirical Analysis of Business Process Execution Language Usage}, 
  year={2014},
  volume={40},
  number={8},
  pages={738-757},
  abstract={The current state of executable business process languages allows for and demands optimization of design practices and specifications. In this paper, we present the first empirical study that analyses Web Services Business Process Execution Language (WS-BPEL or BPEL) usage and characteristics of real world executable business processes. We have analysed 1,145 BPEL processes by measuring activity usage and process complexity. In addition, we investigated the occurrence of activity usage patterns. The results revealed that the usage frequency of BPEL activities varies and that some activities have a strong co-occurrence. BPEL activities often appear in activity patterns that are repeated in multiple processes. Furthermore, the current process complexity metrics have proved to be inadequate for measuring BPEL process complexity. The empirical results provide fundamental knowledge on how BPEL specification and process design practices can be improved. We propose BPEL design guidelines and BPEL language improvements for the design of more understandable and less complex processes. The results are of interest to business process language designers, business process tool developers, business process designers and developers, and software engineering researchers, and contribute to the general understanding of BPEL and service-oriented architecture.},
  keywords={},
  doi={10.1109/TSE.2014.2322618},
  ISSN={1939-3520},
  month={Aug},}@INPROCEEDINGS{8536110,
  author={Langermeier, Melanie and Bauer, Bernhard},
  booktitle={2018 IEEE 22nd International Enterprise Distributed Object Computing Workshop (EDOCW)}, 
  title={A Model-Based Method for the Evaluation of Project Proposal Compliance within EA Planning}, 
  year={2018},
  volume={},
  number={},
  pages={97-106},
  abstract={The business model and IT infrastructure of organizations is continually changing. Trends like microservices and digital transformation demand an adaption of the business models and IT infrastructure in order to stay competitive. It is important to ensure the compliance of these new projects with the current goals and principles. The discipline of Enterprise Architecture Planning provides methods for the structured development of the business and IT of an organization. In this paper we propose a tool-supported method for EA planning to evaluate to the project compliance based on established models. Different analyses are used to support the architect during project planning. Gap and impact analysis are used to ensure the change consistency. The compliance with the current strategy is finally evaluated with view generation and metric calculation. Foundation of the method is a generic generic analysis architecture execution environment (A2E), that provides us with the required flexibility to adapt to different needs and meta models. The method and the proposed analyses are evaluated within a case study from a medium-sized software product company.},
  keywords={},
  doi={10.1109/EDOCW.2018.00024},
  ISSN={2325-6605},
  month={Oct},}@INPROCEEDINGS{9150502,
  author={Mahajan, Yash and Krishnaswamy, Dilip and Chelliah, Pethuru Raj},
  booktitle={2020 IEEE Conference on Technologies for Sustainability (SusTech)}, 
  title={MiSA - A System for a Microlending Service to Assist Edge Communities}, 
  year={2020},
  volume={},
  number={},
  pages={1-8},
  abstract={In this paper, we propose a distributed edge+cloud system to assist with microlending services to communities, with machine learning catered to that specific community. A combination of technologies including microservices-based architecture and blockchain technology coupled with machine learning is utilized to provide microfinancing services to help sustain businesses in a local community, and to enable the community to grow into a thriving economy. To minimize the widespread expressed risk, in our prototype, the prediction of whether a loan will default or not is based on the various decision-enabling parameters and on any available information about the borrowers' past transaction as well as aggregate metrics related to the community that the borrower resides in. The authors hope that the suggested distributed edge+cloud architecture in the paper can be leveraged for other emerging sustainable edge applications as well.},
  keywords={},
  doi={10.1109/SusTech47890.2020.9150502},
  ISSN={},
  month={April},}@INPROCEEDINGS{8705779,
  author={Afwani, Royana and Irmawati, Budi and Jatmika, Andy Hidayat and Agitha, Nadiyasari},
  booktitle={2018 5th International Conference on Data and Software Engineering (ICoDSE)}, 
  title={Specialized Mobile Health Design Using the Open Group Architecture Framework (TOGAF): A Case Study in Child and Maternity Health Services Organization}, 
  year={2018},
  volume={},
  number={},
  pages={1-6},
  abstract={Mobile health applications are well known effective to provide education materials, receive personalized prompts, as a reminder system, and also create great impacts as early diagnose system and even facilitate a doctor to recommend treatments for patients in rural area as well as in the disaster area. E-health projects failed with the major problem was “no clear definition of the system requirements”. Another challenge for health organization that have specialized units are flexibility, easily expandable, and sustainability information system architecture to be integrated. Therefore, providing a good architecture design for build mobile health application is important. This research have done initial study to particular units in health care organization (Maternal and Child Health Services - PKIA), observation, site interview, and data collection. The research main phase are analyze and design TOGAF architecture for PKIA organization. TOGAF produced some tables and matrices to address detailed requirements in specialized mobile health services. The result from enterprise architecture than becomes reference for the design and development of mobile information system based on service oriented architecture and can be used on mobile devices for multiple platforms. For future work, we will create a model to map the diagrams and tables of enterprise architecture into specific software design, and work for detailed architecture validation using ALMA and object-oriented metrics.},
  keywords={},
  doi={10.1109/ICODSE.2018.8705779},
  ISSN={2640-0227},
  month={Nov},}@INPROCEEDINGS{9172283,
  author={LaSorda, Maj Michael and Borky, John and Sega, Ron},
  booktitle={2020 IEEE Aerospace Conference}, 
  title={Model-Based Systems Architecting with Decision Quantification for Cybersecurity, Cost, and Performance}, 
  year={2020},
  volume={},
  number={},
  pages={1-13},
  abstract={The architecture selection process early in a major system acquisition is a critical step in determining the success of a program. There are recognized deficiencies that frequently occur in this step such as poor transparency into the final selection decision and excessive focus on lowest cost, which does not necessarily result in best value. This research investigates improvements to this process by integrating Model-Based Systems Engineering (MBSE) techniques; enforcing rigorous, quantitative evaluation metrics with a corresponding understanding of uncertainties; and eliciting stakeholder feedback in order to generate an architecture that is better optimized and trusted to provide improved value for the stakeholders. The proposed methodology presents a decision authority with an integrated assessment of architecture alternatives, to include expected performance evaluated against desired parameters with corresponding uncertainty distributions, and traceable to the concerns of the system's stakeholders. This thus enables a more informed and objective selection of the preferred alternative. We present a case study that analyzes the evaluation of a service-oriented architecture (SOA) providing satellite command and control with cyber security protections. This serves to define and demonstrate a new, more transparent and trusted architecture selection process, and the results show that it consistently achieves the desired improvements. Several excursions are also presented to show how rigorously capturing uncertainty could potentially lead to greater insights in architecture evaluation, which is a robust area for further investigation. The primary contribution of this research then is improved decision support to an architecture selection in the early phases of a system acquisition program.},
  keywords={},
  doi={10.1109/AERO47225.2020.9172283},
  ISSN={1095-323X},
  month={March},}@INPROCEEDINGS{6917306,
  author={Zhang, Lili and Yu, Shusong and Ding, Xiangqian and Wang, Xiaodong},
  booktitle={2014 Sixth International Conference on Intelligent Human-Machine Systems and Cybernetics}, 
  title={Research on IOT RESTful Web Service Asynchronous Composition Based on BPEL}, 
  year={2014},
  volume={1},
  number={},
  pages={62-65},
  abstract={In recent years, The Internet of Things(IOT) is one of the hottest research topics. It was originally defined as connected all the things through the sensing devices to the Internet. In addition, Service-Oriented methodology has gradually drawn people's attention. Therefore, integrated The IOT with Service-Oriented methodology is very important. But now IOT service composition is mostly synchronous and service model is more complex. RESTful web services have been widely recognized and used because of their lightweight and succinct. RESTful web services introduce a new kind of abstraction, the resource, so that they are hard to compose using the Business Process Execution Language (BPEL). In order to compose asynchronous RESTful web services and make use of various IOT services, this paper proposes an asynchronous RESTful web service recursive measure, which is based on the BPEL extention. First, design the architecture of IOT RESTful web services, the architecture is divided into six layers so that it can integrate The IOT and RESTful web services effectively. Second, we show how to invoke the RESTful web services from the IOT and publish a BPEL process as a RESTful web service by extending BPEL. Finally, through an experiment to verify the correctness and validity of the proposed method in this paper.},
  keywords={},
  doi={10.1109/IHMSC.2014.23},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{7153891,
  author={Abid, Kashif Sohail and Abid, Asif Sohail and Ansari, M. Mohsen},
  booktitle={2015 IEEE International Conference on Multimedia Big Data}, 
  title={A Better Approach for Conceptual Readability of WSDL}, 
  year={2015},
  volume={},
  number={},
  pages={260-263},
  abstract={Issues that concerns with the inter-operability on a heterogeneous environment can easily be address using the flexible platform of Service Oriented Architecture (SOA). Web service is an implementation and modeling of Service Oriented Architecture (SOA). Web service description language (WSDL)is a standard describing a web service in XML form. This Description can be categorized in two parts i.e. Structural and non-structural. The readability of a web service helps the consumer to understand it easily, it is suggested to provide sufficient details about functionality scope and limitation of scope in WSDL, so that it can easily be understandable. Readability depends upon interaction of two variables i.e. Text and reader. The maximum details about a web service could lead to it's reproduction by business competitor, and it may helps in maximizing vulnerabilities in it. This paper focuses on a technique for computing readability index by a detail analysis of WSDL document. This readability index obtain using this approach helps the producer of a web service to adjust readability, so that it can easily be understandable by consumer. The better readability index can also leads the provider to a better service discovery. To calculate Readability Index, extraction of WSDL file components was performed. After extraction of key concepts, they were mapped with the Domain Ontology. The words that were not mapped in the ontology, synonyms are employed by consulting the Word Net. Final readability was obtained using Simplified Dale Chall readability index (DaCw). The Web Service Readability can be measure more precisely by considering words that were not found in the mapping process.},
  keywords={},
  doi={10.1109/BigMM.2015.52},
  ISSN={},
  month={April},}@INPROCEEDINGS{7060895,
  author={Mohamed, Merabet and Mohamed, Benslimane Sidi and El Amine Chergui, Mohamed},
  booktitle={2014 Second World Conference on Complex Systems (WCCS)}, 
  title={A hybrid particle swarm optimization for service identification from business process}, 
  year={2014},
  volume={},
  number={},
  pages={122-127},
  abstract={Service identification - as the first step of Service-Oriented Architecture -holds the main emphasis on the modeling process and has a broad influence on the system development. Selecting appropriate service identification method is essential for the prosperity of any service-oriented architecture project. Existing methods for service identification ignore the automation capability while providing human based prescriptive guidelines, which mostly are not applicable at enterprise scales. In this paper, we propose a top down approach to identify automatically services from business process. We use for clustering a hybrid particle swarm optimization algorithm and several design metrics for produce reusable services with proper granularity and acceptable level of cohesion and coupling. The experimental results show that our method HPSOSI (Hybrid Particle Swarm Algorithm for Service Identification) can achieve a high performance in terms of execution time and convergence speed.},
  keywords={},
  doi={10.1109/ICoCS.2014.7060895},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8537823,
  author={Saadaoui, Alaeddine and Scott, Stephen L.},
  booktitle={2018 IEEE 4th International Conference on Collaboration and Internet Computing (CIC)}, 
  title={Lightweight Web Services Migration Framework in Hybrid Clouds}, 
  year={2018},
  volume={},
  number={},
  pages={106-113},
  abstract={Service-oriented architectures allow the deployment of loosely coupled services that are platform independent. An enterprise can take advantage of service-oriented architecture in two different directions. On one side, the abstraction of technology implementation allows the deployment of web services in disparate systems. On the other side, the flexibility and independence of services from each other makes scalability easier to achieve. This paper presents a migration solution of web services in hybrid clouds. The adoption of hybrid cloud solutions is valuable for dynamic workloads to maintain the availability of web services during periods of spikes in demand. The migration solution is a lightweight framework composed of web services to manage cloud instances and the migration task of web services deployed on Java-based web containers. The peak management process is based on Java Management Extensions (JMX) technology to monitor resources and deployed web services. In addition, the framework dynamically integrates a set of JMX metrics to synchronize enterprise demand for resources with the migration process. Finally, a design of the framework prototype is described and a real case of CPU intensive web service is presented to test the migration process and show an improvement of CPU usage and execution time.},
  keywords={},
  doi={10.1109/CIC.2018.00025},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{7275851,
  author={Kumari, Smita and Rath, Santanu Kumar},
  booktitle={2015 International Conference on Advances in Computing, Communications and Informatics (ICACCI)}, 
  title={Performance comparison of SOAP and REST based Web Services for Enterprise Application Integration}, 
  year={2015},
  volume={},
  number={},
  pages={1656-1660},
  abstract={Web Services are common means to exchange data and information over the network. Web Services make themselves available over the internet, where technology and platform are independent. Once web services are built it is accessed via uniform resource locator (URL) and their functionalities can be utilized in the application domain. Web services are self-contained, modular, distributed and dynamic in nature. These web services are described and then published in Service Registry e.g., UDDI and then they are invoked over the Internet. Web Services are basic Building blocks of Services Oriented Architecture (SOA). These web services can be developed based on two interaction styles such as Simple Object Access Protocol (SOAP) and Representational State Transfer Protocol (REST). It is important to select appropriate interaction styles i.e., either SOAP or REST for building Web Sevices. Choosing service interaction style is an important architectural decision for designers and developers, as it influences the underlying requirements for implementing web service solutions. In this study, the performance of application of web services for Enterprise Application Integration (EAI) based on SOAP and REST is compared. Since web services operate over network throughput and response time are considered as a metrics parameter for evaluation.},
  keywords={},
  doi={10.1109/ICACCI.2015.7275851},
  ISSN={},
  month={Aug},}@ARTICLE{6517184,
  author={Bianchini, Devis and Cappiello, Cinzia and De Antonellis, Valeria and Pernici, Barbara},
  journal={IEEE Transactions on Services Computing}, 
  title={Service Identification in Interorganizational Process Design}, 
  year={2014},
  volume={7},
  number={2},
  pages={265-278},
  abstract={Service identification is one of the main phases in the design of a service-oriented application. The way in which services are identified may influence the effectiveness of the SOA architecture. More specifically, the granularity of the services is very important in reaching flexibility and reusing them. Such properties are crucial in interorganizational interactions based on collaborative business processes. In fact, collaboration is facilitated by ensuring a homogeneous description of services at the right level of granularity. In this paper, we provide a detailed description of P2S (Process-to-Services), a computer-aided methodology to enable the identification of services that compose a collaborative business process. The methodology is based on metrics defined to setup service granularity, cohesion, coupling, and reuse. A prototype tool based on the methodology is also described with reference to a real case scenario.},
  keywords={},
  doi={10.1109/TSC.2013.26},
  ISSN={1939-1374},
  month={April},}@INPROCEEDINGS{8621924,
  author={Guntupally, Kavya and Devarakonda, Ranjeet and Kehoe, Kenneth},
  booktitle={2018 IEEE International Conference on Big Data (Big Data)}, 
  title={Spring Boot based REST API to Improve Data Quality Report Generation for Big Scientific Data: ARM Data Center Example}, 
  year={2018},
  volume={},
  number={},
  pages={5328-5329},
  abstract={Web application technologies are growing rapidly with continuous innovation and improvements. This paper focuses on the popular Spring Boot [1] java-based framework for building web and enterprise applications and how it provides the flexibility for service-oriented architecture (SOA). One challenge with any Spring-based applications is its level of complexity with configurations. Spring Boot makes it easy to create and deploy stand-alone, production-grade Spring applications with very little Spring configuration. Example, if we consider Spring Model-View-Controller (MVC) framework [2], we need to configure dispatcher servlet, web jars, a view resolver, and component scan among other things. To solve this, Spring Boot provides several Auto Configuration options to setup the application with any needed dependencies. Another challenge is to identify the framework dependencies and associated library versions required to develop a web application. Spring Boot offers simpler dependency management by using a comprehensive, but flexible, framework and the associated libraries in one single dependency, which provides all the Spring related technology that you need for starter projects as compared to CRUD web applications. This framework provides a range of additional features that are common across many projects such as embedded server, security, metrics, health checks, and externalized configuration. Web applications are generally packaged as war and deployed to a web server, but Spring Boot application can be packaged either as war or jar file, which allows to run the application without the need to install and/or configure on the application server. In this paper, we discuss how Atmospheric Radiation Measurement (ARM) Data Center (ADC) at Oak Ridge National Laboratory, is using Spring Boot to create a SOA based REST [4] service API, that bridges the gap between frontend user interfaces and backend database. Using this REST service API, ARM scientists are now able to submit reports via a user form or a command line interface, which captures the same data quality or other important information about ARM data.},
  keywords={},
  doi={10.1109/BigData.2018.8621924},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{8372741,
  author={Al-Shammari, Haider Qays and Lawey, Ahmed and El-Gorashi, Taisir and Elmirghani, Jaafar M. H.},
  booktitle={2018 27th Wireless and Optical Communication Conference (WOCC)}, 
  title={Energy efficient service embedding in IoT networks}, 
  year={2018},
  volume={},
  number={},
  pages={1-5},
  abstract={The Internet of Things (IoT) is anticipated to participate in performing diverse and complex tasks in the near future. IoT objects capable of handling multiple sensing and actuating functions will be the corner stone of future IoT systems in smart cities. In this paper, we present an energy efficient service embedding framework in IoT network by using mixed integer linear programming (MILP). This framework addresses a set of metrics such as scalability, flexible resource allocation, cost reduction, and efficient use of resources. We consider the event-driven paradigm of Service Oriented Architecture (SOA) in our framework in order to provide service abstraction of basic services which can be composed into complex services and exploited by the upper application layer. The results show that our optimized network can save an average of 27% and 36% of the processing and network power consumption, respectively, compared to an energy unaware service embedding scheme.},
  keywords={},
  doi={10.1109/WOCC.2018.8372741},
  ISSN={2379-1276},
  month={April},}@INPROCEEDINGS{7396198,
  author={Chituc, Claudia-Melania},
  booktitle={2015 IEEE 7th International Conference on Cloud Computing Technology and Science (CloudCom)}, 
  title={Towards a Methodology for Trade-off Analysis in a Multi-cloud Environment Considering Monitored QoS Metrics and Economic Performance Assessment Results}, 
  year={2015},
  volume={},
  number={},
  pages={479-482},
  abstract={Cloud computing and service-oriented computing brought new opportunities for companies. However, numerous challenges, (e.g., related to application design and deployment, service monitoring) are associated with the cloud and provisioned services. Complex SLAs need to be established and monitored. Current approaches do not sufficiently address the challenges of QoS monitoring in multi-cloud environments in a holistic manner, tackling mainly technical aspects. This paper presents an on-going research project towards the development of a methodology for a trade-off analysis in a multi-cloud environment considering monitored QoS metrics and economic performance assessment results. The research methodology followed and partial results are presented, and directions for future work are discussed. Based on the needs identified, an architecture for SLA monitoring and dynamic runtime adaptations in multi-cloud environments is proposed, tackling technical and business-economic aspects.},
  keywords={},
  doi={10.1109/CloudCom.2015.87},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{8441460,
  author={Keserwani, Pankaj Kumar and Samaddar, Shefalika Ghosh},
  booktitle={2017 Ninth International Conference on Advanced Computing (ICoAC)}, 
  title={An SLA Design with Digital Forensic Capabilities}, 
  year={2017},
  volume={},
  number={},
  pages={109-113},
  abstract={Cloud computing is getting rapid momentum as an alternative to traditional and professional Infrastructure of Information Technology due to its attractive features of getting everything in a service mode rather than in a product mode. Service mode using cloud makes the products and services cost effective. As consumers willing to pass on their tasks as services provider to cloud providers, trust factor is required especially when consumers have critical data. The Service Level Agreements (SLA) between cloud service consumers (CSCs) and cloud service providers (CSPs) play important role for building up trust between involved parties. SLA between parties is established in a satisfactory way upon agreements. Cloud computing is very dynamic in nature, hence continuous monitoring on Quality of Service (QoS) attributes as mentioned in SLA is required to be implemented dynamically. Managing SLAs is complicated due to complex nature of the cloud due to multi-tenancy and distributed resource sharing. The paper proposes a methodology for SLAs to be signed digitally and its further management in a single or multi cloud computing environment. The framework had been used in Web Service Level Agreement (WSLA) for monitoring and enforcement of SLA using Service Oriented Architecture (SOA) environment. Cloud broker agents have the capability of automatic extraction of metrics from SLAs. The use of the third party support feature to manage the digital forensics in case of requirement of any violation of SLAs suggested in the present paper and it is also solving the trust issues as demonstrated in digital forensics usage from the initiation of SLA; making the SLA naturally forensic enabled.},
  keywords={},
  doi={10.1109/ICoAC.2017.8441460},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{7068197,
  author={Thirumaran, M. and Jannani, M.},
  booktitle={Proceedings of IEEE International Conference on Computer Communication and Systems ICCCS14}, 
  title={Theoretical foundation to evaluate the change measures for an effective web service change management}, 
  year={2014},
  volume={},
  number={},
  pages={226-232},
  abstract={With the advent in the need for a cost effective and efficient solution which supports the evolution and enhancement of the Enterprise Information Systems, the adoption of Service Oriented Architectures (SOAs) for the automation of business processes and the integration of IT systems is increasing. These SOAs rely on web service standards for the implementation of service invocations across machine boundaries. Web services are software systems designed to support interoperable machine-to-machine interaction over a network. This interoperability is gained through a set of XML-based open standards. These standards provide a common approach for defining, publishing, and using web services. However after a product is introduced in the market, its successful growth against the competitors depends critically on the company's ability to rapidly improve and extend its product in response to customer feedback. These changes must be reflected accordingly in the web service without injecting any disputes. Hence an effective web service Change Management with appropriate change measures is very essential. This paper focuses on such change measures for an effective change management.},
  keywords={},
  doi={10.1109/ICCCS.2014.7068197},
  ISSN={},
  month={Feb},}@INPROCEEDINGS{8259711,
  author={Fethallah, Hadjila and Ismail, Smahi Mohamed and Mohamed, Merzoug and Zeyneb, Torchane},
  booktitle={2017 International Conference on Mathematics and Information Technology (ICMIT)}, 
  title={An outranking model for web service discovery}, 
  year={2017},
  volume={},
  number={},
  pages={162-167},
  abstract={The web service discovery is the cornerstone of the service oriented architecture. To solve this issue, we usually leverage a matching model as well as the operation signature in order to minimize the residual errors. In this paper, we resolve this problem by combining a set of similarity measures through the use of a majority voting model called “outranking”. The Experimental evaluation confirms that this model performs better than the well-known Borda and all input similarity measures.},
  keywords={},
  doi={10.1109/MATHIT.2017.8259711},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{6901158,
  author={Mcheick, Hamid and Mohammad, Atif Farid},
  booktitle={2014 IEEE 27th Canadian Conference on Electrical and Computer Engineering (CCECE)}, 
  title={The evident use of evidence theory in big data analytics using cloud computing}, 
  year={2014},
  volume={},
  number={},
  pages={1-6},
  abstract={We live in the world of evidence. This research survey comprises of several research works and has an example implying dempster-shafer theory of evidence. We have witnessed several advances in computational performance, which have brought us the design and development of high-performance computing simulation tools. It is a fact that we have to account for uncertainty, while generating such high-performance systems using such simulation tools can fail in service performance predictions. We have seen that evidence theory is utilized to measure uncertainty in terms of the uncertain measures of belief and plausibility. It is also witnessed in computing community that Cloud computing has provided a flexible and scalable infrastructures to grow beyond contemporary borders to the organizations as wells the users everyday use of services. It also has increased availability of high-performance computing applications to small/ medium-sized businesses as well as academic users to work with. This paper also sheds light on Cloud computing and Service-Oriented Architecture.},
  keywords={},
  doi={10.1109/CCECE.2014.6901158},
  ISSN={0840-7789},
  month={May},}@INPROCEEDINGS{9217849,
  author={Gehrmann, Tobias and Duplys, Paul},
  booktitle={2020 23rd Euromicro Conference on Digital System Design (DSD)}, 
  title={Intrusion Detection for SOME/IP: Challenges and Opportunities}, 
  year={2020},
  volume={},
  number={},
  pages={583-587},
  abstract={Due to ever increasing complexity and the introduction of more and more connectivity, modern cars have an ever growing attack surface. To cope with this, intrusion detection should be used as an additional layer of defense complementing dedicated security measures. There is, however, very little published work on intrusion detection in cars, in particular for service-oriented communication. In this short paper, we first discuss selected challenges and opportunities for intrusion detection in SOME/IP, a standard protocol for service-oriented communication in cars. We then propose an architecture for a SOME/IP intrusion detection system, discuss its security properties and report preliminary experimental results.},
  keywords={},
  doi={10.1109/DSD51259.2020.00096},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{8377634,
  author={Kumar, Lov and Sureka, Ashish},
  booktitle={2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)}, 
  title={An Empirical Analysis on Web Service Anti-pattern Detection Using a Machine Learning Framework}, 
  year={2018},
  volume={01},
  number={},
  pages={2-11},
  abstract={Web Services are application components characterised by interoperability, extensibility, distributed application development and service oriented architecture. A complex distributed application can be developed by combing several third-party web-services. Anti-patterns are counter-productive and poor design and practices. Web-services suffer from a multitude of anti-patterns such as God object Web service and Fine grained Web service. Our work is motivated by the need to build techniques for automatically detecting common web-services anti-patterns by static analysis of the source code implementing a web-service. Our approach is based on the premise that summary values of object oriented source code metrics computed at a web-service level can be used as a predictor for anti-patterns. We present an empirical analysis of 4 data sampling techniques to encounter the class imbalance problem, 5 feature ranking techniques to identify the most informative and relevant features and 8 machine learning algorithms for predicting 5 different types of anti-patterns on 226 real-world web-services across several domains. We conclude that it is possible to predict anti-patterns using source code metrics and a machine learning framework. Our analysis reveals that the best performing classification algorithm is Random Forest, best performing data sampling technique is SMOTE and the best performing feature ranking method is OneR.},
  keywords={},
  doi={10.1109/COMPSAC.2018.00010},
  ISSN={0730-3157},
  month={July},}@INPROCEEDINGS{9678708,
  author={Wang, Hanzhang and Wu, Zhengkai and Jiang, Huai and Huang, Yichao and Wang, Jiamu and Kopru, Selcuk and Xie, Tao},
  booktitle={2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Groot: An Event-graph-based Approach for Root Cause Analysis in Industrial Settings}, 
  year={2021},
  volume={},
  number={},
  pages={419-429},
  abstract={For large-scale distributed systems, it is crucial to efficiently diagnose the root causes of incidents to maintain high system availability. The recent development of microservice architecture brings three major challenges (i.e., complexities of operation, system scale, and monitoring) to root cause analysis (RCA) in industrial settings. To tackle these challenges, in this paper, we present Groot, an event-graph-based approach for RCA. Groot constructs a real-time causality graph based on events that summarize various types of metrics, logs, and activities in the system under analysis. Moreover, to incorporate domain knowledge from site reliability engineering (SRE) engineers, Groot can be customized with user-defined events and domain-specific rules. Currently, Groot supports RCA among 5,000 real production services and is actively used by the SRE teams in eBay, a global e-commerce system serving more than 159 million active buyers per year. Over 15 months, we collect a data set containing labeled root causes of 952 real production incidents for evaluation. The evaluation results show that Groot is able to achieve 95% top-3 accuracy and 78% top-1 accuracy. To share our experience in deploying and adopting RCA in industrial settings, we conduct a survey to show that users of Groot find it helpful and easy to use. We also share the lessons learned from deploying and adopting Groot to solve RCA problems in production environments.},
  keywords={},
  doi={10.1109/ASE51524.2021.9678708},
  ISSN={2643-1572},
  month={Nov},}@ARTICLE{8726136,
  author={Jin, Hai and Li, Zhi and Zou, Deqing and Yuan, Bin},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={DSEOM: A Framework for Dynamic Security Evaluation and Optimization of MTD in Container-Based Cloud}, 
  year={2021},
  volume={18},
  number={3},
  pages={1125-1136},
  abstract={Due to the lightweight features, the combination of container technology and microservice architecture makes container-based cloud environment more efficient and agile than VM-based cloud environment. However, it also greatly amplifies the dynamism and complexity of the cloud environment and increases the uncertainty of security issues in the system concurrently. In this case, the effectiveness of defense mechanisms with fixed strategies would fluctuate as the updates occur in cloud environment. We refer this problem as effectiveness drift problem of defense mechanisms, which is particularly acute in the proactive defense mechanisms, such as moving target defense (MTD). To tackle this problem, we present DSEOM, a framework that can automatically perceive updates of container-based cloud environment, rapidly evaluate the effectiveness change of MTD and dynamically optimize MTD strategies. Specifically, we establish a multi-dimensional attack graphs model to formalize various complex attack scenarios. Combining with this model, we introduce the concept of betweenness centrality to effectively evaluate and optimize the implementation strategies of MTD. In addition, we present a series of security and performance metrics to quantify the effectiveness of MTD strategies in DSEOM. And we conduct extensive experiments to illustrate the existence of the effectiveness drift problem and demonstrate the usability and scalability of DSEOM.},
  keywords={},
  doi={10.1109/TDSC.2019.2916666},
  ISSN={1941-0018},
  month={May},}@ARTICLE{9036958,
  author={Herrera, José and Moltó, Germán},
  journal={IEEE Access}, 
  title={Toward Bio-Inspired Auto-Scaling Algorithms: An Elasticity Approach for Container Orchestration Platforms}, 
  year={2020},
  volume={8},
  number={},
  pages={52139-52150},
  abstract={The wide adoption of microservices architectures has introduced an unprecedented granularisation of computing that requires the coordinated execution of multiple containers with diverse lifetimes and with potentially different auto-scaling requirements. These applications are managed by means of container orchestration platforms and existing centralised approaches for auto-scaling face challenges when used for the timely adaptation of the elasticity required for the different application components. This paper studies the impact of integrating bio-inspired approaches for dynamic distributed auto-scaling on container orchestration platforms. With a focus on running self-managed containers, we compare alternative configuration options for the container life cycle. The performance of the proposed models is validated through simulations subjected to both synthetic and real-world workloads. Also, multiple scaling options are assessed with the purpose of identifying exceptional cases and improvement areas. Furthermore, a nontraditional metric for scaling measurement is introduced to substitute classic analytical approaches. We found out connections for two related worlds (biological systems and software container elasticity procedures) and we open a new research area in software containers that features potential self-guided container elasticity activities.},
  keywords={},
  doi={10.1109/ACCESS.2020.2980852},
  ISSN={2169-3536},
  month={},}
