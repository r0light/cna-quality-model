@INPROCEEDINGS{9779690,
  author={Zaragoza, Pascal and Seriai, Abdelhak-Djamel and Seriai, Abderrahmane and Shatnawi, Anas and Derras, Mustapha},
  booktitle={2022 IEEE 19th International Conference on Software Architecture (ICSA)}, 
  title={Leveraging the Layered Architecture for Microservice Recovery}, 
  year={2022},
  volume={},
  number={},
  pages={135-145},
  abstract={The microservice-oriented architecture (MSA) is an architectural style which involves organizing an application as of small independent services, each oriented towards one business functionality while being data autonomous. In pursuit of modernizing their software to take advantage of the Cloud, companies have been eager to migrate their monolithic legacy software towards an MSA. This migration necessitates an identification phase to reorganize classes around the monolith’s functionalities as a set of microservice candidates. However, most identification approaches fail to utilize the monolith’s internal multilayered architecture to identify those functionalities, and thus the microservices. As a consequence, ignoring the internal multilayered architecture increases the risk of identifying microservice by their technical layer which is recognized as a conceptual anti-pattern. In this paper, we explore the impact of the multi-layer architecture in monolithic applications during the identification to develop a semi-automatic approach that relies on it to identify an MSA. Particularly, we analyze the presentation layer to determine the endpoints of each business functionality of the monolith. From these endpoints, we apply a vertical decomposition to identify the necessary classes to implement each feature as a microservice. In the process, we also define the bounded context of each microservice during the vertical decomposition of the data-access layer. For the evaluation, we implemented a model-driven process and applied it on a set of varying open-source applications commonly used in the literature. We compared the results of approach with and without the reverse-engineering of the internal architecture to measure the impact of our approach on the identification of quality microservices. Using decomposition metrics (e.g., MoJoFM, c2ccvg), we were able to measure a significant positive impact.},
  keywords={},
  doi={10.1109/ICSA53651.2022.00021},
  ISSN={},
  month={March},}@INPROCEEDINGS{10043222,
  author={Wang, Yu-Te and Ma, Shang-Pin and Lai, Yue-Jun and Liang, Yan-Cih},
  booktitle={2022 29th Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={Analyzing and Monitoring Kubernetes Microservices based on Distributed Tracing and Service Mesh}, 
  year={2022},
  volume={},
  number={},
  pages={477-481},
  abstract={The microservice system architecture (MSA) outperforms the monolithic system architecture in terms of maintainability, extensibility, scalability, and fault tolerance. This is prompting a widescale migration of software systems from existing monolith systems to MSA. Most microservice systems utilize container technology for deployment. The fact that Kubernetes (K8s) provides a fully-fledged toolchain for managing container-based applications is prompting many organizations to adopt the K8s protocol for microservice system deployment and operations. Microservice monitoring is essential to the success of any service operation. The collection of logs and aggregation of metrics by most existing microservice monitoring systems is somewhat intrusive. Furthermore, the heterogeneity of Kubernetes technology means that most monitoring methods are inapplicable in situations where microservices are developed for a system using a variety of underlying languages and platforms. In the current study, we developed a monitoring mechanism that provides various metrics specific to microservice systems in a nonintrusive way. The proposed K8s-based microservice monitoring system, referred to as KMamiz (Kubernetes-based Microservice Analysis and Monitoring using Istio and Zipkin), enables the construction and visualization for service-level/endpoint-level dependency graphs and endpoint request chains, and the service cohesion/coupling analysis to enhance system quality for the development team.},
  keywords={},
  doi={10.1109/APSEC57359.2022.00066},
  ISSN={2640-0715},
  month={Dec},}@INPROCEEDINGS{9955300,
  author={Joyce, Josephine Eskaline and Sebastian, Shoney},
  booktitle={2022 IEEE 4th PhD Colloquium on Emerging Domain Innovation and Technology for Society (PhD EDITS)}, 
  title={Reinforcement Learning based Autoscaling for Kafka-centric Microservices in Kubernetes}, 
  year={2022},
  volume={},
  number={},
  pages={1-2},
  abstract={Microservices and Kafka have become a perfect match for enabling the Event-driven Architecture and this encourages microservices integration with various opensource platforms in the world of Cloud Native applications. Kubernetes is an opensource container orchestration platform, that can enable high availability, and scalability for Kafkacentric microservices. Kubernetes supports diverse autoscaling mechanisms like Horizontal Pod Autoscaler (HPA), Vertical Pod Autoscaler (VPA) and Cluster Autoscaler (CA). Among others, HPA automatically scales the number of pods based on the default Resource Metrics, which includes CPU and memory usage. With Prometheus integration, custom metrics for an application can be monitored. In a Kafkacentric microservices, processing time and speed depends on the number of messages published. There is a need for auto scaling policy which can be based on the number of messages processed. This paper proposes a new autoscaling policy, which scales Kafka-centric microservices deployed in an eventdriven deployment architecture, using a Reinforcement Learning model.},
  keywords={},
  doi={10.1109/PhDEDITS56681.2022.9955300},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{10350465,
  author={Zhang, Yang and Li, Yang and Yang, Yilong and Chen, Shuang and Gao, Juntao and Wang, Weiru and Yin, Yongfeng},
  booktitle={2023 ACM/IEEE International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C)}, 
  title={RapidMS: A Tool for Supporting Rapid Microservices Generation and Refinement from Requirements Model}, 
  year={2023},
  volume={},
  number={},
  pages={45-49},
  abstract={Microservices is a crucial architecture design pat-tern for developing cloud-native applications, which focuses on decomposing a large and complex software system into autonomous components that can be independently developed and deployed. However, microservices design is not a trivial task, which highly depends on the profound knowledge and experience of system design and target domain. This is a challenge for novice software architects. In this paper, we propose a microservices design tool named RapidMS, which only requires architects to specify potential context boundaries on the requirements model. The microservices architecture design model with component structure and interaction views can be automatically generated without extra human effort. Moreover, the proposed tool can automatically calculate the characteristic metrics of the microservices, which indicate the quality of the different aspects of models to support rapid architecture refinements. We demonstrate the tool's effectiveness through five case studies. The experimental result shows that architects can get better decomposition of requirement model within four iterations and over 90% of microservice architecture diagrams can be correctly generated within 10 seconds. RapidMS can be further extended and applied in the software industry to reduce the cost and difficulty of microservices decomposition and design. The tool can be downloaded at https://rm2pt.com/advs/ rapidms, and a demo video casting its features is at https://youtu.be/AoIM41FTnFO},
  keywords={},
  doi={10.1109/MODELS-C59198.2023.00017},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{10074842,
  author={Yang, Xikang and Wang, Juan and Zhou, Biyu and Wang, Wang and Liu, Wantao and Dong, Yangchen},
  booktitle={2022 IEEE 24th Int Conf on High Performance Computing & Communications; 8th Int Conf on Data Science & Systems; 20th Int Conf on Smart City; 8th Int Conf on Dependability in Sensor, Cloud & Big Data Systems & Application (HPCC/DSS/SmartCity/DependSys)}, 
  title={Fine-grained Spatiotemporal Features-Based for Anomaly Detection in Microservice Systems}, 
  year={2022},
  volume={},
  number={},
  pages={847-856},
  abstract={More and more applications use microservice architecture. Protecting the reliability of the microservice system is very important for the stable operation of applications. However, the complexity of microservice systems poses a great challenge to operation and maintenance. Researchers have proposed a series of anomaly detection algorithms, which can automatically detect the anomalies of cloud systems in time. However, for the microservice system with a complex spatial structure, there is no effective method to represent the fine-grained features of the internal metric level of the microservice. To solve this problem, we propose a fine-grained metric-level spatial feature graph TopoMetrics and use a spatiotemporal neural network STAD to obtain the spatiotemporal features of microservices, which can accurately detect the anomalies of complex microservices. We compare STAD with the most advanced algorithms in three open microservice workloads. The experimental results show that the average precision of STAD is significantly higher than that of the most advanced baseline method.},
  keywords={},
  doi={10.1109/HPCC-DSS-SmartCity-DependSys57074.2022.00138},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{9836297,
  author={Pulnil, Sermsook and Senivongse, Twittie},
  booktitle={2022 19th International Joint Conference on Computer Science and Software Engineering (JCSSE)}, 
  title={A Microservices Quality Model Based on Microservices Anti-patterns}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={Microservices architecture is becoming popular as many software organizations have the need to transform large complex systems into small-sized software units whose functions are separated by business capabilities. Microservices architecture is preferable since it promotes independence of software modification, maintenance, and deployment. However, anti-patterns or poor development patterns of microservices can decrease the software quality. Nonetheless, quality measurement of microservices design based on anti-patterns has not been found in existing research. Using the QMOOD method for quality model design, this paper proposes a microservices quality model based on 11 microservices anti-patterns and ISO/IEe 25010 as a standard reference for quality attributes. Also, a microservices quality measurement tool called MSA Nose+ is developed to measure the quality of microservices applications. In an experiment to validate the proposed model, the result shows that the quality values obtained from the proposed model improve consistently with the refactorings that are applied to a microservice-based system. Thus, development teams can use the proposed model and quality measurements as part of the decision making on quality improvement and maintenance of microservices applications.},
  keywords={},
  doi={10.1109/JCSSE54890.2022.9836297},
  ISSN={2642-6579},
  month={June},}@INPROCEEDINGS{9820743,
  author={Wang, Xinkai and Li, Chao and Zhang, Lu and Hou, Xiaofeng and Chen, Quan and Guo, Minyi},
  booktitle={2022 IEEE International Parallel and Distributed Processing Symposium (IPDPS)}, 
  title={Exploring Efficient Microservice Level Parallelism}, 
  year={2022},
  volume={},
  number={},
  pages={223-233},
  abstract={The microservice architecture has recently become a driving trend in the cloud by disaggregating a monolithic application into many scenario-oriented service blocks (microservices). The decomposition process results in a highly dynamic execution scenario, in which various chained microservices contend for computing resources in different ways. While parallelism has been exploited at both the instruction/thread level and the task/request level, very limited work has been done with the grain-size of a microservice. Current parallel processing solutions are sub-optimal as they neither capture the unique characteristics of microservices nor consider the uncertainty arises in the microservice environment. In this work we introduce microservice level parallelism (MLP), a technique that aims to precisely coalesce and align parallel microservice chains for better system performance and resource utilization. We identify major issues that prevent servers from effectively exploiting MLP and we define metrics that can guide MLP optimization. We propose v-MLP, a volatility-aware MLP that is able to adapt to a highly heterogeneous and dynamic microservice environment. We show that v-MLP can reduce tail latency by up to 50% and improve resource utilization by up to 15 % under various scenarios.},
  keywords={},
  doi={10.1109/IPDPS53621.2022.00030},
  ISSN={1530-2075},
  month={May},}@INPROCEEDINGS{10350596,
  author={Li, Yang and Zhang, Yang and Yang, Yilong and Wang, Weiru and Yin, Yongfeng},
  booktitle={2023 ACM/IEEE International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C)}, 
  title={RM2MS: A Tool for Automatic Identification of Microservices from Requirements Models}, 
  year={2023},
  volume={},
  number={},
  pages={50-54},
  abstract={Microservices identification is the key development process of cloud-native applications. It focuses on decomposing system into decoupling autonomous components to support development and deployment independently. This process requires sophisticated human efforts for careful requirements analysis and validation to identify the appropriate microservices boundary inside system modules. Our previous work RM2PT can help to achieve a validated requirements model through automatically generating prototypes from original requirements models. The validated requirements model contains the precise definitions of functionality and data structure that can help in microservices identification. In this paper, we present a tool named RM2MS to further alleviate the problem of cloud-native application development to support automatic identification of microservices from the validated requirements model. RM2MS can automatically analyse the relationship between functionality and data structure, and trade-off non-functional factors for microservices identification. We demonstrate that the microservice architecture solution generated by RM2MS demonstrates a average gain of 27.1% over the manual approach in three key metrics(Function-Cohesion, Modularity, and Instability), while exhibiting efficiency that surpasses the manual process by more than 10-fold through five case studies. The proposed approach can be further extended and applied for the cloud-native application development in the software industry. The tool can be downloaded at https://rm2pt.com/advs/rm2ms, and a demo video casting its features is at https://www.youtube.com/watch?v=T71vQDasOSw},
  keywords={},
  doi={10.1109/MODELS-C59198.2023.00018},
  ISSN={},
  month={Oct},}@ARTICLE{10332462,
  author={Xu, Yueshen and Qiu, Zhibo and Gao, Honghao and Zhao, Xinkui and Wang, Lu and Li, Rui},
  journal={IEEE Transactions on Consumer Electronics}, 
  title={Heterogeneous Data-Driven Failure Diagnosis for Microservice-Based Industrial Clouds Towards Consumer Digital Ecosystems}, 
  year={2023},
  volume={},
  number={},
  pages={1-1},
  abstract={Consumer digital ecosystems include a large volume of different types of applications, and those applications are usually deployed in industrial cloud computing systems. Currently, microservices are one of the most prevailing architectures for industrial clouds. Similar to other architectures, microservices may also produce failures, so failure diagnosis for microservices becomes an inevitable problem in industrial clouds. A majority of existing methods focus on statistical analysis for monitoring data or system topological structure. However, because these methods usually only harness service-level or machine-level metrics, they cannot complete fine-grained failure diagnosis, increasing the running risk of microservice-based industrial clouds. To tackle this issue, in this paper, we design a novel graph structure to represent failure dependencies, especially the heterogeneity, and name it as the heterogeneous failure dependence graph (HFDG). We propose a framework to inform engineers which type of and where failures occur in industrial clouds. The HFDG can be used to mine the propagation of failures between different types of components. We also propose a novel neural network model based on attention mechanism and heterogeneous graph neural network, to fully leverage the metric data and HFDG. We performed experiments on three large-scale public datasets from real-world microservices-based systems. The experimental results demonstrate the superior performance of our model compared to well-known baselines.},
  keywords={},
  doi={10.1109/TCE.2023.3337351},
  ISSN={1558-4127},
  month={},}@INPROCEEDINGS{10256409,
  author={Jack, Chang Hoong and Teck, See Kwee and Ming, Lim Tong and Hong, Ding Ying},
  booktitle={2023 IEEE 8th International Conference On Software Engineering and Computer Systems (ICSECS)}, 
  title={An Overview Analysis of Authentication Mechanism in Microservices-Based Software Architecture: A Discussion Paper}, 
  year={2023},
  volume={},
  number={},
  pages={1-6},
  abstract={Microservices-based software architecture promotes scalability and flexibility by breaking down a software application into smaller modules and making it more independent and loosely coupled services compared to monolith systems. However, securing microservices in a distributed nature has become one of the challenges. Authentication is one of the most critical components that should be focused in the microservices security measures. It helps to identify that only authenticated personnel and services can access sensitive information and secure the trust between microservices. This discussion paper aims to provide an overview analysis and extensive understanding on the authentication mechanism in microservices-based software architecture. In this study, we explore different authentication mechanisms including Mutual Transport Layer Security (mTLS), Token based authentication and API Gateway authentication. This study examines the strengths and limitations of different authentication mechanisms in microservices-based software architecture. It also emphasizes the importance of authentication and the need for having a well-designed authentication mechanism to ensure the integrity and security of microservices-based software architecture is crucial.},
  keywords={},
  doi={10.1109/ICSECS58457.2023.10256409},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{9779811,
  author={Speth, Sandro and Stieß, Sarah and Becker, Steffen},
  booktitle={2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C)}, 
  title={A Saga Pattern Microservice Reference Architecture for an Elastic SLO Violation Analysis}, 
  year={2022},
  volume={},
  number={},
  pages={116-119},
  abstract={Reference architectures are becoming increasingly popular for industry and researchers as benchmark solutions to test their novel concepts and tools. While many reference architectures exist in the microservice domain, they are often not built on state-of-the-art technologies. Furthermore, many existing reference architectures do not use lightweight and asynchronous communications, such as messaging, do not have out-of-the-box self-adaptation and do not consider state-of-the-art microservice patterns. Therefore, this paper proposes a self-adaptive microservice reference architecture that implements the microservice saga pattern. The architecture is implemented in Java Spring Boot and uses the Eventuate Tram framework for the saga orchestration. Moreover, the architecture is instrumented to export performance metrics for monitoring and data for system-wide tracing to check for correct execution of the system and its adaptations. The objective of this reference architecture is to provide a benchmark for explaining self-adaptation and propagation of service-level objective (SLOs) violations across an architecture with complex patterns. In addition to the architecture, we provide defined SLOs and load profiles to stress the architecture.},
  keywords={},
  doi={10.1109/ICSA-C54293.2022.00029},
  ISSN={2768-4288},
  month={March},}@ARTICLE{9090324,
  author={Ma, Meng and Lin, Weilan and Pan, Disheng and Wang, Ping},
  journal={IEEE Transactions on Services Computing}, 
  title={Self-Adaptive Root Cause Diagnosis for Large-Scale Microservice Architecture}, 
  year={2022},
  volume={15},
  number={3},
  pages={1399-1410},
  abstract={The emergence of microservice architecture in Cloud systems poses a new challenges for the reliability operation and maintenance. Due to numerous services and diverse types of metrics, it is time-consuming and challenging to identify the root cause of anomaly in large-scale microservice architecture. To solve this issue, this article presents a multi-metric and self-adaptive root cause diagnosis framework, named MS-Rank. MS-Rank decomposes the task into four phases: impact graph construction, random walk diagnosis, result precision evaluation, metrics weight update. Initially, we introduce the concept of implicit metrics and propose a composite impact graph construction algorithm, using multiple types of metrics to discover causal relationships between services. Afterwards, we propose a diagnostic algorithm in which forward, selfward and backward transitions are designed to heuristically identify the root cause services. In addition, we establish a self-adaptive mechanism to update the confidence of different metrics dynamically according to their diagnostic precision. Lastly, we develop a prototype system and integrate MS-Rank into real production system - IBM Cloud. Experimental results show that MS-Rank has a high diagnostic precision and its performance outperforms several selected benchmarks. Through multiple rounds of diagnosis, MS-Rank can optimize itself effectively. MS-Rank can be rapidly deployed in various microservice-based systems and applications, requiring no predefined knowledge. MS-Rank also allows us to introduce expert experiences into its framework to improve the diagnostic efficiency and precision.},
  keywords={},
  doi={10.1109/TSC.2020.2993251},
  ISSN={1939-1374},
  month={May},}@ARTICLE{9784409,
  author={Sebrechts, Merlijn and Volckaert, Bruno and De Turck, Filip and Yang, Kun and Al-Naday, Mays},
  journal={IEEE Communications Magazine}, 
  title={Fog Native Architecture: Intent-Based Workflows to Take Cloud Native toward the Edge}, 
  year={2022},
  volume={60},
  number={8},
  pages={44-50},
  abstract={The cloud native approach is rapidly transforming how applications are developed and operated, turning monolithic applications into microservice applications, allowing teams to release faster, increase reliability, and expedite operations by taking full advantage of cloud resources and their elasticity. At the same time, “fog computing” is emerging, bringing the cloud toward the edge, near the end user, in order to increase privacy, improve resource efficiency, and reduce latency. Combining these two trends, however, proves difficult because of four fundamental disconnects between the cloud native paradigm and fog computing. This article identifies these disconnects and proposes a fog native architecture along with a set of design patterns to take full advantage of the fog. Central to this approach is turning microservice applications into microservice workflows, constructed dynamically by the system using an intent-based approach taking into account a number of factors such as user requirements, request location, and available infrastructure and microservices. The architecture introduces a novel softwarized fog mesh facilitating both inter-microservice connectivity, external communication, and end-user aggregation. Our evaluation analyzes the impact of distributing microservice-based applications over a fog ecosystem, illustrating the impact of CPU and network latency and application metrics on perceived quality of service of fog native workflows compared to the cloud. The results show the fog can offer superior application performance given the right conditions.},
  keywords={},
  doi={10.1109/MCOM.003.2101075},
  ISSN={1558-1896},
  month={August},}@INPROCEEDINGS{10336221,
  author={Sarda, Komal},
  booktitle={2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems Companion (ACSOS-C)}, 
  title={Leveraging Large Language Models for Auto-remediation in Microservices Architecture}, 
  year={2023},
  volume={},
  number={},
  pages={16-18},
  abstract={Microservices architecture is popular due to its scalability and flexibility. However, managing and troubleshooting distributed microservices-based systems can be challenging and time consuming. Auto-remediation of anomalies, that is the automated detection and root-causes generation and execution of repair scripts, can reduce the down-times and increase the availability of systems. This thesis will explore the potential and effectiveness of using large language models (LLMs) in auto-remediation. It will develop an auto-remediation framework to mitigate the effects of performance-based anomalies in self-adaptive microservice architectures. Multiple sample microservice applications as test-bed will be rigorously studied, and a dataset will be created to evaluate LLM-based codegeneration models using semantic, lexical, and correctness metrics in zero-shot and few-shot scenarios. Additionally, we will develop reliable prompts for automated Ansible runbook generation and assess their efficiency for orchestrating the auto-remediation process, including deployment, configuration changes, and system recovery to improve application reliability and operational efficiency.},
  keywords={},
  doi={10.1109/ACSOS-C58168.2023.00025},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{10062468,
  author={Frank, Sebastian and Wagner, Lion and Hakamian, Alireza and Straesser, Martin and van Hoorn, André},
  booktitle={2022 IEEE 22nd International Conference on Software Quality, Reliability and Security (QRS)}, 
  title={MiSim: A Simulator for Resilience Assessment of Microservice-Based Architectures}, 
  year={2022},
  volume={},
  number={},
  pages={1014-1025},
  abstract={Increased resilience compared to monolithic architectures is both one of the key promises of microservice-based architectures and a big challenge, e.g., due to the systems’ distributed nature. Resilience assessment through simulation requires fewer resources than the measurement-based techniques used in practice. However, there is no existing simulation approach that is suitable for a holistic resilience assessment of microservices comprised of (i) representative fault injections, (ii) common resilience mechanisms, and (iii) time-varying workloads. This paper presents MiSim — an extensible simulator for resilience assessment of microservice-based architectures. It overcomes the stated limitations of related work. MiSim fits resilience engineering practices by supporting scenario-based experiments and requiring only lightweight input models. We demonstrate how MiSim simulates (1) common resilience mechanisms — i.e., circuit breaker, connection limiter, retry, load balancer, and autoscaler — and (2) fault injections — i.e., instance/service killing and latency injections. In addition, we use TeaStore, a reference microservice-based architecture, aiming to reproduce scaling behavior from an experiment by using simulation. Our results show that MiSim allows for quantitative insights into microservice-based systems’ complex transient behavior by providing up to 25 metrics.},
  keywords={},
  doi={10.1109/QRS57517.2022.00105},
  ISSN={2693-9177},
  month={Dec},}@ARTICLE{9057418,
  author={Yu, Guangba and Chen, Pengfei and Zheng, Zibin},
  journal={IEEE Transactions on Cloud Computing}, 
  title={Microscaler: Cost-Effective Scaling for Microservice Applications in the Cloud With an Online Learning Approach}, 
  year={2022},
  volume={10},
  number={2},
  pages={1100-1116},
  abstract={Recently, the microservice becomes a popular architecture to construct cloud native systems due to its agility. In cloud native systems, autoscaling is a key enabling technique to adapt to workload changes by acquiring or releasing the right amount of computing resources. However, it becomes a challenging problem in microservice applications, since such an application usually comprises a large number of different microservices with complex interactions. When the performance decreases due to an unpredictable workload peak, it is difficult to pinpoint the scaling-needed services which need to scale out and evaluate how many resources they need. In this article, we present a novel system named Microscaler to automatically identify the scaling-needed services and scale them to meet the Service Level Agreement (SLA) with an optimal cost for microservice applications. Microscaler first collects the quality of service (QoS) metrics in the service mesh enabled microservice infrastructure. Then, it determines under-provisioning or over-provisioning service instances along the service dependency graph with a novel scaling-needed service criterion named service power. The service dependency graph could be obtained by correlating each request flow in the service mesh. By combining an online learning approach and a step-by-step heuristic approach, Microscaler can precisely reach the optimal service scale meeting the SLA requirements. The experimental evaluations in a microservice benchmark show that Microscaler achieves an average 93 percent precision in scaling-needed service determination and converges to the optimal service scale faster than several state-of-the-art methods. Moreover, Microscaler is lightweight and flexible enough to work in a large-scale microservice system.},
  keywords={},
  doi={10.1109/TCC.2020.2985352},
  ISSN={2168-7161},
  month={April},}@INPROCEEDINGS{10123637,
  author={Li, Yuewei and Lu, Yan and Wang, Jingyu and Qi, Qi and Wang, Jing and Wang, Yingying and Liao, Jianxin},
  booktitle={2023 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={TADL: Fault Localization with Transformer-based Anomaly Detection for Dynamic Microservice Systems}, 
  year={2023},
  volume={},
  number={},
  pages={718-722},
  abstract={Due to the complexity of microservice architecture, it is difficult to accomplish efficient microservice anomaly detection and localization tasks and achieve the target of high system reliability. For rapid failure recovery and user satisfaction, it is significant to detect and locate anomalies fast and accurately in microservice systems. In this paper, we propose an anomaly detection and localization model based on Transformer, named TADL (Transformer-based Anomaly Detector and Locator), which models the temporal features and dynamically captures container relationships using Transformer with sandwich structure. TADL uses readily available container performance metrics, making it easy to implement in already-running container clusters. Evaluations are conducted on a sock-shop dataset collected from a real microservice system and a publicly available dataset SMD. Empirical studies on the above two datasets demonstrate that TADL can outperform baseline methods in the performance of anomaly detection, the latency of anomaly detection, and the effect of anomalous container localization, which indicates that TADL is useful in maintaining complex and dynamic microservice systems in the real world.},
  keywords={},
  doi={10.1109/SANER56733.2023.00078},
  ISSN={2640-7574},
  month={March},}@INPROCEEDINGS{10015475,
  author={Pearce, Glen and Pflaum, Alexis and Balasoiu, Dumitru Alin and Szabo, Claudia},
  booktitle={2022 Winter Simulation Conference (WSC)}, 
  title={Jeopardy Assessment for Dynamic Configuration of Collaborative Microservice Architectures}, 
  year={2022},
  volume={},
  number={},
  pages={2070-2081},
  abstract={Microservice architectures, which are lightweight, flexible, and adapt easily to changes, have recently been considered for system development in military operations in contested and dynamic environments. However, in a military setting, the dynamic configuration of collaborative microservices execution becomes critical, and testing that microservice configurations behave as expected becomes paramount. In this paper, we propose a complex jeopardy metric and reconfiguration process that dynamically configures collaborative algorithms running on multiple nodes. Our metric and proposed scenarios will allow for the automated evaluation of microservice configurations and their re-configuration to suit operational needs. We evaluate our proposed scenario, metric, and various reconfiguration algorithms to show the benefits of this approach.},
  keywords={},
  doi={10.1109/WSC57314.2022.10015475},
  ISSN={1558-4305},
  month={Dec},}@INPROCEEDINGS{9978950,
  author={Bi, Tingzhu and Pan, Yicheng and Jiang, Xinrui and Ma, Meng and Wang, Ping},
  booktitle={2022 IEEE 33rd International Symposium on Software Reliability Engineering (ISSRE)}, 
  title={VECROsim: A Versatile Metric-oriented Microservice Fault Simulation System (Tools and Artifact Track)}, 
  year={2022},
  volume={},
  number={},
  pages={297-308},
  abstract={Automated fault diagnosis of microservice systems has been a hot topic in recent years. As most incidents in real commercial cloud systems are not publicly available, we have witnessed researchers putting considerable effort into developing various experimental systems. However, previous tools cannot quickly refactor their functionality, scale the architecture, and customize fault characteristics. Given this, we develop VECROsim, a versatile metric-oriented microservice fault simulation system, and release the VECROsim benchmark dataset. VECROsim works delicately as a highly-customizable toolkit to generate abnormal performance metrics datasets of microservice systems on demand and automatically. Validation of representative services from the benchmark dataset confirms the capability of VECROsim to generate realistic performance metrics for diverse real-world systems. Our case studies on root cause analysis and dynamic correlation discovery demonstrated the superiority of VECROsim. We also witnessed that the VECROsim dataset brings new research challenges to state-of-the-art fault diagnosis schemes. VECROsim concretely supports microservice developers from the industry, as well as academic researchers working on fault diagnosis or broader research topics in many ways.},
  keywords={},
  doi={10.1109/ISSRE55969.2022.00037},
  ISSN={2332-6549},
  month={Oct},}@ARTICLE{10034937,
  author={Gu, Shenghui and Rong, Guoping and Ren, Tian and Zhang, He and Shen, Haifeng and Yu, Yongda and Li, Xian and Ouyang, Jian and Chen, Chunan},
  journal={IEEE Transactions on Software Engineering}, 
  title={TrinityRCL: Multi-Granular and Code-Level Root Cause Localization Using Multiple Types of Telemetry Data in Microservice Systems}, 
  year={2023},
  volume={49},
  number={5},
  pages={3071-3088},
  abstract={The microservice architecture has been commonly adopted by large scale software systems exemplified by a wide range of online services. Service monitoring through anomaly detection and root cause analysis (RCA) is crucial for these microservice systems to provide stable and continued services. However, compared with monolithic systems, software systems based on the layered microservice architecture are inherently complex and commonly involve entities at different levels of granularity. Therefore, for effective service monitoring, these systems have a special requirement of multi-granular RCA. Furthermore, as a large proportion of anomalies in microservice systems pertain to problematic code, to timely troubleshoot these anomalies, these systems have another special requirement of RCA at the finest code-level. Microservice systems rely on telemetry data to perform service monitoring and RCA of service anomalies. The majority of existing RCA approaches are only based on a single type of telemetry data and as a result can only support uni-granular RCA at either application-level or service-level. Although there are attempts to combine metric and tracing data in RCA, their objective is to improve RCA's efficiency or accuracy rather than to support multi-granular RCA. In this article, we propose a new RCA solution TrinityRCL that is able to localize the root causes of anomalies at multiple levels of granularity including application-level, service-level, host-level, and metric-level, with the unique capability of code-level localization by harnessing all three types of telemetry data to construct a causal graph representing the intricate, dynamic, and nondeterministic relationships among the various entities related to the anomalies. By implementing and deploying TrinityRCL in a real production environment, we evaluate TrinityRCL against two baseline methods and the results show that TrinityRCL has a significant performance advantage in terms of accuracy at the same level of granularity with comparable efficiency and is particularly effective to support large-scale systems with massive telemetry data.},
  keywords={},
  doi={10.1109/TSE.2023.3241299},
  ISSN={1939-3520},
  month={May},}@ARTICLE{9215019,
  author={Khazaei, Hamzeh and Mahmoudi, Nima and Barna, Cornel and Litoiu, Marin},
  journal={IEEE Transactions on Cloud Computing}, 
  title={Performance Modeling of Microservice Platforms}, 
  year={2022},
  volume={10},
  number={4},
  pages={2848-2862},
  abstract={Microservice architecture has transformed the way developers are building and deploying applications in the nowadays cloud computing centers. This new approach provides increased scalability, flexibility, manageability, and performance while reducing the complexity of the whole software development life cycle. The increase in cloud resource utilization also benefits microservice providers. Various microservice platforms have emerged to facilitate the DevOps of containerized services by enabling continuous integration and delivery. Microservice platforms deploy application containers on virtual or physical machines provided by public/private cloud infrastructures in a seamless manner. In this article, we study and evaluate the provisioning performance of microservice platforms by incorporating the details of all layers (i.e., both micro and macro layers) in the modeling process. To this end, we first build a microservice platform on top of Amazon EC2 cloud and then leverage it to develop a comprehensive performance model to perform what-if analysis and capacity planning for microservice platforms at scale. In other words, the proposed performance model provides a systematic approach to measure the elasticity of the microservice platform by analyzing the provisioning performance at both the microservice platform and the back-end macroservice infrastructures.},
  keywords={},
  doi={10.1109/TCC.2020.3029092},
  ISSN={2168-7161},
  month={Oct},}@ARTICLE{10160171,
  author={Abgaz, Yalemisew and McCarren, Andrew and Elger, Peter and Solan, David and Lapuz, Neil and Bivol, Marin and Jackson, Glenn and Yilmaz, Murat and Buckley, Jim and Clarke, Paul},
  journal={IEEE Transactions on Software Engineering}, 
  title={Decomposition of Monolith Applications Into Microservices Architectures: A Systematic Review}, 
  year={2023},
  volume={49},
  number={8},
  pages={4213-4242},
  abstract={Microservices architecture has gained significant traction, in part owing to its potential to deliver scalable, robust, agile, and failure-resilient software products. Consequently, many companies that use large and complex software systems are actively looking for automated solutions to decompose their monolith applications into microservices. This paper rigorously examines 35 research papers selected from well-known databases using a Systematic Literature Review (SLR) protocol and snowballing method, extracting data to answer the research questions, and presents the following four contributions. First, the Monolith to Microservices Decomposition Framework (M2MDF) which identifies the major phases and key elements of decomposition. Second, a detailed analysis of existing decomposition approaches, tools and methods. Third, we identify the metrics and datasets used to evaluate and validate monolith to microservice decomposition processes. Fourth, we propose areas for future research. Overall, the findings suggest that monolith decomposition into microservices remains at an early stage and there is an absence of methods for combining static, dynamic, and evolutionary data. Insufficient tool support is also in evidence. Furthermore, standardised metrics, datasets, and baselines have yet to be established. These findings can assist practitioners seeking to understand the various dimensions of monolith decomposition and the community's current capabilities in that endeavour. The findings are also of value to researchers looking to identify areas to further extend research in the monolith decomposition space.},
  keywords={},
  doi={10.1109/TSE.2023.3287297},
  ISSN={1939-3520},
  month={Aug},}@INPROCEEDINGS{9919941,
  author={Yang, Linwei and Li, Jing and Shi, Kuanzhi and Yang, Songlin and Yang, Qingfu and Sun, Jiangang},
  booktitle={2022 23rd Asia-Pacific Network Operations and Management Symposium (APNOMS)}, 
  title={MicroMILTS: Fault Location for Microservices Based Mutual Information and LSTM Autoencoder}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={Driven by the development of cloud computing and artificial intelligence, architecture has dramatically improved in terms of flexibility and scalability in software development. Therefore, it is increasingly being used to build large-scale applications for agile development. However, along with the technology heterogeneity, the dynamics of running instances, and the complexity of service dependencies, fault localization is extraordinarily difficult. In this paper, we present MicroMILTS, a microservice fault location method based on mutual information and an LSTM Autoencoder. MicroMILTS first uses BIRCH for anomaly detection based on the analysis of the performance metrics data correlated to microservice anomalies. Once anomalies are detected, a service dependency property graph is constructed based on the real-time microservice invocation relationships and the reconstructed deviations of performance metrics with the LSTM Autoencoder. Next, MicroMILTS dynamically updates the weight of each node in the service dependency property graph. Then, a PageRank-based random walk is applied for further ranking root causes. Finally, a Sock-shop microservice system is built on the Huawei Cloud to evaluate the performance of MicroMILTS. The experiment shows that MicroMILTS achieves a good root cause location result, with 90.4 % in precision and 91.6% in mean average precision, outperforming state-of-the-art methods.},
  keywords={},
  doi={10.23919/APNOMS56106.2022.9919941},
  ISSN={2576-8565},
  month={Sep.},}@ARTICLE{10125010,
  author={Zdun, Uwe and Queval, Pierre-Jean and Simhandl, Georg and Scandariato, Riccardo and Chakravarty, Somik and Jelić, Marjan and Jovanović, Aleksandar},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={Detection Strategies for Microservice Security Tactics}, 
  year={2023},
  volume={},
  number={},
  pages={1-17},
  abstract={Microservice architectures are widely used today to implement distributed systems. Securing microservice architectures is challenging because of their polyglot nature, continuous evolution, and various security concerns relevant to such architectures. This article proposes a novel, model-based approach providing detection strategies to address the automated detection of security tactics (or patterns and best practices) in a given microservice architecture decomposition model. Our novel detection strategies are metrics-based rules that decide conformance to a security recommendation based on a statistical predictor. The proposed approach models this recommendation using Architectural Design Decisions (ADDs). We apply our approach for four different security-related ADDs on access management, traffic control, and avoiding plaintext sensitive data in the context of microservice systems. We then apply our approach to a model data set of 10 open-source microservice systems and 20 variants of those systems. Our results are detection strategies showing a very low bias, a very high correlation, and a low prediction error in our model data set.},
  keywords={},
  doi={10.1109/TDSC.2023.3276487},
  ISSN={1941-0018},
  month={},}@INPROCEEDINGS{10092594,
  author={Filippone, Gianluca and Qaisar Mehmood, Nadeem and Autili, Marco and Rossi, Fabrizio and Tivoli, Massimo},
  booktitle={2023 IEEE 20th International Conference on Software Architecture (ICSA)}, 
  title={From monolithic to microservice architecture: an automated approach based on graph clustering and combinatorial optimization}, 
  year={2023},
  volume={},
  number={},
  pages={47-57},
  abstract={Migrating from a legacy monolithic system to a microservice architecture is a complex and time-consuming process. Software engineers may strongly benefit from automated support to identify a high-cohesive and loose-coupled set of microservices with proper granularity. The automated approach proposed in this paper extracts microservices by using graph clustering and combinatorial optimization to maximize cohesion and minimize coupling. The approach performs static analysis of the code to obtain a graph representation of the monolithic system. Then, it uses graph clustering to detect high-cohesive communities of nodes using the Louvain community algorithm. In parallel, the tool clusters the domain entities (i.e., classes representing uniquely identifiable concepts in a system domain) within bounded contexts to identify the required service granularity. Finally, it uses combinatorial optimization to minimize the coupling, hence deriving the microservice architecture. The approach is fully implemented. We applied it over four different monolithic systems and found valuable results. We evaluated the identified architectures through cohesion and coupling metrics, along with a comparison with other state-of-the-art approaches based on features such as granularity level, number of produced services, and methods applied. The approach implementation and the experimental results are publicly available.},
  keywords={},
  doi={10.1109/ICSA56044.2023.00013},
  ISSN={},
  month={March},}@INPROCEEDINGS{10371619,
  author={Ünlü, Hüseyin and Hacaloğlu, Tuna and Ömüral, Neslihan Küçükateş and Çalişkanel, Neslihan and Leblebici, Onur and Demirörs, Onur},
  booktitle={2023 49th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, 
  title={An Exploratory Case Study on Effort Estimation in Microservices}, 
  year={2023},
  volume={},
  number={},
  pages={215-218},
  abstract={Software project management plays an important role in producing high-quality software, and effort estimation can be considered as a backbone for successful project management. Size is a very significant attribute of software by being the only input to perform early effort estimation. Even though functional size measurement methods showed successful results in effort estimation of traditional data-centric architectures such as monoliths, they were not designed for today’s architectures which are more service-based and decentralized such as microservices. In these new systems, the event concept is highly used specifically for communication among different services. By being motivated by this fact, in this study, we looked for more microservice-compatible ways of sizing microservices using events and developed a method accordingly. Then, we conducted an exploratory case study in an organization using agile methods and measured the size of 17 Product Backlog Items (PBIs) to assess how this proposed method can be useful in effort estimation in microservices. The implication from the case study is that despite performing a more accurate effort estimation using the proposed size measurement than COSMIC, we were unable to significantly outperform using the total number of events. However, our suggested approach demonstrated to us a different way to use software size in terms of events, namely, to determine the coupling complexity of the project. This finding can be beneficial specifically when evaluating the change requests.},
  keywords={},
  doi={10.1109/SEAA60479.2023.00040},
  ISSN={2376-9521},
  month={Sep.},}@INPROCEEDINGS{10295809,
  author={Adrio, Kendricko and Tanzil, Clementius Nichklaus and Lianto, Michael Christian and Rasjid, Zulfany Erlisa},
  booktitle={2023 10th International Conference on Electrical Engineering, Computer Science and Informatics (EECSI)}, 
  title={Comparative Analysis of Monolith, Microservice API Gateway and Microservice Federated Gateway on Web-based application using GraphQL API}, 
  year={2023},
  volume={},
  number={},
  pages={654-660},
  abstract={The purpose of this research is to provide a detailed explanation regarding the characteristics as well as the pros and cons offered by various software development architecture, such as monolithic and Microservice architecture implemented with graph-based API called GraphQL. Monolithic architecture offers a centralized software development pattern with relatively simpler integration and development process. Conversely, Microservices architecture such as Gateway Aggregation and Federated Gateway will divide independent components of the application into smaller modules. Gateway Aggregation utilizes a single Gateway which acts as the main entry point for data exchange between the client and the application. In this research aims an application is developed using the three different architectures to measure the quality, both qualitative and quantitative performances of each architecture. There are several different parameters that are going to be used to measure the architecture’s performance such as response time and data throughput which become an essential criterion in conducting load and stress testing. The result is that the Monolithic architecture offers some advantages in its quantitative performance measurement due to better efficiency in collecting and processing requested data in a single application which utilizes fewer resources and shorter time. In contrast, the Gateway Aggregation architecture and Federated Gateway architecture also have some significant performance differences because it costs resources to combine several subgraphs together into a valid graph.},
  keywords={},
  doi={10.1109/EECSI59885.2023.10295809},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{10031648,
  author={Kleftakis, Spyridon and Mavrogiorgou, Argyro and Zafeiropoulos, Nikolaos and Mavrogiorgos, Konstantinos and Kiourtis, Athanasios and Kyriazis, Dimosthenis},
  booktitle={2022 IEEE International Conference on Computing (ICOCO)}, 
  title={A Comparative Study of Monolithic and Microservices Architectures in Machine Learning Scenarios}, 
  year={2022},
  volume={},
  number={},
  pages={352-357},
  abstract={Choosing the most suitable architecture for applications is not an easy decision. While the software giants have almost all put in place the microservices architecture, on smaller platforms such decision it is not so obvious. In the healthcare domain and specifically when accomplishing Machine Learning (ML) tasks in this domain, considering its special characteristics, the decision should be made based on specific metrics. In the context of the beHEALTHIER platform, a platform that is able to handle heterogeneous healthcare data towards their successful management and analysis by applying various ML tasks, such research gap was fully investigated. There has been conducted an experiment by installing the platform in three (3) different architectural ways, referring to the monolithic architecture, the clustered microservices architecture exploiting docker compose, and the microservices architecture exploiting Kubernetes cluster. For these three (3) environments, time-based measurements were made for each Application Programming Interface (API) of the diverse platform’s functionalities (i.e., components) and useful conclusions were drawn towards the adoption of the most suitable software architecture.},
  keywords={},
  doi={10.1109/ICOCO56118.2022.10031648},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{9885761,
  author={Chen, Yufu and Yan, Meng and Yang, Dan and Zhang, Xiaohong and Wang, Ziliang},
  booktitle={2022 IEEE International Conference on Web Services (ICWS)}, 
  title={Deep Attentive Anomaly Detection for Microservice Systems with Multimodal Time-Series Data}, 
  year={2022},
  volume={},
  number={},
  pages={373-378},
  abstract={Software architecture is undergoing a transition from monolithic architectures to microservices to achieve resilience, agility, and scalability in the software life circle. However, microservice architecture is not perfect and suffers from intermittent faults, leading to economic and user losses. Therefore, it is essential to detect anomalies in microservice systems accurately. The key limitation of current approaches lies in a lack of ability to detect multitype anomalies, excessive resource overhead, and requirements of expert knowledge. In this paper, we present a Deep Attentive anomaly detection approach with Multimodal data named DAM. With multimodal fusion, attentive LSTM, and a dynamic threshold selecting algorithm, DAM could detect anomalies accurately and efficiently in an unsupervised manner. We evaluate our approach by injecting six types of anomalies on a widely used microservice system, Train-Ticket. The result shows that DAM could detect multitype anomalies well, with 80.46% F-measure, achieving 16.76% and 29.52% improvement over two state-of-the-art baselines (Donut and DAGMM), respectively.},
  keywords={},
  doi={10.1109/ICWS55610.2022.00062},
  ISSN={},
  month={July},}@INPROCEEDINGS{10211993,
  author={Abbasi, Maryam and Melo, Pedro and Saraiva, Luzia and Pereira, Pedro and Martins, Pedro and Sá, Filipe and Cardoso, Filipe},
  booktitle={2023 18th Iberian Conference on Information Systems and Technologies (CISTI)}, 
  title={Enhancing Banking Operations with Microservices and Mobile Technology}, 
  year={2023},
  volume={},
  number={},
  pages={1-6},
  abstract={This paper presents a novel architecture for enhancing the banking experience by combining microservices and a mobile application. The use of microservices provides scalability and flexibility in the development process, making it easier to add new features or modify existing ones. The results of the study shows that the proposed architecture is capable of handling high volume of transactions and requests while providing high quality of service. The mobile application provides a user-friendly interface for accessing financial information, and the use of microservices ensures efficient management of data and transactions. The architecture also has the potential to improve security through the use of security measures to protect sensitive data. As a future research direction, the proposed architecture can be evaluated in real-world settings and its security can be further tested. The field of technology in the banking sector is constantly evolving, and it is important to stay updated with new advancements that can potentially improve the proposed architecture.},
  keywords={},
  doi={10.23919/CISTI58278.2023.10211993},
  ISSN={2166-0727},
  month={June},}@ARTICLE{10183809,
  author={Zeb, Shah and Rathore, Muhammad Ahmad and Hassan, Syed Ali and Raza, Saleem and Dev, Kapal and Fortino, Giancarlo},
  journal={IEEE Wireless Communications}, 
  title={Toward AI-Enabled NextG Networks with Edge Intelligence-Assisted Microservice Orchestration}, 
  year={2023},
  volume={30},
  number={3},
  pages={148-156},
  abstract={Network agility, automation, and intelligence are at the forefront of the next-generation networks (NGNs) vision, which aims to provide zero-touch service management and self-optimizing networks. In this article, we give an overview of the significance of artificial intelligence (Ali-enabled NGNs, their projected benefits, design requirements, and critical challenges for evolving heterogeneous softwarized networks where microservices can be autonomously orchestrated, scaled, and maintained. The convergence of emerging disruptive technologies, for example, AI, network softwarization, hybrid cloud/edge-native computing architecture, with NGNs accelerates the enhanced service-oriented architecture at the network core/edge level to support on-demand microservices, such as visibility services for intelligent network management. In addition, we present a use case study and conduct experiments based on a novel design of an edge intelligence framework that orchestrates and deploys AI microservices utilizing the testbed resources of a multisite cloud/edge-native NGNs. We use a deep learning-based forecaster model to predict near real-time edge network flow between a centralized service orchestrator hub and multiple edge devices, geographically apart. The obtained results show that the deployed forecaster model accurately predicts the throughput and latency of edge network flow (verified against the groundtruth observations), which is additionally validated through two performance metrics obtained, low root-mean-square error, and high coefficient of determination values. Finally, we outline some of the potential future prospects for AI-enabled NGNs research.},
  keywords={},
  doi={10.1109/MWC.015.2200461},
  ISSN={1558-0687},
  month={June},}@ARTICLE{9744560,
  author={Rossi, Fabiana and Cardellini, Valeria and Presti, Francesco Lo and Nardelli, Matteo},
  journal={IEEE Transactions on Cloud Computing}, 
  title={Dynamic Multi-Metric Thresholds for Scaling Applications Using Reinforcement Learning}, 
  year={2023},
  volume={11},
  number={2},
  pages={1807-1821},
  abstract={Cloud-native applications increasingly adopt the microservices architecture, which favors elasticity to satisfy the application performance requirements in face of variable workloads. To simplify the elasticity management, the trend is to create an auto-scaler instance per microservice, which controls its horizontal scalability by using the classic threshold-based policy. Although easy to implement, setting manually the scaling thresholds, which are usually statically-defined on a single metric, may lead to poor scaling decisions when applications are heterogeneous in terms of resource consumption. In this article, we study dynamic multi-metric threshold-based scaling policies, that exploit Reinforcement Learning (RL) to autonomously update the scaling thresholds, one per controlled resource (CPU and memory). The proposed RL approaches (i.e., QL, MB, and DQL Threshold) use different degrees of knowledge about the system dynamics. To model the thresholds’ adaptation actions, we consider two RL-based architectures. In the single-agent architecture, one agent drives the updates of both scaling thresholds. To speed-up the learning, the multi-agent architecture adopts a distinct agent per threshold. Simulation- and prototype-based results show the benefits of the proposed solutions when compared to the state-of-the-art policies and highlight the advantages of multi-agent MB Threshold and DQL Threshold approaches, in terms of deployment objectives and execution times.},
  keywords={},
  doi={10.1109/TCC.2022.3163357},
  ISSN={2168-7161},
  month={April},}@INPROCEEDINGS{10279802,
  author={Raghunandan, Arpitha and Kalasapura, Deepti and Caesar, Matthew},
  booktitle={ICC 2023 - IEEE International Conference on Communications}, 
  title={Digital Twinning for Microservice Architectures}, 
  year={2023},
  volume={},
  number={},
  pages={3018-3023},
  abstract={Digital twins have been designed and implemented for diverse applications like smart manufacturing, healthcare, supply chain and retail management. They provide monitoring, remote prognostics and health management capabilities for the various physical assets used in these domains. Many of these capabilities would be beneficial to microservice architectures as well, given the need for lightweight monitoring solutions in multitenant environments. In particular, twins can provide operators with real-time resource usage metrics which help with operational objectives such as resource planning, anomaly detection, rewind and replay and so on. In this work, we propose a design for building digital twins for microservice architectures. As a proof of concept, we focus on modelling the resource utilization as that is a key requirement for monitoring system reliability and security. In general, digital twins require a real world counterpart, a virtual model and a mechanism for consistently keeping both synchronized. We focus on the two latter aspects of the digital twin. Our approach involves converting a formal model of a microservice architecture into a digital twin that can capture and execute an actual cluster's state. We present an extensible architecture connecting the various components of the system and the twin and evaluate the twin's ability to capture the real-time state of a real Kubernetes cluster. We also discuss future extensions which can enhance the system's security by detecting a broad range of attacks.},
  keywords={},
  doi={10.1109/ICC45041.2023.10279802},
  ISSN={1938-1883},
  month={May},}@INPROCEEDINGS{10037281,
  author={Raharjo, Agus Budi and Andyartha, Putu Krisna and Wijaya, William Handi and Purwananto, Yudhi and Purwitasari, Diana and Juniarta, Nyoman},
  booktitle={2022 International Conference on Computer Engineering, Network, and Intelligent Multimedia (CENIM)}, 
  title={Reliability Evaluation of Microservices and Monolithic Architectures}, 
  year={2022},
  volume={},
  number={},
  pages={1-7},
  abstract={Software is continuously evolving as business processes that needed to be solved become increasingly complex. Software architecture is an important aspect during software design, with monolithic and microservices being two of the most common with their own advantages and disadvantages. Monolithic is a unified system with a relatively fast development time. Meanwhile, microservices facilitates low coupling and high cohesion, prioritizing maintenance, and ease of modification post-development. This research compares microservices and monolithic API-based thesis monitoring systems. Implementations are done using PHP, Redis, PostgreSQL, Docker, and Heroku. Reliability evaluations are done through automated tests with Apache JMeter. Metrics used are maturity, availability, fault tolerance, and recoverability based on the ISO/IEC 25010 reliability quality characteristics. The conclusion section showed that microservices are more reliable than the monolithic by demonstrating much better fault tolerance and recoverability, with comparable maturity and availability.},
  keywords={},
  doi={10.1109/CENIM56801.2022.10037281},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{9984530,
  author={Hettiarachchi, Lasal Sandeepa and Jayadeva, Senura Vihan and Bandara, Rusiru Abhisheak Vikum and Palliyaguruge, Dilmi and Arachchillage, Udara Srimath S. Samaratunge and Kasthurirathna, Dharshana},
  booktitle={2022 13th International Conference on Computing Communication and Networking Technologies (ICCCNT)}, 
  title={Artificial Intelligence-Based Centralized Resource Management Application for Distributed Systems}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={Due to the decentralized nature and emergence of new practices, tools, and platforms, microservices have become one of the most widely spread software architectures in the modern software industry. Furthermore, the advancement of software packaging tools like Docker and orchestration platforms such as Kubernetes enable developers and operation engineers to deploy and manage microservice applications more effectively and efficiently. However, establishing and managing microservice applications are still cumbersome due to the infrastructure configuration and array of disjoint tools that fail to understand the application’s dynamic behavior. As a result, developers need to configure multiple tools and platforms to automate the deployment and monitoring process to provide the optimal deployment strategy for microservices. Even though many tools are available in the industry, the fully automated product which comprises deployment, monitoring, resiliency evaluation and optimization were not developed yet. In response to this issue, we propose an artificial intelligence (AI)-based centralized resource management tool, that provides an automated low latency container management, cluster metrics gathering, resiliency evaluation and optimal deployment strategy behave in dynamic nature.},
  keywords={},
  doi={10.1109/ICCCNT54827.2022.9984530},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{10371525,
  author={Daniel, João and Guerra, Eduardo and Rosa, Thatiane and Goldman, Alfredo},
  booktitle={2023 49th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, 
  title={Towards the Detection of Microservice Patterns Based on Metrics}, 
  year={2023},
  volume={},
  number={},
  pages={132-139},
  abstract={Microservices is a popular architectural approach for complex systems in companies, despite its nature of decentralization. There is a comprehensive set of microservices architectural patterns that guides implementations and helps developers to overcome issues. However, the community still scarcely adopts these patterns and only has a theoretical understanding of them. In this work, in order to increase awareness of such patterns and provide aid to developers to better understand an architecture based on microservices, we propose a detection approach based on metrics for microservices patterns. We focused on structural or architectural patterns, and implemented detection for five of them. We conducted two case studies with real-world applications and evaluated the accuracy and applicability of our approach with the developers of those applications.},
  keywords={},
  doi={10.1109/SEAA60479.2023.00029},
  ISSN={2376-9521},
  month={Sep.},}@INPROCEEDINGS{10298321,
  author={Huang, Jun and Yang, Yang and Yu, Hang and Li, Jianguo and Zheng, Xiao},
  booktitle={2023 38th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Twin Graph-Based Anomaly Detection via Attentive Multi-Modal Learning for Microservice System}, 
  year={2023},
  volume={},
  number={},
  pages={66-78},
  abstract={Microservice architecture has sprung up over recent years for managing enterprise applications, due to its ability to independently deploy and scale services. Despite its benefits, ensuring the reliability and safety of a microservice system remains highly challenging. Existing anomaly detection algorithms based on a single data modality (i.e., metrics, logs, or traces) fail to fully account for the complex correlations and interactions between different modalities, leading to false negatives and false alarms, whereas incorporating more data modalities can offer opportunities for further performance gain. As a fresh attempt, we propose in this paper a semi-supervised graph-based anomaly detection method, MSTGAD, which seamlessly integrates all available data modalities via attentive multi-modal learning. First, we extract and normalize features from the three modalities, and further integrate them using a graph, namely MST (microservice system twin) graph, where each node represents a service instance and the edge indicates the scheduling relationship between different service instances. The MST graph provides a virtual representation of the status and scheduling relationships among service instances of a real-world microservice system. Second, we construct a transformer-based neural network with both spatial and temporal attention mechanisms to model the inter-correlations between different modalities and temporal dependencies between the data points. This enables us to detect anomalies automatically and accurately in real-time. Extensive experiments on two real-world datasets verify the effectiveness of our proposed MSTGAD method, achieving competitive performance against state-of-the-art approaches, with a 0.961 F1-score and an average increase of 4.85%. The source code of MST-GAD is publicly available at https://github.com/ant-research/microservice_system_twin_graph_based_anomaly_detection.},
  keywords={},
  doi={10.1109/ASE56229.2023.00138},
  ISSN={2643-1572},
  month={Sep.},}@INPROCEEDINGS{9932943,
  author={Pramesti, Annisa Ayu and Kistijantoro, Achmad Imam},
  booktitle={2022 9th International Conference on Advanced Informatics: Concepts, Theory and Applications (ICAICTA)}, 
  title={Autoscaling Based on Response Time Prediction for Microservice Application in Kubernetes}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={Containerized application are evolving along with the microservice architectures in distributed application development. This trend shows the importance of managing and orchestrating containerized applications thus applications can operate properly. One of the aspects of container orchestration is scaling or increasing the application’s ability to handle more requests. In this study, an autoscaler based on response time prediction is developed for microservice applications in Kubernetes environment. The prediction function is developed using a machine learning model that features performance metrics at the microservice and node levels. The response time prediction is then used to calculate the number of pods required by the application to meet the target response time. Our experiment shows that the proposed autoscaler can serve more requests that match the target response time compare with the Kubernetes Horizontal Pod Autoscaler (HPA) that are using CPU usage as the target. However, as the consequence, the proposed autoscaler consumes more resources than the Kubernetes HPA.},
  keywords={},
  doi={10.1109/ICAICTA56449.2022.9932943},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{10279721,
  author={Kalinagac, Onur and Soussi, Wissem and Anser, Yacine and Gaber, Chrystel and Gür, Gürkan},
  booktitle={ICC 2023 - IEEE International Conference on Communications}, 
  title={Root Cause and Liability Analysis in the Microservices Architecture for Edge IoT Services}, 
  year={2023},
  volume={},
  number={},
  pages={3277-3283},
  abstract={In this work, we present a liability analysis frame-work for root cause analysis (RCA) in the microservices architecture with IoT-oriented containerized network services. We keep track of the performance metrics of microservices, such as service response time, memory usage and availability, to detect anomalies. By injecting faults in the services, we construct a Causal Bayesian Network (CBN) which represents the relation between service faults and metrics. Service Level Agreement (SLA) data obtained from a descriptor named TRAILS (sTakeholder Responsibility, AccountabIlity and Liability deScriptor) is also used to flag service providers which have failed their commitments. In the case of SLA violation, the constructed CBN is used to predict the fault probability of services under given metric readings and to identify the root cause.},
  keywords={},
  doi={10.1109/ICC45041.2023.10279721},
  ISSN={1938-1883},
  month={May},}@INPROCEEDINGS{9960012,
  author={Ivanov, Rosen and Yordanov, Stanimir and Dinev, Dinko},
  booktitle={2022 International Conference Automatics and Informatics (ICAI)}, 
  title={Internet of Things–based pregnancy tracking and monitoring service}, 
  year={2022},
  volume={},
  number={},
  pages={298-302},
  abstract={This paper presents the architecture and implementation of a service for pregnancy tracking and monitoring. The main goal of the service is to analyze the behavior of pregnant women in order to proactively decide to notify medical staff when symptoms are detected that are risky for the normal pregnancy. This is achieved by (1) providing the necessary pregnancy-related information for each of the gestational weeks (nutrition, physical activity, normal and risk symptoms, necessary screening tests, etc.), (2) analysis of physical activity of pregnant women, (3) measurement and analysis of basic biological indicators using a wireless sensor network (pulse oximeter, human body temperature, biopotential channel to obtain electrocardiogram (ECG) and bioimpedance channel to measure respiration), and (4) receiving push notifications about important events related to the pregnancy; scheduled medical examinations; risk factors; and messages from the obstetrician under whose supervision the pregnant woman is. The service has a distributed architecture - it uses multiple microservices. The communication between clients (mobile app), wireless sensor network and microservices is realized through a message broker. Microservices use its own MongoDB databases hosted in the Azure cluster. Experiments were conducted to prove the feasibility of the service on simulated wireless sensor network.},
  keywords={},
  doi={10.1109/ICAI55857.2022.9960012},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{10248319,
  author={Castro, Jessica and Laranjeiro, Nuno and Vieira, Marco},
  booktitle={2023 IEEE International Conference on Web Services (ICWS)}, 
  title={Exploring Logic Scoring of Preference for DoS Attack Detection in Microservice Applications}, 
  year={2023},
  volume={},
  number={},
  pages={573-584},
  abstract={Microservice architectures allow the development of highly scalable, flexible, and manageable systems. However, such architectures raise new security problems and exacerbate the challenge of monitoring applications at runtime due to their high service granularity and distributed nature. Developing effective monitoring and security strategies is thus crucial to effectively detect potential attacks. This paper explores the applicability of Logic Scoring of Preference (LSP), a multi-criteria decision-making method to compute a score based on a set of preferences, for attack detection in microservice applications. We present an extensive experimental study and define a model based on LSP and application-level metrics to characterize the impact of DoS attacks. The output of the model is a unique score used to determine whether a microservice is under a DoS attack. The results of the experimental study show precision, recall, and f1-score rates of more than 80%, indicating that LSP could effectively characterize the application under attack, opening several possibilities for future work.},
  keywords={},
  doi={10.1109/ICWS60048.2023.00076},
  ISSN={2836-3868},
  month={July},}@INPROCEEDINGS{10083635,
  author={S, Savitha and C, Sangana and K, Devendran and L, Pravin and M, Rajkumar and C, Nirmal},
  booktitle={2023 7th International Conference on Computing Methodologies and Communication (ICCMC)}, 
  title={Auto Scaling Infrastructure with Monitoring Tools using Linux Server on Cloud}, 
  year={2023},
  volume={},
  number={},
  pages={45-52},
  abstract={Cloud computing is the term that has gained widespread usage over these last few years. Due to the rapid increase in the use of information in the digital age of the 21st century, it is increasingly becoming a more attractive option for individuals and organizations to manage all their essential data, projects, and collaborations, rather than relying solely on in-house computers. The user's requirement for hardware and software is reduced via cloud computing. The interface software of cloud computing systems, typically as simple as a web browser, is the only thing the user must operate, and the Cloud network handles the rest. To decrease operational costs, both business and government organizations are adopting cloud computing, seeking a flexible and adaptable solution for the supply and delivery of their product services. Microservices and decoupled apps are becoming more popular. These container-based architectures make it easier to build sophisticated SaaS apps quickly, but managing and creating microservices can be a daunting task. Managing and creating microservices that involve a wide range of diverse functions, including handling and storing information, and performing predictive and prescriptive analysis, can be a challenging undertaking. Establishing auto scaling infrastructure on doud can be challenging due to several reasons, some of which are: understanding the application architecture, setting up monitoring, scaling policies, cost optimization and implementation complexity. Server farms include the tremendous and heterogeneous virtualized frameworks, which are continually extending and broadening after sometime are the essential starting point for registering specialized organizations. These solutions also need to be integrated into existing systems while adhering to Quality of Service (QoS) requirements. The principal objective of this work is to propose an on-premise design to leverage Kubernetes and Docker containers to improve the quality of service based on resource usage and Service Level Objectives (SLOs). The Prometheus Administrator set up is used to perform namespace checking. Normally, doud providers enable their own monitoring tools (like CloudWatch) for monitoring CPU, storage and network usage, service component, however these tools cannot monitor the service component. Additionally, the advancements have restricted the capacity to follow QoS highlights at the application level (like security and execution) since the main focus will be dedicated towards the equipment assets. These types of node-level monitoring make it difficult to scale requests and deploy pods to match the demand. Infrastructure monitoring should enable runtime changes to monitor the requirements or metric operationalization should be done on those criteria without modifying the underlying infrastructure.},
  keywords={},
  doi={10.1109/ICCMC56507.2023.10083635},
  ISSN={},
  month={Feb},}@INPROCEEDINGS{10036308,
  author={Basciftci, Fatih and Aydemir, Fikri},
  booktitle={2022 IEEE 20th Jubilee International Symposium on Intelligent Systems and Informatics (SISY)}, 
  title={Strategies for Request-Response Logging in Microservices Architecture}, 
  year={2022},
  volume={},
  number={},
  pages={000121-000126},
  abstract={Microservices Architecture is the prevailing architectural choice today for building distributed software systems in various business sectors, such as telecommunications, e-commerce, and finance. It is often necessary to log the full content of request and response messages (i.e., the entire body of these messages) that are entering and leaving such distributed systems due to legal book-keeping requirements. In this work, two systematic design strategies were used to realize the structured logging of request-response messages including their entire message body, particularly in a microservices architecture-based distributed software system. As a case study, a prototype per strategy was implemented and deployed into an existing Microservices Architecture-based banking system, which was provided by a commercial bank for the research presented in this paper in the Kubernetes cluster. Load tests were performed against this banking system to measure average request throughputs and average response times per logging strategy for analysis purposes. The results that are presented in this paper are expected to be helpful for both researchers and practitioners in the software industry who need a similar logging solution.},
  keywords={},
  doi={10.1109/SISY56759.2022.10036308},
  ISSN={1949-0488},
  month={Sep.},}@INPROCEEDINGS{10262956,
  author={Yang, Yunhao and Jiang, Ying},
  booktitle={2023 IEEE 9th International Conference on Cloud Computing and Intelligent Systems (CCIS)}, 
  title={Microservice Indicator Prediction Method Based on STE and CNN-BiLSTM}, 
  year={2023},
  volume={},
  number={},
  pages={511-515},
  abstract={Due to the extensibility and continuous evolution of microservice architecture, there are a lot of uncertainties in the microservice system, which brings great risks to the reliability of the service. Indicator prediction plays an important role in service reliability. If the predicted value exceeds the safe range, alarms are generated and measures are taken to prevent faults. Therefore, a microservice indicator prediction method based on SET and CNN-BiLSTM is proposed. Symbolic transfer entropy (STE) is used to analyze the nonlinear causality, and a prediction model based on CNN-BiLSTM is established. The simulation results show that this method can capture the causal relationship between the indicators with nonlinear relationship effectively and improve the prediction accuracy.},
  keywords={},
  doi={10.1109/CCIS59572.2023.10262956},
  ISSN={2376-595X},
  month={Aug},}@INPROCEEDINGS{10303332,
  author={Jhingran, Sushant and Rakesh, Nitin},
  booktitle={2023 International Conference on Sustainable Emerging Innovations in Engineering and Technology (ICSEIET)}, 
  title={Application Deployment and Performance Measurement in Serverless Cloud for Microservices}, 
  year={2023},
  volume={},
  number={},
  pages={173-177},
  abstract={The effectiveness of Cloud technology relies heavily on its ability to perform at a high level. To measure this performance, it is necessary to conduct a performance evaluation based on specific aims and applications and assess the capabilities of the cloud services. In the case of enterprise applications deployed on the cloud, the service provider must consider the application's deployment model, security, networking, and operational constraints. This evaluation involves identifying benchmarks, configuring the system, running tests, analyzing results, and providing recommendations. There are various performance metrics that can be applied to different aspects of the cloud services to evaluate their performance. The figures below display data on resource utilization and the impact of the load on the application. Microservices offer organizations the opportunity to deploy applications on the cloud by providing web service functions and an architecture that enables scaling and updating of applications with minimal inconsistency. Through public cloud technology such as Amazon Web Services, organizations can deploy secure and valuable applications to the cloud.},
  keywords={},
  doi={10.1109/ICSEIET58677.2023.10303332},
  ISSN={},
  month={Sep.},}@INPROCEEDINGS{9779689,
  author={Vale, Guilherme and Correia, Filipe Figueiredo and Guerra, Eduardo Martins and de Oliveira Rosa, Thatiane and Fritzsch, Jonas and Bogner, Justus},
  booktitle={2022 IEEE 19th International Conference on Software Architecture (ICSA)}, 
  title={Designing Microservice Systems Using Patterns: An Empirical Study on Quality Trade-Offs}, 
  year={2022},
  volume={},
  number={},
  pages={69-79},
  abstract={The promise of increased agility, autonomy, scalability, and reusability has made the microservices architecture a de facto standard for the development of large-scale and cloud-native commercial applications. Software patterns are an important design tool, and often they are selected and combined with the goal of obtaining a set of desired quality attributes. However, from a research standpoint, many patterns have not been widely validated against industry practice, making them not much more than interesting theories. To address this, we investigated how practitioners perceive the impact of 14 patterns on 7 quality attributes. Hence, we conducted 9 semi-structured interviews to collect industry expertise regarding (1) knowledge and adoption of software patterns, (2) the perceived architectural trade-offs of patterns, and (3) metrics professionals use to measure quality attributes. We found that many of the trade-offs reported in our study matched the documentation of each respective pattern, and identified several gains and pains which have not yet been reported, leading to novel insight about microservice patterns.},
  keywords={},
  doi={10.1109/ICSA53651.2022.00015},
  ISSN={},
  month={March},}@INPROCEEDINGS{10136018,
  author={Lin, Zhichao and Wang, Qingsheng and Yang, Shifeng and Luo, Busheng and Ma, Qiujie and Yu, Chuankun},
  booktitle={2023 8th Asia Conference on Power and Electrical Engineering (ACPEE)}, 
  title={Modeling and Performance Analysis of Cloud-Based Active Distribution Networks Based on EdgeCloudSim}, 
  year={2023},
  volume={},
  number={},
  pages={1682-1687},
  abstract={In order to realise the performance + analysis of the cloud-based active distribution network, this paper proposes the modeling and performance analysis method of the cloud-based active distribution network. Firstly, based on the task processing requirements of the active distribution network, the corresponding task modeling method based on microservices is proposed. Then, the cloud-based active distribution network architecture modeling is proposed, and the corresponding dynamic resource allocation process is realised. In addition, through the professional edge computing simulation software EdgeCloudSim, the modeling of the cloud-based active distribution network is realised. The modeling includes specific scenarios, resource allocation and two task spatio-temporal logics. Task delay and resource load rate are as performance metrics. Finally, with microservices as the research granularity, the performance differences of different task spatio-temporal logics are analysed.},
  keywords={},
  doi={10.1109/ACPEE56931.2023.10136018},
  ISSN={},
  month={April},}@INPROCEEDINGS{9788687,
  author={Xu, Beibei and Zhao, Yanqing and Kuzminykh, Valeriy and Zhu, Shiwei and Yu, Junfeng and Zhang, Mingjun and Li, Sisi},
  booktitle={ICETIS 2022; 7th International Conference on Electronic Technology and Information Science}, 
  title={Research on the Evaluation System of International S&T Cooperation Based on Microservice Architecture}, 
  year={2022},
  volume={},
  number={},
  pages={1-5},
  abstract={The development of the world has benefited from advances in science and technology, and the destiny of mankind has become closer due to scientific and technological cooperation. International scientific and technological innovation cooperation is one of the important indicators to measure the potential and technological innovation of a country or region. Scientific evaluation and performance evaluation of international scientific and technological cooperation have become important for effectively improving the management level of international scientific and technological cooperation projects and promoting scientific and technological output. Means, the construction of a scientific cooperation evaluation and performance evaluation system has become a realistic demand for promoting international scientific and technological cooperation and strengthening performance management of international scientific and technological cooperation in the new era. Based on the analysis of the data sources, data structure, index evaluation system and system functions of the international scientific and technological cooperation evaluation system, the article proposes the system logic and hierarchical structure under the microservice architecture, and designs and implements the international scientific and technological cooperation evaluation system based on the microservice architecture.},
  keywords={},
  doi={},
  ISSN={},
  month={Jan},}@INPROCEEDINGS{9874065,
  author={Chinthavali, Supriya and Hasan, S.M.Shamimul and Yoginath, Srikanth and Xu, Haowen and Nugent, Phil and Jones, Terry and Engebretsen, Cozmo and Olatt, Joseph and Tansakul, Varisara and Christopher, Carter and Polsky, Yarom},
  booktitle={2022 IEEE 23rd International Conference on Information Reuse and Integration for Data Science (IRI)}, 
  title={An Alternative Timing and Synchronization Approach for Situational Awareness and Predictive Analytics}, 
  year={2022},
  volume={},
  number={},
  pages={172-177},
  abstract={Accurate and synchronized timing information is required by power system operators for controlling the grid infrastructure (relays, Phasor Measurement Units (PMUs), etc.) and determining asset positions. Satellite-based global positioning system (GPS) is the primary source of timing information. However, GPS disruptions today (both intentional and unintentional) can significantly compromise the reliability and security of our electric grids. A robust alternate source for accurate timing is critical to serve both as a deterrent against malicious attacks and as a redundant system in enhancing the resilience against extreme events that could disrupt the GPS network. To achieve this, we rely on the highly accurate, terrestrial atomic clock-based network for alternative timing and synchronization. In this paper, we discuss an experimental setup for an alternative timing approach. The data obtained from this experimental setup is continuously monitored and analyzed using various time deviation metrics. We also use these metrics to compute deviations of our clock with respect to the National Institute of Standards and Technologys (NIST) GPS data. The results obtained from these metric computations are elaborately discussed. Finally, we discuss the integration of the procedures involved, like real-time data ingestion, metric computation, and result visualization, in a novel microservices-based architecture for situational awareness.},
  keywords={},
  doi={10.1109/IRI54793.2022.00047},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{9973518,
  author={Chapman, Martin and G-Medhin, Abigail and Sassoon, Isabel and Kökciyan, Nadin and Sklar, Elizabeth I. and Curcin, Vasa},
  booktitle={2022 IEEE 18th International Conference on e-Science (e-Science)}, 
  title={Using Microservices to Design Patient-facing Research Software}, 
  year={2022},
  volume={},
  number={},
  pages={44-54},
  abstract={With a significant amount of software now being developed for use in patient-facing studies, there is a pressing need to consider how to design this software effectively in order to support the needs of both researchers and patients. We posit that a microservice architecture-which offers a large amount of flexibility for development and deployment, while at the same time ensuring certain quality attributes, such as scalability, are present-provides an effective mechanism for designing such software. To explore this proposition, in this work we show how the paradigm has been applied to the design of Consult, a decision support system that provides autonomous support to stroke patients and is characterised by its use of a data-backed AI reasoner. We discuss the impact that the use of this software architecture has had on the teams developing Consult and measure the performance of the system produced. We show that the use of microservices can deliver software that is able to facilitate both research and effective patient interactions. However, we also conclude that the impact of the approach only goes so far, with additional techniques needed to address its limitations.},
  keywords={},
  doi={10.1109/eScience55777.2022.00019},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{9808684,
  author={Hrusto, Adha and Engström, Emelie and Runeson, Per},
  booktitle={2022 IEEE/ACM 10th International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems (SESoS)}, 
  title={Optimization of Anomaly Detection in a Microservice System Through Continuous Feedback from Development}, 
  year={2022},
  volume={},
  number={},
  pages={13-20},
  abstract={Monitoring a microservice system may bring a lot of benefits to development teams such as early detection of run-time errors and various performance anomalies. In this study, we explore deep learning (DL) solutions for detection of anomalous system’s behavior based on collected monitoring data that consists of applications’ and systems’ performance metrics. The study is conducted in a collaboration with a Swedish company responsible for ticket and payment management in public transportation. Moreover, we specifically address a shortage of approaches for evaluating DL models without any ground truth data. Hence, we propose a solution design for anomaly detection and reporting alerts inspired by state-of-the-art DL solutions. Furthermore, we propose a plan for its in-context implementation and evaluation empowered by feedback from the development team. Through continuous feedback from development, the labeled data is generated and used for optimization of the DL model. In this way, a microservice system may leverage DL solutions to address rising challenges within its architecture. CCS CONCEPTS • Software and its engineering → Software post-development issues; • Information systems → Data mining; Computing platforms; • Computing methodologies → Machine learning.},
  keywords={},
  doi={},
  ISSN={},
  month={May},}@INPROCEEDINGS{10254995,
  author={Garbi, Giulio and Incerto, Emilio and Tribastone, Mirco},
  booktitle={2023 IEEE 16th International Conference on Cloud Computing (CLOUD)}, 
  title={μP: A Development Framework for Predicting Performance of Microservices by Design}, 
  year={2023},
  volume={},
  number={},
  pages={178-188},
  abstract={Microservice (MS) architecture has become a popular paradigm in software engineering and has been embraced in the industry (e.g., Amazon, Netflix) for cloud-based applications with crucial performance requirements. Surprisingly, assessing how the MS designs affect performance is still a challenging issue, which is generally tackled by extensive and expensive profiling. In this paper, we propose $\mu \mathbf{P}$, a novel development framework for MS applications where performance can be predicted $by$ design. $\mu \mathbf{P}$ offers an API that automatically generates a per-formance model based on Layered Queuing Networks (LQNs) without requiring any development effort beyond writing the actual system code. The model can then be queried to predict performance metrics such as response time and utilization of individual microservices. We validate $\mu \mathbf{P}$ on four benchmarks taken from the literature. The results show the effectiveness of $\mu \mathbf{P}$ in accurately predicting performance due to increasing user load, vertical and horizontal scaling. We report prediction errors for response times consistently lower than 10% across a wide range of operating conditions.},
  keywords={},
  doi={10.1109/CLOUD60044.2023.00029},
  ISSN={2159-6190},
  month={July},}@INPROCEEDINGS{10092637,
  author={Pinciroli, Riccardo and Aleti, Aldeida and Trubiani, Catia},
  booktitle={2023 IEEE 20th International Conference on Software Architecture (ICSA)}, 
  title={Performance Modeling and Analysis of Design Patterns for Microservice Systems}, 
  year={2023},
  volume={},
  number={},
  pages={35-46},
  abstract={The adoption of design patterns in the microservice architecture and cloud-native development scope was recently reviewed to investigate the industry practice. Interestingly, when considering performance-related aspects, practitioners focus on specific metrics (e.g., the time taken to handle requests) to identify sources of performance hindrance. This paper investigates a subset of seven design patterns that industrial practitioners indicate as relevant for system performance. We are interested to quantify the impact of these patterns while considering heterogeneous workloads, thus supporting software architects in understanding the root causes of performance issues. We use queuing networks to build the performance models of the seven design patterns and extract quantitative insights from model-based performance analysis. Our performance models are flexible in their input parameterization and reusable in different application contexts. We find that most design patterns confirm the expectation of practitioners, and our experimental results assess the identified performance gains and pains. One design pattern (i.e., Gateway Offloading) shows the peculiar characteristic of contributing to performance pains in some cases, leading to novel insights about the impact of design patterns in microservice systems.},
  keywords={},
  doi={10.1109/ICSA56044.2023.00012},
  ISSN={},
  month={March},}@INPROCEEDINGS{10074951,
  author={Li, Gongliang and Wen, Zepeng and Xie, Xin},
  booktitle={2022 IEEE 24th Int Conf on High Performance Computing & Communications; 8th Int Conf on Data Science & Systems; 20th Int Conf on Smart City; 8th Int Conf on Dependability in Sensor, Cloud & Big Data Systems & Application (HPCC/DSS/SmartCity/DependSys)}, 
  title={Unsupervised Anomaly Detection Based on CNN-VAE with Spectral Residual for KPIs}, 
  year={2022},
  volume={},
  number={},
  pages={1307-1313},
  abstract={Current large-scale applications, such as trading systems, blockchain, social software, etc, are increasingly adopting microservice architecture, which bring challenges to manual operation and maintenance, intrusion detection. In both operations and intrusion detection, there are a common characteristic that service metrics and network traffic are normal for most of the time, but anomaly data is more important. In this paper, we propose an unsupervised anomaly detection algorithm based on convolutional neural network with Spectral Residual, which is verified experimentally and has potential application capability with 19.2% f1-score improvement compared to the Variational AutoEncoder.},
  keywords={},
  doi={10.1109/HPCC-DSS-SmartCity-DependSys57074.2022.00204},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{10216673,
  author={Jaival, Madhavi and Mkrtchyan, Katya and Kaplan, Adam},
  booktitle={2022 International Conference on Computational Science and Computational Intelligence (CSCI)}, 
  title={Serverless Cloud Functions - Opportunity in Chaos}, 
  year={2022},
  volume={},
  number={},
  pages={1330-1335},
  abstract={Due to its cost-effectiveness and limited scope of administration, Serverless Computing has fast become a favorite cloud computing execution model. Meanwhile, with the rise of distributed cloud architectures and microservices in the last decade, many development teams have adopted the principles of Chaos Engineering. This allows them to assess the effects of random failures or delays on an application. In prior literature, serverless developers measured and reported cold-start penalties and transaction latency, whereas Chaos Engineers have studied security and resiliency in cloud infrastructure. In this work, we combine these approaches to measure the performance of a set of serverless cloud functions which implement common server-side file and database operations. We study each function's performance response under a set of controlled chaos experiments, wherein we emulate various client load conditions, as well as inject random delays into the function execution. We find that under heavy 1000-client load, the longest-latency operations can provide as much as 36.5% improvement to overall response time by failing early.},
  keywords={},
  doi={10.1109/CSCI58124.2022.00239},
  ISSN={2769-5654},
  month={Dec},}@INPROCEEDINGS{10175431,
  author={Centofanti, C. and Tiberti, W. and Marotta, A. and Graziosi, F. and Cassioli, D.},
  booktitle={2023 IEEE 9th International Conference on Network Softwarization (NetSoft)}, 
  title={Latency-Aware Kubernetes Scheduling for Microservices Orchestration at the Edge}, 
  year={2023},
  volume={},
  number={},
  pages={426-431},
  abstract={Network and computing infrastructures are nowadays challenged to meet the increasingly stringent requirements of novel applications. One of the most critical aspect is optimizing the latency perceived by the end-user accessing the services. New network architectures offer a natural framework for the efficient orchestration of microservices. However, how to incorporate accurate latency metrics into orchestration decisions still represents an open challenge.In this work we propose a novel architectural approach to perform scheduling operations in Kubernetes environment. Existing approaches proposed the collection of network metrics, e.g. latency between nodes in the cluster, via purposely-built external measurement services deployed in the cluster. Compared to other approaches the proposed one: (i) collects performance metrics at the application layer instead of network layer; (ii) relies on latency measurements performed inside the service of interest instead of utilizing external measurement services; (iii) takes scheduling decisions based on effective end-user perceived latency instead of considering the latency between cluster nodes.We show the effectiveness of our approach by adopting an iterative discovery strategy able to dynamically determine which node operates with the lowest latency for the Kubernetes pod placement.},
  keywords={},
  doi={10.1109/NetSoft57336.2023.10175431},
  ISSN={2693-9789},
  month={June},}@INPROCEEDINGS{9908059,
  author={Leiter, Ákos and Huszti, Dániel and Galambosi, Nándor and Lami, Edina and Salah, Mohamad Saleh and Kulics, Péter and Bokor, László},
  booktitle={2022 13th International Symposium on Communication Systems, Networks and Digital Signal Processing (CSNDSP)}, 
  title={Cloud-native IP-based mobility management: a MIPv6 Home Agent standalone microservice design}, 
  year={2022},
  volume={},
  number={},
  pages={252-257},
  abstract={The ever-increasing traffic and mobility events impose an unprecedented load on mobile networks. Meanwhile, the number of connected users and devices has been growing continuously; hence IPv6 is necessary to serve them. The mobility extension of IPv6 (Mobile IPv6) can also support and handle the rising demand for mobility management in the IP layer. At the same time, concepts like Network Function Virtualization, Software Defined Networks, and microservice architectures have changed the landscape of telecommunication services. In this paper, our prototype implementation is measured and evaluated: what containerization causes in case of different MIPv6-re1ated traffic types on the top of Kubernetes. Additionally, Kubernetes Container Network Interface types are compared for a microservice and container-based standalone Home Agent entity of a cloud-native Mobile IPv6 implementation.},
  keywords={},
  doi={10.1109/CSNDSP54353.2022.9908059},
  ISSN={},
  month={July},}@INPROCEEDINGS{10118016,
  author={Schindewolf, Marc and Grimm, Daniel and Lingor, Christian and Sax, Eric},
  booktitle={2022 IEEE 1st International Conference on Cognitive Mobility (CogMob)}, 
  title={Toward a Resilient Automotive Service-Oriented Architecture by using Dynamic Orchestration}, 
  year={2022},
  volume={},
  number={},
  pages={000147-000154},
  abstract={Modern software development in vehicles is focusing on a service-oriented approach. Structuring software systems into self-sufficient software components that provide specific capabilities to the overall system allow software engineers to make changes to vehicle functions more granularly. The decentralized SOA approach offers advantages, as it enables loose coupling between components instead of statically implementing their relationships. But with the increasing degree of autonomy and dynamism of the vehicle's software, the system's safety and security requirements are also growing. Preventive measures will no longer suffice here; instead, resilient systems are required that provide a minimum level of safety even in the event of an unexpected problem. Today, a SOA's services are assigned to a hardware platform during development and executed there, which lacks being able to react to problems or changing requirements. One possibility for being more flexible at runtime, is the use of an orchestrator, which dynamically allocates resources to services while retaining the advantages of a loosely coupled architecture. This paper proposes a methodology for implementing a resilient vehicular electronic architecture based on orchestrating containerized software. To avoid a single point of failure, a distributed approach for a dynamic orchestrator that deploys the software to appropriate execution platforms is proposed. The orchestrator makes its deployment decisions based on specifiable parameters (e.g., required RAM, GPU) and dependencies between services. The decision process adapts to changes in these factors dynamically, making the system able to react to external influences. The concept differentiates itself from other approaches by tracking dynamic changes to specified parameters and easily extensible interfaces for new parameters or requirements. In addition, the concept introduces a priority metric to describe the impact of services in the system and models how this metric is inherited through dependencies. The concept is evaluated qualitatively by three exemplary use cases, demonstrating the effect of dynamic orchestration on the resilience of the vehicle.},
  keywords={},
  doi={10.1109/CogMob55547.2022.10118016},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{9779839,
  author={Serbout, Souhaila and Lauro, Fabio Di and Pautasso, Cesare},
  booktitle={2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C)}, 
  title={Web APIs Structures and Data Models Analysis}, 
  year={2022},
  volume={},
  number={},
  pages={84-91},
  abstract={Microservice architectures emphasize keeping components small, to foster autonomy, low coupling and independent evolution. In this large-scale empirical study we measure the size of Web API specifications mined from open source repositories. These APIs are modeled using the OpenAPI Specification (OAS), which, in addition to documenting the offered operations, also contain schemas definitions for the data exchanged with the API request and response message payloads. This study has as a goal to build empirical knowledge about: (1) How big and diverse are real-world web APIs both in terms of their operations and data, (2) How different API structures use and reuse schema definitions. By mining public software repositories on Github, we gathered 42,194 valid OAS specifications published between 2014-2021. These specifications include descriptions of Web APIs of well-known services providers such as Google, VMware (Avi Networks), Twilio, Amazon. After measuring the size of API structures and their data model schemas, we found that most APIs are rather small. Also there is a medium correlation between the size of the APIs’ functional structures and their data models. API developers do reuse schema definitions within the same API model.},
  keywords={},
  doi={10.1109/ICSA-C54293.2022.00059},
  ISSN={2768-4288},
  month={March},}@INPROCEEDINGS{10011525,
  author={Ünlü, Hüseyin and Hacaloglu, Tuna and Büber, Fatma and Berrak, Kıvılcım and Leblebici, Onur and Demirörs, Onur},
  booktitle={2022 48th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, 
  title={Utilization of Three Software Size Measures for Effort Estimation in Agile World: A Case Study}, 
  year={2022},
  volume={},
  number={},
  pages={239-246},
  abstract={Functional size measurement (FSM) methods, by being systematic and repeatable, are beneficial in the early phases of the software life cycle for core project management activities such as effort, cost, and schedule estimation. However, in agile projects, requirements are kept minimal in the early phases and are detailed over time as the project progresses. This situation makes it challenging to identify measurement components of FSM methods from requirements in the early phases, hence complicates applying FSM in agile projects. In addition, the existing FSM methods are not fully compatible with today’s architectural styles, which are evolving into event-driven decentralized structures. In this study, we present the results of a case study to compare the effectiveness of different size measures: functional -COSMIC Function Points (CFP)-, event-based - Event Points-, and code length-based - Line of Code (LOC)-on projects that were developed with agile methods and utilized a microservice-based architecture. For this purpose, we measured the size of the project and created effort estimation models based on three methods. It is found that the event-based method estimated effort with better accuracy than the CFP and LOC-based methods.},
  keywords={},
  doi={10.1109/SEAA56994.2022.00045},
  ISSN={},
  month={Aug},}@ARTICLE{9758767,
  author={Surantha, Nico and Utomo, Oei K. and Lionel, Earlicha M. and Gozali, Isabella D. and Isa, Sani M.},
  journal={IEEE Access}, 
  title={Intelligent Sleep Monitoring System Based on Microservices and Event-Driven Architecture}, 
  year={2022},
  volume={10},
  number={},
  pages={42069-42080},
  abstract={Sleep monitoring using polysomnography (PSG) in hospitals can be considered expensive, so the preferable way is to use contactless and wearable sensors to monitor sleep daily by patients at home. In this study, the Internet-of-Things (IoT) platform was utilized for sleep monitoring with contactless or wearable sensors as an integrated system developed based on an event-driven and microservice architecture. Multiple services that respond to events are provided within the system. Electrocardiogram (ECG) data were used as the input in the sleep monitoring system. The combination of the weighted extreme learning machine (WELM) algorithm with particle swarm optimization (PSO) was used to process the ECG data, followed by fuzzy logic to measure sleep quality, then display the data on the dashboard. Based on the experimental results, the proposed architecture increased throughput by 34.76%, decreased response time by 55.85%, and reduced memory consumption by 37.26% per instance replication compared to the non-event-driven architecture. The accuracies of the sleep stage classification were 78.78% and 73.09% for the three and four classes, respectively, and the area under a receiver operating characteristic (ROC) curve (AUC) reached 0.89 for both the three and four class classifications.},
  keywords={},
  doi={10.1109/ACCESS.2022.3167637},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{9912639,
  author={El Malki, Amine and Zdun, Uwe and Pautasso, Cesare},
  booktitle={2022 IEEE International Conference on Service-Oriented System Engineering (SOSE)}, 
  title={Impact of API Rate Limit on Reliability of Microservices-Based Architectures}, 
  year={2022},
  volume={},
  number={},
  pages={19-28},
  abstract={Many API patterns and best practices have been developed around microservices-based architectures, such as Rate Limiting and Circuit Breaking, to increase quality properties such as reliability, availability, scalability, and performance. Even though estimates on such properties would be beneficial, especially during the early design of such architectures, the real impact of the patterns on these properties has not been rigorously studied yet. This paper focuses on API Rate Limit and its impact on reliability properties from the perspective of API clients. We present an analytical model that considers specific workload configurations and predefined rate limits and then accurately predicts the success and failure rates of the back-end services. The model also presents a method for adaptively fine-tuning rate limits. We performed two extensive data experiments to validate the model and measured Rate Limiting impacts, firstly on a private cloud to minimize latency and other biases, and secondly on the Google Cloud Platform to test our model in a realistic cloud environment. In both experiments, we observed a low percentage of prediction errors. Thus, we conclude that our model can provide distributed system engineers and architects with insights into an acceptable value for the rate limits to choose for a given workload. Very few works empirically studied the impact of Rate Limit or similar API-related patterns on reliability.},
  keywords={},
  doi={10.1109/SOSE55356.2022.00009},
  ISSN={2642-6587},
  month={Aug},}@INPROCEEDINGS{9861873,
  author={Vosteen, Lars and John, Fabian and Schuljak, Joerg and Sievers, Bjoern and Hanemann, Andreas and Hellbrueck, Horst},
  booktitle={Mobile Communication - Technologies and Applications; 26th ITG-Symposium}, 
  title={Practical Security Analysis and Measures for 5G Private Industrial Standalone (SA) Deployments}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={The standardization of the fifth generation of mobile communications has been completed, and the expansion of the 5G system is currently being driven forward. In addition to public mobile networks, the 5G mobile network standard foresees privately operated systems. Private 5G systems are started to be deployed and operated in industrial and academic environments using off-the-shelf components like standard computing hardware, software-defined radios, and open-source software with costs below 10k EUR. 5G systems are extensible and scalable due to the service-oriented architecture of the distributed 5G system. Especially in industrial deployment, the demand for security of networks is high, for example, to protect in-house data. In this paper, we present a security analysis for 5G systems from different possible attack points from the operator’s perspective. We conduct selected attacks to highlight and demonstrate weakness on our private indoor 5G testbed at the University of Applied Sciences in Lübeck. From the results of the security analysis and attacks, we derive measures to improve the security of the 5G system. Finally, we verify the effectiveness of the measures by additional tests.},
  keywords={},
  doi={},
  ISSN={},
  month={May},}@INPROCEEDINGS{10334274,
  author={Beingolea, Jorge R. and Zegarra, Milagros and Bolivar, Renzo and Rendulich, Jorge and Borja-Murillo, Juan},
  booktitle={2023 IEEE Colombian Conference on Communications and Computing (COLCOM)}, 
  title={Heterogeneous Devices: Network Layer Integration Experience}, 
  year={2023},
  volume={},
  number={},
  pages={1-6},
  abstract={The work proposes the development of an integration architecture for highly heterogeneous sensor network ecosystems. The implementation is carried out on a device called the “integration device”. The device functions as a management and abstraction layer, integrated with the communication and data layer of a service-oriented middleware. The integration device controls real-time events through the programming of thread groups, which have the role of managing and abstracting the heterogeneity of data and communication protocols of wireless sensor devices. A part of the integration device implementation is presented, and data transfer rate experiments are conducted to measure its performance.},
  keywords={},
  doi={10.1109/COLCOM59909.2023.10334274},
  ISSN={2771-568X},
  month={July},}@INPROCEEDINGS{10044743,
  author={Yensabai, Chavapol and Ngoenthai, Waranyu and Leangarun, Teema and Koolpiruck, Diew},
  booktitle={2023 Third International Symposium on Instrumentation, Control, Artificial Intelligence, and Robotics (ICA-SYMP)}, 
  title={Digital Retail Shop Services in Cyber-Physical Retail System: A Case Study of Food Business}, 
  year={2023},
  volume={},
  number={},
  pages={61-64},
  abstract={Food demand is expected to grow substantially as a result of major factors such as population. It necessitates that food manufacturers streamline their supply chain to accommodate shorter product life cycles. To manage sustainable food solutions and successful supply chain management, cyber-physical systems at the supply chain level attempt to challenge the integration of data from suppliers, manufacturing, logistics, and retail. The implementation of Cyber-Physical Retail Systems (CPRS) was developed to sense and analyze dynamic market environments to modify sales and shop operation activities. The data were collected from several ERP modules and operational technology (OT) data. The shop CPS was managed using the OSIsoft-PI platform, which is based on service-oriented architecture (SOA) and then integrated into the Enterprise Cloud. The customer analytics service in CPRS was used as an example of a self-aware concept to notify the sales function and was implemented on the Azure platform. The results show that churn prediction in retail shops can be detected monthly for warning sales staff based on the customer object goal. The models that were used are RF, LR and GBC. The overall performance of GBC outperforms all measures with 78.05% accuracy. While the remaining were around 65%.},
  keywords={},
  doi={10.1109/ICA-SYMP56348.2023.10044743},
  ISSN={},
  month={Jan},}@ARTICLE{8851303,
  author={Cabrera, Christian and Clarke, Siobhán},
  journal={IEEE Transactions on Services Computing}, 
  title={A Self-Adaptive Service Discovery Model for Smart Cities}, 
  year={2022},
  volume={15},
  number={1},
  pages={386-399},
  abstract={City services are frequently supported by software services that are managed by service-oriented architectures. However, a large number of software services is likely to cause performance issues when discovering software services. The distributed organisation of services information improves discovery performance. Existing research proposes to organise services information according to service location, domains, or city context, keeping that organisation constant under an assumption that cities do not change. However, cities are dynamic environments where entities interact, causing events that in turn, effect changes in the city. The organisation of services information must evolve or it will become outdated, negatively impacting discovery performance. We propose a self-adaptive service model for smart cities to support service discovery. This model adapts the organisation of services information according to city events. We introduce a self-adaptive architecture that keeps track of the discovery metrics and moves information about services between registries to maintain the discovery efficiency. We evaluate the proposed model in simulated environments and a real IoT testbed. Results show that our model outperforms competitors when reactive adaptation is triggered by a specific event. However, proactive adaptation needs further research. Results from the real IoT testbed present the costs of the proposed model.},
  keywords={},
  doi={10.1109/TSC.2019.2944356},
  ISSN={1939-1374},
  month={Jan},}@INPROCEEDINGS{9796395,
  author={Paleyes, Andrei and Cabrera, Christian and Lawrence, Neil D.},
  booktitle={2022 IEEE/ACM 1st International Conference on AI Engineering – Software Engineering for AI (CAIN)}, 
  title={An Empirical Evaluation of Flow Based Programming in the Machine Learning Deployment Context}, 
  year={2022},
  volume={},
  number={},
  pages={54-64},
  abstract={As use of data driven technologies spreads, software engineers are more often faced with the task of solving a business problem using data-driven methods such as machine learning (ML) algorithms. Deployment of ML within large software systems brings new challenges that are not addressed by standard engineering practices and as a result businesses observe high rate of ML deployment project failures. Data Oriented Architecture (DOA) is an emerging approach that can support data scientists and software developers when addressing such challenges. However, there is a lack of clarity about how DOA systems should be implemented in practice. This paper proposes to consider Flow-Based Programming (FBP) as a paradigm for creating DOA applications. We empirically evaluate FBP in the context of ML deployment on four applications that represent typical data science projects. We use Service Oriented Architecture (SOA) as a baseline for comparison. Evaluation is done with respect to different application domains, ML deployment stages, and code quality metrics. Results reveal that FBP is a suitable paradigm for data collection and data science tasks, and is able to simplify data collection and discovery when compared with SOA. We discuss the advantages of FBP as well as the gaps that need to be addressed to increase FBP adoption as a standard design paradigm for DOA. CCS CONCEPTS • Software and its engineering → Software design tradeoffs; • Computing methodologies → Machine learning.},
  keywords={},
  doi={10.1145/3522664.3528601},
  ISSN={},
  month={May},}@ARTICLE{8936375,
  author={Sun, Chang-ai and Dai, Hepeng and Wang, Guan and Towey, Dave and Chen, Tsong Yueh and Cai, Kai-Yuan},
  journal={IEEE Transactions on Services Computing}, 
  title={Dynamic Random Testing of Web Services: A Methodology and Evaluation}, 
  year={2022},
  volume={15},
  number={2},
  pages={736-751},
  abstract={In recent years, service oriented architecture (SOA) has been increasingly adopted to develop distributed applications in the context of the Internet. To develop reliable SOA-based applications, an important issue is how to ensure the quality of web services. In this article, we propose a dynamic random testing (DRT) technique for web services, which is an improvement over the widely-practiced random testing (RT) and partition testing (PT) approaches. We examine key issues when adapting DRT to the context of SOA, including a framework, guidelines for parameter settings, and a prototype for such an adaptation. Empirical studies are reported where DRT is used to test three real-life web services, and mutation analysis is employed to measure the effectiveness. Our experimental results show that, compared with the three baseline techniques, RT, Adaptive Testing (AT) and Random Partition Testing (RPT), DRT demonstrates higher fault-detection effectiveness with a lower test case selection overhead. Furthermore, the theoretical guidelines of parameter setting for DRT are confirmed to be effective. The proposed DRT and the prototype provide an effective and efficient approach for testing web services.},
  keywords={},
  doi={10.1109/TSC.2019.2960496},
  ISSN={1939-1374},
  month={March},}@ARTICLE{9222262,
  author={Wang, Chen and Ma, Hui and Chen, Gang and Hartmann, Sven and Branke, J&#x00FC;rgen},
  journal={IEEE Transactions on Emerging Topics in Computational Intelligence}, 
  title={Robustness Estimation and Optimisation for Semantic Web Service Composition With Stochastic Service Failures}, 
  year={2022},
  volume={6},
  number={1},
  pages={77-92},
  abstract={Service-oriented architecture (SOA) is a widely adopted software engineering paradigm that encourages modular and reusable applications. One popular application of SOA is web service composition, which aims to loosely couple web services to accommodate complex goals not achievable through any individual web service. Many approaches have been proposed to construct composite services with optimized Quality of Service (QoS), assuming that QoS of web services never changes. However, the constructed composite services may not perform well and may not be executable later due to its component services' failure. Therefore, it is important to build composite services that are robust to stochastic service failures. Two challenges of building robust composite services are to efficiently generate service composition with near-optimal quality in a large search space of available services and to accurately measure the robustness of composite services considering all possible failure scenarios. This article proposes a novel two-stage GA-based approach to robust web service composition with an adaptive evolutionary control and an efficient robustness measurement. This approach can generate robust composite service at the design phase, which can cope with stochastic service failures and maintain high quality at the time of execution. We have conducted experiments with benchmark datasets to evaluate the performance of our proposed approach. Our experiments show that our method can produce highly robust composite services, achieving outstanding performance consistently in the event of stochastic service failures, on service repositories with varying sizes.},
  keywords={},
  doi={10.1109/TETCI.2020.3027870},
  ISSN={2471-285X},
  month={Feb},}@ARTICLE{9463396,
  author={Chen, Jeng-Chung and Chen, Chun-Chih and Shen, Chih-Hsiung and Chen, Ho-Wen},
  journal={IEEE Internet of Things Journal}, 
  title={User Integration in Two IoT Sustainable Services by Evaluation Grid Method}, 
  year={2022},
  volume={9},
  number={3},
  pages={2242-2252},
  abstract={To meet the need for sustainable development, Taiwan has been spreading a network of micro-monitoring stations to measure the environmental quality in rivers and air to protect people from environmental pollution. As a result, more and more information technology companies develop Internet of Things (IoT) services for this job. However, most IoT services are screened out of the market because lacking design thinking. Therefore, including users’ desires in IoT products and services is a critical determinant for their survival in this permanently changing market. Thus, this study proposed a systematic framework to identify the users’ desires from different stakeholders to determine technological development. For this, we use the evaluation grid method (EGM) to explore the users’ desires by a series of in-depth interviews and visualize the user’s response as a hierarchical evaluation map of attraction. After that, an IoT prototype is built and used to capture the insightful feedback of respondents. Meanwhile, we adopt the minimum viable product (MVP) design principles to develop two prototypes that manage a wastewater treatment plant and household environment. Overall, this study proposes an applicable user integration procedure to help IT engineers develop the IoT for sustainable service. This study also confirms that the MVP method can help to accelerate user integration. We propose a service-oriented IoT architecture in technology development and develop a decision-making service of human dispatch in operating environmental facilities and a context-awareness service for environmental control.},
  keywords={},
  doi={10.1109/JIOT.2021.3091688},
  ISSN={2327-4662},
  month={Feb},}
